
FOC_H7_1MB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be4c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800c0e4  0800c0e4  0001c0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c150  0800c150  000205b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c150  0800c150  0001c150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c158  0800c158  000205b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c158  0800c158  0001c158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c15c  0800c15c  0001c15c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005b8  24000000  0800c160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000538  240005b8  0800c718  000205b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000af0  0800c718  00020af0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000205b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ba19  00000000  00000000  000205e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003da5  00000000  00000000  0004bfff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c90  00000000  00000000  0004fda8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b18  00000000  00000000  00051a38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003ad58  00000000  00000000  00053550  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018084  00000000  00000000  0008e2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00181678  00000000  00000000  000a632c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002279a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007dd8  00000000  00000000  00227a20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240005b8 	.word	0x240005b8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c0cc 	.word	0x0800c0cc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240005bc 	.word	0x240005bc
 80002d4:	0800c0cc 	.word	0x0800c0cc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <parkclark>:
{
return((int)(data2angle*rawdata));
}

void parkclark(int Ia,int Ib,int Ic,int theta,float *Iq,float *Id )
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	ed2d 8b02 	vpush	{d8}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
 80005e8:	603b      	str	r3, [r7, #0]
//		part1=0;
//	}
//	part1=-sin_lut(theta)*Ia;
//	part2=-sin_lut(theta+240)*Ib;
//	part3=-sin_lut(theta+120)*Ic;
	*Iq = (pc_coff*(-sin_lut(theta)*Ia - sin_lut(theta+240)*Ib - sin_lut(theta+120)*Ic))*0.001;
 80005ea:	6838      	ldr	r0, [r7, #0]
 80005ec:	f000 f90e 	bl	800080c <sin_lut>
 80005f0:	eef0 7a40 	vmov.f32	s15, s0
 80005f4:	eeb1 7a67 	vneg.f32	s14, s15
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	ee07 3a90 	vmov	s15, r3
 80005fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000602:	ee27 8a27 	vmul.f32	s16, s14, s15
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	33f0      	adds	r3, #240	; 0xf0
 800060a:	4618      	mov	r0, r3
 800060c:	f000 f8fe 	bl	800080c <sin_lut>
 8000610:	eeb0 7a40 	vmov.f32	s14, s0
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	ee07 3a90 	vmov	s15, r3
 800061a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800061e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000622:	ee38 8a67 	vsub.f32	s16, s16, s15
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	3378      	adds	r3, #120	; 0x78
 800062a:	4618      	mov	r0, r3
 800062c:	f000 f8ee 	bl	800080c <sin_lut>
 8000630:	eeb0 7a40 	vmov.f32	s14, s0
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	ee07 3a90 	vmov	s15, r3
 800063a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800063e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000642:	ee38 7a67 	vsub.f32	s14, s16, s15
 8000646:	4b2c      	ldr	r3, [pc, #176]	; (80006f8 <parkclark+0x120>)
 8000648:	edd3 7a00 	vldr	s15, [r3]
 800064c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000650:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000654:	ed9f 6b26 	vldr	d6, [pc, #152]	; 80006f0 <parkclark+0x118>
 8000658:	ee27 7b06 	vmul.f64	d7, d7, d6
 800065c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000660:	6a3b      	ldr	r3, [r7, #32]
 8000662:	edc3 7a00 	vstr	s15, [r3]
	*Id = (pc_coff*(cos_lut(theta)*Ia + cos_lut(theta+240)*Ib + cos_lut(theta+120)*Ic))*0.001;
 8000666:	6838      	ldr	r0, [r7, #0]
 8000668:	f000 f8f2 	bl	8000850 <cos_lut>
 800066c:	eeb0 7a40 	vmov.f32	s14, s0
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	ee07 3a90 	vmov	s15, r3
 8000676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800067a:	ee27 8a27 	vmul.f32	s16, s14, s15
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	33f0      	adds	r3, #240	; 0xf0
 8000682:	4618      	mov	r0, r3
 8000684:	f000 f8e4 	bl	8000850 <cos_lut>
 8000688:	eeb0 7a40 	vmov.f32	s14, s0
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	ee07 3a90 	vmov	s15, r3
 8000692:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800069a:	ee38 8a27 	vadd.f32	s16, s16, s15
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	3378      	adds	r3, #120	; 0x78
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 f8d4 	bl	8000850 <cos_lut>
 80006a8:	eeb0 7a40 	vmov.f32	s14, s0
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	ee07 3a90 	vmov	s15, r3
 80006b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006ba:	ee38 7a27 	vadd.f32	s14, s16, s15
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <parkclark+0x120>)
 80006c0:	edd3 7a00 	vldr	s15, [r3]
 80006c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006cc:	ed9f 6b08 	vldr	d6, [pc, #32]	; 80006f0 <parkclark+0x118>
 80006d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006d4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006da:	edc3 7a00 	vstr	s15, [r3]
}
 80006de:	bf00      	nop
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	ecbd 8b02 	vpop	{d8}
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	f3af 8000 	nop.w
 80006f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80006f4:	3f50624d 	.word	0x3f50624d
 80006f8:	24000000 	.word	0x24000000

080006fc <inv_parkclark>:

void inv_parkclark(int *Va,int *Vb,int *Vc,int theta,int Vq,int Vd )
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	ed2d 8b02 	vpush	{d8}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
 800070c:	603b      	str	r3, [r7, #0]
	*Va = (int)(pc_coff*(cos_lut(theta)*Vd - sin_lut(theta)*Vq));
 800070e:	6838      	ldr	r0, [r7, #0]
 8000710:	f000 f89e 	bl	8000850 <cos_lut>
 8000714:	eeb0 7a40 	vmov.f32	s14, s0
 8000718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071a:	ee07 3a90 	vmov	s15, r3
 800071e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000722:	ee27 8a27 	vmul.f32	s16, s14, s15
 8000726:	6838      	ldr	r0, [r7, #0]
 8000728:	f000 f870 	bl	800080c <sin_lut>
 800072c:	eeb0 7a40 	vmov.f32	s14, s0
 8000730:	6a3b      	ldr	r3, [r7, #32]
 8000732:	ee07 3a90 	vmov	s15, r3
 8000736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800073a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800073e:	ee38 7a67 	vsub.f32	s14, s16, s15
 8000742:	4b31      	ldr	r3, [pc, #196]	; (8000808 <inv_parkclark+0x10c>)
 8000744:	edd3 7a00 	vldr	s15, [r3]
 8000748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800074c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000750:	ee17 2a90 	vmov	r2, s15
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	601a      	str	r2, [r3, #0]
	*Vb = (int)(pc_coff*(cos_lut(theta+240)*Vd - sin_lut(theta+240)*Vq));
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	33f0      	adds	r3, #240	; 0xf0
 800075c:	4618      	mov	r0, r3
 800075e:	f000 f877 	bl	8000850 <cos_lut>
 8000762:	eeb0 7a40 	vmov.f32	s14, s0
 8000766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000768:	ee07 3a90 	vmov	s15, r3
 800076c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000770:	ee27 8a27 	vmul.f32	s16, s14, s15
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	33f0      	adds	r3, #240	; 0xf0
 8000778:	4618      	mov	r0, r3
 800077a:	f000 f847 	bl	800080c <sin_lut>
 800077e:	eeb0 7a40 	vmov.f32	s14, s0
 8000782:	6a3b      	ldr	r3, [r7, #32]
 8000784:	ee07 3a90 	vmov	s15, r3
 8000788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800078c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000790:	ee38 7a67 	vsub.f32	s14, s16, s15
 8000794:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <inv_parkclark+0x10c>)
 8000796:	edd3 7a00 	vldr	s15, [r3]
 800079a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800079e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007a2:	ee17 2a90 	vmov	r2, s15
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	601a      	str	r2, [r3, #0]
	*Vc = (int)(pc_coff*(cos_lut(theta+120)*Vd - sin_lut(theta+120)*Vq));
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	3378      	adds	r3, #120	; 0x78
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 f84e 	bl	8000850 <cos_lut>
 80007b4:	eeb0 7a40 	vmov.f32	s14, s0
 80007b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ba:	ee07 3a90 	vmov	s15, r3
 80007be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007c2:	ee27 8a27 	vmul.f32	s16, s14, s15
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	3378      	adds	r3, #120	; 0x78
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 f81e 	bl	800080c <sin_lut>
 80007d0:	eeb0 7a40 	vmov.f32	s14, s0
 80007d4:	6a3b      	ldr	r3, [r7, #32]
 80007d6:	ee07 3a90 	vmov	s15, r3
 80007da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007e2:	ee38 7a67 	vsub.f32	s14, s16, s15
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <inv_parkclark+0x10c>)
 80007e8:	edd3 7a00 	vldr	s15, [r3]
 80007ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007f4:	ee17 2a90 	vmov	r2, s15
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	601a      	str	r2, [r3, #0]
}
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	ecbd 8b02 	vpop	{d8}
 8000806:	bd80      	pop	{r7, pc}
 8000808:	24000000 	.word	0x24000000

0800080c <sin_lut>:
float sin_lut(int angle){
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	return(sin_lut_table[angle%360]);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4a0c      	ldr	r2, [pc, #48]	; (8000848 <sin_lut+0x3c>)
 8000818:	fb82 1203 	smull	r1, r2, r2, r3
 800081c:	441a      	add	r2, r3
 800081e:	1211      	asrs	r1, r2, #8
 8000820:	17da      	asrs	r2, r3, #31
 8000822:	1a8a      	subs	r2, r1, r2
 8000824:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8000828:	fb01 f202 	mul.w	r2, r1, r2
 800082c:	1a9a      	subs	r2, r3, r2
 800082e:	4907      	ldr	r1, [pc, #28]	; (800084c <sin_lut+0x40>)
 8000830:	0093      	lsls	r3, r2, #2
 8000832:	440b      	add	r3, r1
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	ee07 3a90 	vmov	s15, r3
}
 800083a:	eeb0 0a67 	vmov.f32	s0, s15
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	b60b60b7 	.word	0xb60b60b7
 800084c:	24000004 	.word	0x24000004

08000850 <cos_lut>:
float cos_lut(int angle){
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	return(sin_lut_table[(angle+90)%360]);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	335a      	adds	r3, #90	; 0x5a
 800085c:	4a0c      	ldr	r2, [pc, #48]	; (8000890 <cos_lut+0x40>)
 800085e:	fb82 1203 	smull	r1, r2, r2, r3
 8000862:	441a      	add	r2, r3
 8000864:	1211      	asrs	r1, r2, #8
 8000866:	17da      	asrs	r2, r3, #31
 8000868:	1a8a      	subs	r2, r1, r2
 800086a:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800086e:	fb01 f202 	mul.w	r2, r1, r2
 8000872:	1a9a      	subs	r2, r3, r2
 8000874:	4907      	ldr	r1, [pc, #28]	; (8000894 <cos_lut+0x44>)
 8000876:	0093      	lsls	r3, r2, #2
 8000878:	440b      	add	r3, r1
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	ee07 3a90 	vmov	s15, r3
}
 8000880:	eeb0 0a67 	vmov.f32	s0, s15
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	b60b60b7 	.word	0xb60b60b7
 8000894:	24000004 	.word	0x24000004

08000898 <update_foc_pi>:
static float last_speed_error;
static uint32_t last_tic=0;
static uint32_t last_tic_speed=0;
int max_speed_int = IQ_MAX/KI_SPEED;

void update_foc_pi(float *target_iq, float *target_id,float *cur_iq,float *cur_id,int *Vq,int *Vd){
 8000898:	b480      	push	{r7}
 800089a:	b087      	sub	sp, #28
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
 80008a4:	603b      	str	r3, [r7, #0]
	float errorq = *target_iq-*cur_iq;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	ed93 7a00 	vldr	s14, [r3]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	edd3 7a00 	vldr	s15, [r3]
 80008b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008b6:	edc7 7a05 	vstr	s15, [r7, #20]
	float errord = *target_id-*cur_id;
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	ed93 7a00 	vldr	s14, [r3]
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	edd3 7a00 	vldr	s15, [r3]
 80008c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008ca:	edc7 7a04 	vstr	s15, [r7, #16]
	interrorq += errorq/20000;
 80008ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80008d2:	eddf 6a40 	vldr	s13, [pc, #256]	; 80009d4 <update_foc_pi+0x13c>
 80008d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80008da:	4b3f      	ldr	r3, [pc, #252]	; (80009d8 <update_foc_pi+0x140>)
 80008dc:	edd3 7a00 	vldr	s15, [r3]
 80008e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008e4:	4b3c      	ldr	r3, [pc, #240]	; (80009d8 <update_foc_pi+0x140>)
 80008e6:	edc3 7a00 	vstr	s15, [r3]
	interrord += errord/20000;
 80008ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80008ee:	eddf 6a39 	vldr	s13, [pc, #228]	; 80009d4 <update_foc_pi+0x13c>
 80008f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80008f6:	4b39      	ldr	r3, [pc, #228]	; (80009dc <update_foc_pi+0x144>)
 80008f8:	edd3 7a00 	vldr	s15, [r3]
 80008fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000900:	4b36      	ldr	r3, [pc, #216]	; (80009dc <update_foc_pi+0x144>)
 8000902:	edc3 7a00 	vstr	s15, [r3]
	if(interrorq>150){
 8000906:	4b34      	ldr	r3, [pc, #208]	; (80009d8 <update_foc_pi+0x140>)
 8000908:	edd3 7a00 	vldr	s15, [r3]
 800090c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80009e0 <update_foc_pi+0x148>
 8000910:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000918:	dd03      	ble.n	8000922 <update_foc_pi+0x8a>
		interrorq=150;
 800091a:	4b2f      	ldr	r3, [pc, #188]	; (80009d8 <update_foc_pi+0x140>)
 800091c:	4a31      	ldr	r2, [pc, #196]	; (80009e4 <update_foc_pi+0x14c>)
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	e00c      	b.n	800093c <update_foc_pi+0xa4>
	}
	else if(interrorq<-150){
 8000922:	4b2d      	ldr	r3, [pc, #180]	; (80009d8 <update_foc_pi+0x140>)
 8000924:	edd3 7a00 	vldr	s15, [r3]
 8000928:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80009e8 <update_foc_pi+0x150>
 800092c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000934:	d502      	bpl.n	800093c <update_foc_pi+0xa4>
		interrorq=-150;
 8000936:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <update_foc_pi+0x140>)
 8000938:	4a2c      	ldr	r2, [pc, #176]	; (80009ec <update_foc_pi+0x154>)
 800093a:	601a      	str	r2, [r3, #0]
	}
	if(interrord>100){
 800093c:	4b27      	ldr	r3, [pc, #156]	; (80009dc <update_foc_pi+0x144>)
 800093e:	edd3 7a00 	vldr	s15, [r3]
 8000942:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80009f0 <update_foc_pi+0x158>
 8000946:	eef4 7ac7 	vcmpe.f32	s15, s14
 800094a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800094e:	dd03      	ble.n	8000958 <update_foc_pi+0xc0>
		interrord=100;
 8000950:	4b22      	ldr	r3, [pc, #136]	; (80009dc <update_foc_pi+0x144>)
 8000952:	4a28      	ldr	r2, [pc, #160]	; (80009f4 <update_foc_pi+0x15c>)
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	e00c      	b.n	8000972 <update_foc_pi+0xda>
	}
	else if(interrord<-100){
 8000958:	4b20      	ldr	r3, [pc, #128]	; (80009dc <update_foc_pi+0x144>)
 800095a:	edd3 7a00 	vldr	s15, [r3]
 800095e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80009f8 <update_foc_pi+0x160>
 8000962:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800096a:	d502      	bpl.n	8000972 <update_foc_pi+0xda>
		interrord=-100;
 800096c:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <update_foc_pi+0x144>)
 800096e:	4a23      	ldr	r2, [pc, #140]	; (80009fc <update_foc_pi+0x164>)
 8000970:	601a      	str	r2, [r3, #0]
	}
	//TODO: pwm saturates at 100% but drivers should not operate 100% so some protection must be added
	*Vq = (int)(interrorq*KI_FOC+errorq*KP_FOC);
 8000972:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <update_foc_pi+0x140>)
 8000974:	edd3 7a00 	vldr	s15, [r3]
 8000978:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800097c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000980:	edd7 7a05 	vldr	s15, [r7, #20]
 8000984:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8000988:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800098c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000994:	ee17 2a90 	vmov	r2, s15
 8000998:	6a3b      	ldr	r3, [r7, #32]
 800099a:	601a      	str	r2, [r3, #0]
	*Vd = (int)(interrord*KI_FOC+errord*KP_FOC);
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <update_foc_pi+0x144>)
 800099e:	edd3 7a00 	vldr	s15, [r3]
 80009a2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80009a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80009ae:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80009b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80009b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009be:	ee17 2a90 	vmov	r2, s15
 80009c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c4:	601a      	str	r2, [r3, #0]
}
 80009c6:	bf00      	nop
 80009c8:	371c      	adds	r7, #28
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	469c4000 	.word	0x469c4000
 80009d8:	240005d4 	.word	0x240005d4
 80009dc:	240005d8 	.word	0x240005d8
 80009e0:	43160000 	.word	0x43160000
 80009e4:	43160000 	.word	0x43160000
 80009e8:	c3160000 	.word	0xc3160000
 80009ec:	c3160000 	.word	0xc3160000
 80009f0:	42c80000 	.word	0x42c80000
 80009f4:	42c80000 	.word	0x42c80000
 80009f8:	c2c80000 	.word	0xc2c80000
 80009fc:	c2c80000 	.word	0xc2c80000

08000a00 <update_speed_pi>:
void update_speed_pi(float *target_speed, float *cur_speed,float *Iq){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
	float error_speed = *target_speed-*cur_speed;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	ed93 7a00 	vldr	s14, [r3]
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	edd3 7a00 	vldr	s15, [r3]
 8000a18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a1c:	edc7 7a05 	vstr	s15, [r7, #20]
	float output,speed_error_der;
	last_tic_speed = HAL_GetTick();
 8000a20:	f001 fe76 	bl	8002710 <HAL_GetTick>
 8000a24:	4602      	mov	r2, r0
 8000a26:	4b3e      	ldr	r3, [pc, #248]	; (8000b20 <update_speed_pi+0x120>)
 8000a28:	601a      	str	r2, [r3, #0]
	interrorspeed += error_speed/20000;//TODO: Should be 10000, not changing because doing report
 8000a2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a2e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8000b24 <update_speed_pi+0x124>
 8000a32:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000a36:	4b3c      	ldr	r3, [pc, #240]	; (8000b28 <update_speed_pi+0x128>)
 8000a38:	edd3 7a00 	vldr	s15, [r3]
 8000a3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a40:	4b39      	ldr	r3, [pc, #228]	; (8000b28 <update_speed_pi+0x128>)
 8000a42:	edc3 7a00 	vstr	s15, [r3]
	if(interrorspeed>max_speed_int){
 8000a46:	4b39      	ldr	r3, [pc, #228]	; (8000b2c <update_speed_pi+0x12c>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	ee07 3a90 	vmov	s15, r3
 8000a4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a52:	4b35      	ldr	r3, [pc, #212]	; (8000b28 <update_speed_pi+0x128>)
 8000a54:	edd3 7a00 	vldr	s15, [r3]
 8000a58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a60:	d509      	bpl.n	8000a76 <update_speed_pi+0x76>
		interrorspeed=max_speed_int;
 8000a62:	4b32      	ldr	r3, [pc, #200]	; (8000b2c <update_speed_pi+0x12c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	ee07 3a90 	vmov	s15, r3
 8000a6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a6e:	4b2e      	ldr	r3, [pc, #184]	; (8000b28 <update_speed_pi+0x128>)
 8000a70:	edc3 7a00 	vstr	s15, [r3]
 8000a74:	e018      	b.n	8000aa8 <update_speed_pi+0xa8>
	}
	else if(interrorspeed<-max_speed_int){
 8000a76:	4b2d      	ldr	r3, [pc, #180]	; (8000b2c <update_speed_pi+0x12c>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	425b      	negs	r3, r3
 8000a7c:	ee07 3a90 	vmov	s15, r3
 8000a80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a84:	4b28      	ldr	r3, [pc, #160]	; (8000b28 <update_speed_pi+0x128>)
 8000a86:	edd3 7a00 	vldr	s15, [r3]
 8000a8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a92:	dd09      	ble.n	8000aa8 <update_speed_pi+0xa8>
		interrorspeed=-max_speed_int;
 8000a94:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <update_speed_pi+0x12c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	425b      	negs	r3, r3
 8000a9a:	ee07 3a90 	vmov	s15, r3
 8000a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aa2:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <update_speed_pi+0x128>)
 8000aa4:	edc3 7a00 	vstr	s15, [r3]
	}
	output = (interrorspeed*KI_SPEED+error_speed*KP_SPEED);
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <update_speed_pi+0x128>)
 8000aaa:	edd3 7a00 	vldr	s15, [r3]
 8000aae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ab2:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8000b18 <update_speed_pi+0x118>
 8000ab6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000aba:	edd7 7a05 	vldr	s15, [r7, #20]
 8000abe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ac2:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8000b18 <update_speed_pi+0x118>
 8000ac6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000aca:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ace:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ad2:	edc7 7a04 	vstr	s15, [r7, #16]
	if(output>IQ_MAX){
 8000ad6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ada:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000ade:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae6:	dd03      	ble.n	8000af0 <update_speed_pi+0xf0>
		*Iq = IQ_MAX;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a11      	ldr	r2, [pc, #68]	; (8000b30 <update_speed_pi+0x130>)
 8000aec:	601a      	str	r2, [r3, #0]
			*Iq = -IQ_MAX;
	}
	else{
		*Iq = output;
	}
}
 8000aee:	e00f      	b.n	8000b10 <update_speed_pi+0x110>
	else if(output<-IQ_MAX){
 8000af0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000af4:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 8000af8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b00:	d503      	bpl.n	8000b0a <update_speed_pi+0x10a>
			*Iq = -IQ_MAX;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a0b      	ldr	r2, [pc, #44]	; (8000b34 <update_speed_pi+0x134>)
 8000b06:	601a      	str	r2, [r3, #0]
}
 8000b08:	e002      	b.n	8000b10 <update_speed_pi+0x110>
		*Iq = output;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	601a      	str	r2, [r3, #0]
}
 8000b10:	bf00      	nop
 8000b12:	3718      	adds	r7, #24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	9999999a 	.word	0x9999999a
 8000b1c:	3fb99999 	.word	0x3fb99999
 8000b20:	240005e0 	.word	0x240005e0
 8000b24:	469c4000 	.word	0x469c4000
 8000b28:	240005dc 	.word	0x240005dc
 8000b2c:	240005a4 	.word	0x240005a4
 8000b30:	41a00000 	.word	0x41a00000
 8000b34:	c1a00000 	.word	0xc1a00000

08000b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	f6ad 0d54 	subw	sp, sp, #2132	; 0x854
 8000b3e:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b40:	f001 fd64 	bl	800260c <HAL_Init>

  /* USER CODE BEGIN Init */
	int request_pos = 0xffff;
 8000b44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b48:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
	float data2angle = 360.0 / 1024;
 8000b4c:	4be6      	ldr	r3, [pc, #920]	; (8000ee8 <main+0x3b0>)
 8000b4e:	f507 6203 	add.w	r2, r7, #2096	; 0x830
 8000b52:	6013      	str	r3, [r2, #0]
	float angle = 0;
 8000b54:	f04f 0300 	mov.w	r3, #0
 8000b58:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 8000b5c:	6013      	str	r3, [r2, #0]
	int currentA;
	int currentC;
	int currentB;
	float Id;
	float Iq;
	float target_Iq = 15;
 8000b5e:	4be3      	ldr	r3, [pc, #908]	; (8000eec <main+0x3b4>)
 8000b60:	f207 72fc 	addw	r2, r7, #2044	; 0x7fc
 8000b64:	6013      	str	r3, [r2, #0]
	float target_Id = 0;
 8000b66:	f04f 0300 	mov.w	r3, #0
 8000b6a:	f507 62ff 	add.w	r2, r7, #2040	; 0x7f8
 8000b6e:	6013      	str	r3, [r2, #0]
	int Vd;
	int Vq;
	int foc_angle;
	int uart_counter = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
	int Va, Vb, Vc;
	int deciangle = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
	float last_angle = 0;
 8000b7c:	f04f 0300 	mov.w	r3, #0
 8000b80:	f507 6204 	add.w	r2, r7, #2112	; 0x840
 8000b84:	6013      	str	r3, [r2, #0]
	float running_angle_total = 0;
 8000b86:	f04f 0300 	mov.w	r3, #0
 8000b8a:	f607 023c 	addw	r2, r7, #2108	; 0x83c
 8000b8e:	6013      	str	r3, [r2, #0]
	float change_in_angle = 0;
 8000b90:	f04f 0300 	mov.w	r3, #0
 8000b94:	f607 0238 	addw	r2, r7, #2104	; 0x838
 8000b98:	6013      	str	r3, [r2, #0]
	float curr_speed = 0;
 8000b9a:	f04f 0300 	mov.w	r3, #0
 8000b9e:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8000ba2:	6013      	str	r3, [r2, #0]
	float target_speed = 300;
 8000ba4:	4bd2      	ldr	r3, [pc, #840]	; (8000ef0 <main+0x3b8>)
 8000ba6:	f207 72dc 	addw	r2, r7, #2012	; 0x7dc
 8000baa:	6013      	str	r3, [r2, #0]
	uint32_t last_speed_cal_time = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
	int speed_counter = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
	int nop = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f8c7 37d8 	str.w	r3, [r7, #2008]	; 0x7d8
	float change_in_angle_list[500]={0};
 8000bbe:	f107 0308 	add.w	r3, r7, #8
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000bc8:	461a      	mov	r2, r3
 8000bca:	2100      	movs	r1, #0
 8000bcc:	f00b fa75 	bl	800c0ba <memset>
	uint16_t raw_curr_data_a=0;
 8000bd0:	1dbb      	adds	r3, r7, #6
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	801a      	strh	r2, [r3, #0]
	uint16_t raw_curr_data_c=0;
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2200      	movs	r2, #0
 8000bda:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bdc:	f000 fa6c 	bl	80010b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be0:	f000 ffea 	bl	8001bb8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000be4:	f000 fb56 	bl	8001294 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000be8:	f000 fbcc 	bl	8001384 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000bec:	f000 fc2e 	bl	800144c <MX_ADC3_Init>
  MX_FDCAN1_Init();
 8000bf0:	f000 fc90 	bl	8001514 <MX_FDCAN1_Init>
  MX_I2C1_Init();
 8000bf4:	f000 fcf2 	bl	80015dc <MX_I2C1_Init>
  MX_SPI1_Init();
 8000bf8:	f000 fd30 	bl	800165c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000bfc:	f000 fd84 	bl	8001708 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000c00:	f000 fdd8 	bl	80017b4 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000c04:	f000 fe2c 	bl	8001860 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c08:	f000 feee 	bl	80019e8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000c0c:	f000 ff88 	bl	8001b20 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000c10:	f000 ff38 	bl	8001a84 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c14:	2100      	movs	r1, #0
 8000c16:	48b7      	ldr	r0, [pc, #732]	; (8000ef4 <main+0x3bc>)
 8000c18:	f007 fcbe 	bl	8008598 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	48b5      	ldr	r0, [pc, #724]	; (8000ef4 <main+0x3bc>)
 8000c20:	f008 fc78 	bl	8009514 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000c24:	2104      	movs	r1, #4
 8000c26:	48b3      	ldr	r0, [pc, #716]	; (8000ef4 <main+0x3bc>)
 8000c28:	f007 fcb6 	bl	8008598 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000c2c:	2104      	movs	r1, #4
 8000c2e:	48b1      	ldr	r0, [pc, #708]	; (8000ef4 <main+0x3bc>)
 8000c30:	f008 fc70 	bl	8009514 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000c34:	2108      	movs	r1, #8
 8000c36:	48af      	ldr	r0, [pc, #700]	; (8000ef4 <main+0x3bc>)
 8000c38:	f007 fcae 	bl	8008598 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000c3c:	2108      	movs	r1, #8
 8000c3e:	48ad      	ldr	r0, [pc, #692]	; (8000ef4 <main+0x3bc>)
 8000c40:	f008 fc68 	bl	8009514 <HAL_TIMEx_PWMN_Start>
	HAL_ADC_Start(&hadc1);
 8000c44:	48ac      	ldr	r0, [pc, #688]	; (8000ef8 <main+0x3c0>)
 8000c46:	f002 f909 	bl	8002e5c <HAL_ADC_Start>
	HAL_ADC_Start(&hadc2);
 8000c4a:	48ac      	ldr	r0, [pc, #688]	; (8000efc <main+0x3c4>)
 8000c4c:	f002 f906 	bl	8002e5c <HAL_ADC_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8000c50:	48ab      	ldr	r0, [pc, #684]	; (8000f00 <main+0x3c8>)
 8000c52:	f007 fc41 	bl	80084d8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000c56:	48ab      	ldr	r0, [pc, #684]	; (8000f04 <main+0x3cc>)
 8000c58:	f007 fc3e 	bl	80084d8 <HAL_TIM_Base_Start_IT>
	HAL_Delay(500);
 8000c5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c60:	f001 fd62 	bl	8002728 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		//find angle
		while (wait) {
 8000c64:	bf00      	nop
 8000c66:	4ba8      	ldr	r3, [pc, #672]	; (8000f08 <main+0x3d0>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d1fb      	bne.n	8000c66 <main+0x12e>
			//wait for next pwm cycle to start
		}
		wait = 1;
 8000c6e:	4ba6      	ldr	r3, [pc, #664]	; (8000f08 <main+0x3d0>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	601a      	str	r2, [r3, #0]
		position = position >> 2;
 8000c74:	4ba5      	ldr	r3, [pc, #660]	; (8000f0c <main+0x3d4>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	109b      	asrs	r3, r3, #2
 8000c7a:	4aa4      	ldr	r2, [pc, #656]	; (8000f0c <main+0x3d4>)
 8000c7c:	6013      	str	r3, [r2, #0]
		position = position & 0x3ff;
 8000c7e:	4ba3      	ldr	r3, [pc, #652]	; (8000f0c <main+0x3d4>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c86:	4aa1      	ldr	r2, [pc, #644]	; (8000f0c <main+0x3d4>)
 8000c88:	6013      	str	r3, [r2, #0]
		angle = (position * data2angle);
 8000c8a:	4ba0      	ldr	r3, [pc, #640]	; (8000f0c <main+0x3d4>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	ee07 3a90 	vmov	s15, r3
 8000c92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c96:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8000c9a:	ed93 7a00 	vldr	s14, [r3]
 8000c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ca2:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8000ca6:	edc3 7a00 	vstr	s15, [r3]
		deciangle = angle * 10;
 8000caa:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8000cae:	edd3 7a00 	vldr	s15, [r3]
 8000cb2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000cb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cbe:	ee17 3a90 	vmov	r3, s15
 8000cc2:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
		//find currents, this section could be optimized more but it will remove readability
		float voltage_a = RAW_TO_VOLTAGE_SCALAR * raw_curr_data_a-VOLTAGE_READING_OFFSET;
 8000cc6:	1dbb      	adds	r3, r7, #6
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	ee07 3a90 	vmov	s15, r3
 8000cce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000cd2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8000eb0 <main+0x378>
 8000cd6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000cda:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8000eb8 <main+0x380>
 8000cde:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000ce2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ce6:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8000cea:	edc3 7a00 	vstr	s15, [r3]
		float voltage_c = RAW_TO_VOLTAGE_SCALAR	* raw_curr_data_c-VOLTAGE_READING_OFFSET;
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	ee07 3a90 	vmov	s15, r3
 8000cf6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000cfa:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8000eb0 <main+0x378>
 8000cfe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d02:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8000eb8 <main+0x380>
 8000d06:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000d0a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d0e:	f607 031c 	addw	r3, r7, #2076	; 0x81c
 8000d12:	edc3 7a00 	vstr	s15, [r3]
		currentA = (voltage_a - CURRENT_READING_VOLTAGE_OFFSET)
 8000d16:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8000d1a:	edd3 7a00 	vldr	s15, [r3]
 8000d1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d22:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8000ec0 <main+0x388>
 8000d26:	ee37 7b46 	vsub.f64	d7, d7, d6
				* VOLTAGE_TO_CURRENT;
 8000d2a:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8000ec8 <main+0x390>
 8000d2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d32:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8000ed0 <main+0x398>
 8000d36:	ee27 7b06 	vmul.f64	d7, d7, d6
		currentA = (voltage_a - CURRENT_READING_VOLTAGE_OFFSET)
 8000d3a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000d3e:	ee17 3a90 	vmov	r3, s15
 8000d42:	f8c7 3818 	str.w	r3, [r7, #2072]	; 0x818
		currentC = (voltage_c - CURRENT_READING_VOLTAGE_OFFSET)
 8000d46:	f607 031c 	addw	r3, r7, #2076	; 0x81c
 8000d4a:	edd3 7a00 	vldr	s15, [r3]
 8000d4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d52:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8000ec0 <main+0x388>
 8000d56:	ee37 7b46 	vsub.f64	d7, d7, d6
				* VOLTAGE_TO_CURRENT;
 8000d5a:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8000ec8 <main+0x390>
 8000d5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d62:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8000ed0 <main+0x398>
 8000d66:	ee27 7b06 	vmul.f64	d7, d7, d6
		currentC = (voltage_c - CURRENT_READING_VOLTAGE_OFFSET)
 8000d6a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000d6e:	ee17 3a90 	vmov	r3, s15
 8000d72:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
		currentC=-currentC;//phase C current sense is backwards for layout purposes
 8000d76:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8000d7a:	425b      	negs	r3, r3
 8000d7c:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
		currentB = 0 - currentA - currentC;
 8000d80:	f8d7 3818 	ldr.w	r3, [r7, #2072]	; 0x818
 8000d84:	425a      	negs	r2, r3
 8000d86:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
		//request data for next loop
		HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t*) &request_pos,&position, 1);
 8000d90:	f607 0108 	addw	r1, r7, #2056	; 0x808
 8000d94:	2301      	movs	r3, #1
 8000d96:	4a5d      	ldr	r2, [pc, #372]	; (8000f0c <main+0x3d4>)
 8000d98:	485d      	ldr	r0, [pc, #372]	; (8000f10 <main+0x3d8>)
 8000d9a:	f006 fec1 	bl	8007b20 <HAL_SPI_TransmitReceive_IT>
		HAL_SPI_TransmitReceive_IT(&hspi1, (uint8_t*) &nop,
 8000d9e:	1dba      	adds	r2, r7, #6
 8000da0:	f507 61fb 	add.w	r1, r7, #2008	; 0x7d8
 8000da4:	2301      	movs	r3, #1
 8000da6:	485b      	ldr	r0, [pc, #364]	; (8000f14 <main+0x3dc>)
 8000da8:	f006 feba 	bl	8007b20 <HAL_SPI_TransmitReceive_IT>
				(uint8_t*) &raw_curr_data_a, 1);
		HAL_SPI_TransmitReceive_IT(&hspi3, (uint8_t*) &nop,
 8000dac:	1d3a      	adds	r2, r7, #4
 8000dae:	f507 61fb 	add.w	r1, r7, #2008	; 0x7d8
 8000db2:	2301      	movs	r3, #1
 8000db4:	4858      	ldr	r0, [pc, #352]	; (8000f18 <main+0x3e0>)
 8000db6:	f006 feb3 	bl	8007b20 <HAL_SPI_TransmitReceive_IT>
				(uint8_t*) &raw_curr_data_c, 1);
		//transform encoder angle to eletrical angle
		foc_angle = mech_to_electric_angle((int)angle);
 8000dba:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8000dbe:	edd3 7a00 	vldr	s15, [r3]
 8000dc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dc6:	ee17 0a90 	vmov	r0, s15
 8000dca:	f000 ffaf 	bl	8001d2c <mech_to_electric_angle>
 8000dce:	f8c7 080c 	str.w	r0, [r7, #2060]	; 0x80c
		//Cal speed with 500 wide boxcar avg
		change_in_angle = angle - last_angle;
 8000dd2:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8000dd6:	ed93 7a00 	vldr	s14, [r3]
 8000dda:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 8000dde:	edd3 7a00 	vldr	s15, [r3]
 8000de2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000de6:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8000dea:	edc3 7a00 	vstr	s15, [r3]
		if (change_in_angle < -180) {
 8000dee:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8000df2:	edd3 7a00 	vldr	s15, [r3]
 8000df6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8000f1c <main+0x3e4>
 8000dfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e02:	d50b      	bpl.n	8000e1c <main+0x2e4>
			change_in_angle = -360 - change_in_angle;
 8000e04:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8000f20 <main+0x3e8>
 8000e08:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8000e0c:	edd3 7a00 	vldr	s15, [r3]
 8000e10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e14:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8000e18:	edc3 7a00 	vstr	s15, [r3]
		}
		if (change_in_angle > 180) {
 8000e1c:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8000e20:	edd3 7a00 	vldr	s15, [r3]
 8000e24:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8000f24 <main+0x3ec>
 8000e28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e30:	dd0b      	ble.n	8000e4a <main+0x312>
			change_in_angle = 360.0 - change_in_angle;
 8000e32:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8000f28 <main+0x3f0>
 8000e36:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8000e3a:	edd3 7a00 	vldr	s15, [r3]
 8000e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e42:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8000e46:	edc3 7a00 	vstr	s15, [r3]
		}
		running_angle_total = running_angle_total + change_in_angle-change_in_angle_list[speed_counter];
 8000e4a:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 8000e4e:	ed93 7a00 	vldr	s14, [r3]
 8000e52:	f607 0338 	addw	r3, r7, #2104	; 0x838
 8000e56:	edd3 7a00 	vldr	s15, [r3]
 8000e5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e5e:	f107 0208 	add.w	r2, r7, #8
 8000e62:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	4413      	add	r3, r2
 8000e6a:	edd3 7a00 	vldr	s15, [r3]
 8000e6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e72:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 8000e76:	edc3 7a00 	vstr	s15, [r3]
		curr_speed = running_angle_total * RMP_SCALAR *0.025;
 8000e7a:	f607 033c 	addw	r3, r7, #2108	; 0x83c
 8000e7e:	edd3 7a00 	vldr	s15, [r3]
 8000e82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e86:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8000ed8 <main+0x3a0>
 8000e8a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e8e:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8000ee0 <main+0x3a8>
 8000e92:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e96:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e9a:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8000e9e:	edc3 7a00 	vstr	s15, [r3]
		change_in_angle_list[speed_counter]=change_in_angle;
 8000ea2:	f107 0208 	add.w	r2, r7, #8
 8000ea6:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8000eaa:	e03f      	b.n	8000f2c <main+0x3f4>
 8000eac:	f3af 8000 	nop.w
 8000eb0:	bc6a7efa 	.word	0xbc6a7efa
 8000eb4:	3f389374 	.word	0x3f389374
 8000eb8:	bc6a7efa 	.word	0xbc6a7efa
 8000ebc:	40289374 	.word	0x40289374
 8000ec0:	c28f5c29 	.word	0xc28f5c29
 8000ec4:	3ffa28f5 	.word	0x3ffa28f5
 8000ec8:	e147ae14 	.word	0xe147ae14
 8000ecc:	4052f07a 	.word	0x4052f07a
 8000ed0:	00000000 	.word	0x00000000
 8000ed4:	408f4000 	.word	0x408f4000
 8000ed8:	df3b645a 	.word	0xdf3b645a
 8000edc:	4064d54f 	.word	0x4064d54f
 8000ee0:	9999999a 	.word	0x9999999a
 8000ee4:	3f999999 	.word	0x3f999999
 8000ee8:	3eb40000 	.word	0x3eb40000
 8000eec:	41700000 	.word	0x41700000
 8000ef0:	43960000 	.word	0x43960000
 8000ef4:	240009e4 	.word	0x240009e4
 8000ef8:	240007f0 	.word	0x240007f0
 8000efc:	24000678 	.word	0x24000678
 8000f00:	24000aac 	.word	0x24000aac
 8000f04:	24000728 	.word	0x24000728
 8000f08:	240005e8 	.word	0x240005e8
 8000f0c:	240005e4 	.word	0x240005e4
 8000f10:	240005f0 	.word	0x240005f0
 8000f14:	24000a24 	.word	0x24000a24
 8000f18:	24000768 	.word	0x24000768
 8000f1c:	c3340000 	.word	0xc3340000
 8000f20:	c3b40000 	.word	0xc3b40000
 8000f24:	43340000 	.word	0x43340000
 8000f28:	43b40000 	.word	0x43b40000
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4413      	add	r3, r2
 8000f30:	f607 0238 	addw	r2, r7, #2104	; 0x838
 8000f34:	6812      	ldr	r2, [r2, #0]
 8000f36:	601a      	str	r2, [r3, #0]
		last_angle = angle;
 8000f38:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f507 6204 	add.w	r2, r7, #2112	; 0x840
 8000f42:	6013      	str	r3, [r2, #0]
		uart_counter++;
 8000f44:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8000f48:	3301      	adds	r3, #1
 8000f4a:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
		speed_counter++;
 8000f4e:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8000f52:	3301      	adds	r3, #1
 8000f54:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
		if (speed_counter > 500) {//running average of 500 samples
 8000f58:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8000f5c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f60:	dd02      	ble.n	8000f68 <main+0x430>
			speed_counter = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
		}
		//FOC and PI loop update
		parkclark(currentA, currentB, currentC, foc_angle, &Iq, &Id);
 8000f68:	f607 0304 	addw	r3, r7, #2052	; 0x804
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8000f78:	f8d7 2814 	ldr.w	r2, [r7, #2068]	; 0x814
 8000f7c:	f8d7 1810 	ldr.w	r1, [r7, #2064]	; 0x810
 8000f80:	f8d7 0818 	ldr.w	r0, [r7, #2072]	; 0x818
 8000f84:	f7ff fb28 	bl	80005d8 <parkclark>
		update_speed_pi(&target_speed, &curr_speed, &target_Iq);
 8000f88:	f207 72fc 	addw	r2, r7, #2044	; 0x7fc
 8000f8c:	f507 61fc 	add.w	r1, r7, #2016	; 0x7e0
 8000f90:	f207 73dc 	addw	r3, r7, #2012	; 0x7dc
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fd33 	bl	8000a00 <update_speed_pi>
		update_foc_pi(&target_Iq, &target_Id, &Iq, &Id, &Vq, &Vd);
 8000f9a:	f607 0404 	addw	r4, r7, #2052	; 0x804
 8000f9e:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 8000fa2:	f507 61ff 	add.w	r1, r7, #2040	; 0x7f8
 8000fa6:	f207 70fc 	addw	r0, r7, #2044	; 0x7fc
 8000faa:	f207 73f4 	addw	r3, r7, #2036	; 0x7f4
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	4623      	mov	r3, r4
 8000fb8:	f7ff fc6e 	bl	8000898 <update_foc_pi>
		if (uart_counter > 200000) {
 8000fbc:	f8d7 3844 	ldr.w	r3, [r7, #2116]	; 0x844
 8000fc0:	4a3c      	ldr	r2, [pc, #240]	; (80010b4 <main+0x57c>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	dd02      	ble.n	8000fcc <main+0x494>
			uart_counter = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
		}
		//Cal PWMs
		inv_parkclark(&Va, &Vb, &Vc, foc_angle, Vq, Vd);
 8000fcc:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	; 0x7f0
 8000fd0:	f8d7 27f4 	ldr.w	r2, [r7, #2036]	; 0x7f4
 8000fd4:	f207 74e4 	addw	r4, r7, #2020	; 0x7e4
 8000fd8:	f507 61fd 	add.w	r1, r7, #2024	; 0x7e8
 8000fdc:	f207 70ec 	addw	r0, r7, #2028	; 0x7ec
 8000fe0:	9201      	str	r2, [sp, #4]
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8000fe8:	4622      	mov	r2, r4
 8000fea:	f7ff fb87 	bl	80006fc <inv_parkclark>
		if (Va <= Vb && Va <= Vc) {
 8000fee:	f8d7 27ec 	ldr.w	r2, [r7, #2028]	; 0x7ec
 8000ff2:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	dc17      	bgt.n	800102a <main+0x4f2>
 8000ffa:	f8d7 27ec 	ldr.w	r2, [r7, #2028]	; 0x7ec
 8000ffe:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 8001002:	429a      	cmp	r2, r3
 8001004:	dc11      	bgt.n	800102a <main+0x4f2>
			Vb = Vb - Va;
 8001006:	f8d7 27e8 	ldr.w	r2, [r7, #2024]	; 0x7e8
 800100a:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	f8c7 37e8 	str.w	r3, [r7, #2024]	; 0x7e8
			Vc = Vc - Va;
 8001014:	f8d7 27e4 	ldr.w	r2, [r7, #2020]	; 0x7e4
 8001018:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
			Va = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
 8001028:	e03a      	b.n	80010a0 <main+0x568>
		} else if (Vb <= Va && Vb <= Vc) {
 800102a:	f8d7 27e8 	ldr.w	r2, [r7, #2024]	; 0x7e8
 800102e:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 8001032:	429a      	cmp	r2, r3
 8001034:	dc17      	bgt.n	8001066 <main+0x52e>
 8001036:	f8d7 27e8 	ldr.w	r2, [r7, #2024]	; 0x7e8
 800103a:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 800103e:	429a      	cmp	r2, r3
 8001040:	dc11      	bgt.n	8001066 <main+0x52e>
			Va = Va - Vb;
 8001042:	f8d7 27ec 	ldr.w	r2, [r7, #2028]	; 0x7ec
 8001046:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
			Vc = Vc - Vb;
 8001050:	f8d7 27e4 	ldr.w	r2, [r7, #2020]	; 0x7e4
 8001054:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
			Vb = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	f8c7 37e8 	str.w	r3, [r7, #2024]	; 0x7e8
 8001064:	e01c      	b.n	80010a0 <main+0x568>
		} else if (Vc <= Vb && Vc <= Va) {
 8001066:	f8d7 27e4 	ldr.w	r2, [r7, #2020]	; 0x7e4
 800106a:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	; 0x7e8
 800106e:	429a      	cmp	r2, r3
 8001070:	dc16      	bgt.n	80010a0 <main+0x568>
 8001072:	f8d7 27e4 	ldr.w	r2, [r7, #2020]	; 0x7e4
 8001076:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 800107a:	429a      	cmp	r2, r3
 800107c:	dc10      	bgt.n	80010a0 <main+0x568>
			Va = Va - Vc;
 800107e:	f8d7 27ec 	ldr.w	r2, [r7, #2028]	; 0x7ec
 8001082:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
			Vb = Vb - Vc;
 800108c:	f8d7 27e8 	ldr.w	r2, [r7, #2024]	; 0x7e8
 8001090:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	; 0x7e4
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	f8c7 37e8 	str.w	r3, [r7, #2024]	; 0x7e8
			Vc = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
		}
		//Impose PWMs
		set_pmw(Va, Vb, Vc);
 80010a0:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	; 0x7ec
 80010a4:	f8d7 17e8 	ldr.w	r1, [r7, #2024]	; 0x7e8
 80010a8:	f8d7 27e4 	ldr.w	r2, [r7, #2020]	; 0x7e4
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 fe21 	bl	8001cf4 <set_pmw>
	while (1) {
 80010b2:	e5d7      	b.n	8000c64 <main+0x12c>
 80010b4:	00030d40 	.word	0x00030d40

080010b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b0cc      	sub	sp, #304	; 0x130
 80010bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010be:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80010c2:	224c      	movs	r2, #76	; 0x4c
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f00a fff7 	bl	800c0ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80010d0:	2220      	movs	r2, #32
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f00a fff0 	bl	800c0ba <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010da:	f107 0308 	add.w	r3, r7, #8
 80010de:	4618      	mov	r0, r3
 80010e0:	23bc      	movs	r3, #188	; 0xbc
 80010e2:	461a      	mov	r2, r3
 80010e4:	2100      	movs	r1, #0
 80010e6:	f00a ffe8 	bl	800c0ba <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80010ea:	2002      	movs	r0, #2
 80010ec:	f003 fe32 	bl	8004d54 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	4b63      	ldr	r3, [pc, #396]	; (8001284 <SystemClock_Config+0x1cc>)
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	4a62      	ldr	r2, [pc, #392]	; (8001284 <SystemClock_Config+0x1cc>)
 80010fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001100:	6193      	str	r3, [r2, #24]
 8001102:	4b60      	ldr	r3, [pc, #384]	; (8001284 <SystemClock_Config+0x1cc>)
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	4b5e      	ldr	r3, [pc, #376]	; (8001288 <SystemClock_Config+0x1d0>)
 8001110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001112:	4a5d      	ldr	r2, [pc, #372]	; (8001288 <SystemClock_Config+0x1d0>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	62d3      	str	r3, [r2, #44]	; 0x2c
 800111a:	4b5b      	ldr	r3, [pc, #364]	; (8001288 <SystemClock_Config+0x1d0>)
 800111c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111e:	f003 0201 	and.w	r2, r3, #1
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800112a:	bf00      	nop
 800112c:	4b55      	ldr	r3, [pc, #340]	; (8001284 <SystemClock_Config+0x1cc>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001134:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001138:	d1f8      	bne.n	800112c <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800113a:	4b54      	ldr	r3, [pc, #336]	; (800128c <SystemClock_Config+0x1d4>)
 800113c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113e:	f023 0303 	bic.w	r3, r3, #3
 8001142:	4a52      	ldr	r2, [pc, #328]	; (800128c <SystemClock_Config+0x1d4>)
 8001144:	f043 0302 	orr.w	r3, r3, #2
 8001148:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800114a:	2301      	movs	r3, #1
 800114c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001150:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001154:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001158:	2302      	movs	r3, #2
 800115a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800115e:	2302      	movs	r3, #2
 8001160:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001164:	2302      	movs	r3, #2
 8001166:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 96;
 800116a:	2360      	movs	r3, #96	; 0x60
 800116c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001170:	2302      	movs	r3, #2
 8001172:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001176:	2302      	movs	r3, #2
 8001178:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800117c:	2302      	movs	r3, #2
 800117e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001182:	230c      	movs	r3, #12
 8001184:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001188:	2300      	movs	r3, #0
 800118a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001194:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001198:	4618      	mov	r0, r3
 800119a:	f003 fe13 	bl	8004dc4 <HAL_RCC_OscConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80011a4:	f000 fde0 	bl	8001d68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a8:	233f      	movs	r3, #63	; 0x3f
 80011aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ae:	2303      	movs	r3, #3
 80011b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80011ba:	2308      	movs	r3, #8
 80011bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80011c0:	2340      	movs	r3, #64	; 0x40
 80011c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80011c6:	2340      	movs	r3, #64	; 0x40
 80011c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80011cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80011d4:	2340      	movs	r3, #64	; 0x40
 80011d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011da:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011de:	2104      	movs	r1, #4
 80011e0:	4618      	mov	r0, r3
 80011e2:	f004 f9a7 	bl	8005534 <HAL_RCC_ClockConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <SystemClock_Config+0x138>
  {
    Error_Handler();
 80011ec:	f000 fdbc 	bl	8001d68 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_USART1
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	4a26      	ldr	r2, [pc, #152]	; (8001290 <SystemClock_Config+0x1d8>)
 80011f6:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_ADC
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80011f8:	f107 0308 	add.w	r3, r7, #8
 80011fc:	2202      	movs	r2, #2
 80011fe:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 15;
 8001200:	f107 0308 	add.w	r3, r7, #8
 8001204:	220f      	movs	r2, #15
 8001206:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 8001208:	f107 0308 	add.w	r3, r7, #8
 800120c:	2201      	movs	r2, #1
 800120e:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	2202      	movs	r2, #2
 8001216:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001218:	f107 0308 	add.w	r3, r7, #8
 800121c:	2202      	movs	r2, #2
 800121e:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001220:	f107 0308 	add.w	r3, r7, #8
 8001224:	22c0      	movs	r2, #192	; 0xc0
 8001226:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001228:	f107 0308 	add.w	r3, r7, #8
 800122c:	2220      	movs	r2, #32
 800122e:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001230:	f107 0308 	add.w	r3, r7, #8
 8001234:	2200      	movs	r2, #0
 8001236:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001238:	f107 0308 	add.w	r3, r7, #8
 800123c:	2200      	movs	r2, #0
 800123e:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001240:	f107 0308 	add.w	r3, r7, #8
 8001244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001248:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800124a:	f107 0308 	add.w	r3, r7, #8
 800124e:	2200      	movs	r2, #0
 8001250:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001252:	f107 0308 	add.w	r3, r7, #8
 8001256:	2200      	movs	r2, #0
 8001258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800125c:	f107 0308 	add.w	r3, r7, #8
 8001260:	2200      	movs	r2, #0
 8001262:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001266:	f107 0308 	add.w	r3, r7, #8
 800126a:	4618      	mov	r0, r3
 800126c:	f004 fcc0 	bl	8005bf0 <HAL_RCCEx_PeriphCLKConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <SystemClock_Config+0x1c2>
  {
    Error_Handler();
 8001276:	f000 fd77 	bl	8001d68 <Error_Handler>
  }
}
 800127a:	bf00      	nop
 800127c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	58024800 	.word	0x58024800
 8001288:	58000400 	.word	0x58000400
 800128c:	58024400 	.word	0x58024400
 8001290:	00089009 	.word	0x00089009

08001294 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08a      	sub	sp, #40	; 0x28
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800129a:	f107 031c 	add.w	r3, r7, #28
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012a6:	463b      	mov	r3, r7
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
 80012b4:	615a      	str	r2, [r3, #20]
 80012b6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80012b8:	4b2e      	ldr	r3, [pc, #184]	; (8001374 <MX_ADC1_Init+0xe0>)
 80012ba:	4a2f      	ldr	r2, [pc, #188]	; (8001378 <MX_ADC1_Init+0xe4>)
 80012bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80012be:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <MX_ADC1_Init+0xe0>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80012c4:	4b2b      	ldr	r3, [pc, #172]	; (8001374 <MX_ADC1_Init+0xe0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012ca:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <MX_ADC1_Init+0xe0>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012d0:	4b28      	ldr	r3, [pc, #160]	; (8001374 <MX_ADC1_Init+0xe0>)
 80012d2:	2204      	movs	r2, #4
 80012d4:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012d6:	4b27      	ldr	r3, [pc, #156]	; (8001374 <MX_ADC1_Init+0xe0>)
 80012d8:	2200      	movs	r2, #0
 80012da:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012dc:	4b25      	ldr	r3, [pc, #148]	; (8001374 <MX_ADC1_Init+0xe0>)
 80012de:	2200      	movs	r2, #0
 80012e0:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80012e2:	4b24      	ldr	r3, [pc, #144]	; (8001374 <MX_ADC1_Init+0xe0>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012e8:	4b22      	ldr	r3, [pc, #136]	; (8001374 <MX_ADC1_Init+0xe0>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012ee:	4b21      	ldr	r3, [pc, #132]	; (8001374 <MX_ADC1_Init+0xe0>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012f4:	4b1f      	ldr	r3, [pc, #124]	; (8001374 <MX_ADC1_Init+0xe0>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80012fa:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <MX_ADC1_Init+0xe0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001300:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <MX_ADC1_Init+0xe0>)
 8001302:	2200      	movs	r2, #0
 8001304:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001306:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <MX_ADC1_Init+0xe0>)
 8001308:	2200      	movs	r2, #0
 800130a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <MX_ADC1_Init+0xe0>)
 800130e:	2200      	movs	r2, #0
 8001310:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001314:	4817      	ldr	r0, [pc, #92]	; (8001374 <MX_ADC1_Init+0xe0>)
 8001316:	f001 fc01 	bl	8002b1c <HAL_ADC_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001320:	f000 fd22 	bl	8001d68 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	4619      	mov	r1, r3
 800132e:	4811      	ldr	r0, [pc, #68]	; (8001374 <MX_ADC1_Init+0xe0>)
 8001330:	f002 fb1c 	bl	800396c <HAL_ADCEx_MultiModeConfigChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800133a:	f000 fd15 	bl	8001d68 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800133e:	4b0f      	ldr	r3, [pc, #60]	; (800137c <MX_ADC1_Init+0xe8>)
 8001340:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001342:	2306      	movs	r3, #6
 8001344:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001346:	2301      	movs	r3, #1
 8001348:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800134a:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <MX_ADC1_Init+0xec>)
 800134c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800134e:	2304      	movs	r3, #4
 8001350:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001356:	463b      	mov	r3, r7
 8001358:	4619      	mov	r1, r3
 800135a:	4806      	ldr	r0, [pc, #24]	; (8001374 <MX_ADC1_Init+0xe0>)
 800135c:	f001 fe48 	bl	8002ff0 <HAL_ADC_ConfigChannel>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8001366:	f000 fcff 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	3728      	adds	r7, #40	; 0x28
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	240007f0 	.word	0x240007f0
 8001378:	40022000 	.word	0x40022000
 800137c:	14f00020 	.word	0x14f00020
 8001380:	47ff0000 	.word	0x47ff0000

08001384 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
 8001398:	615a      	str	r2, [r3, #20]
 800139a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 800139c:	4b27      	ldr	r3, [pc, #156]	; (800143c <MX_ADC2_Init+0xb8>)
 800139e:	4a28      	ldr	r2, [pc, #160]	; (8001440 <MX_ADC2_Init+0xbc>)
 80013a0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013a2:	4b26      	ldr	r3, [pc, #152]	; (800143c <MX_ADC2_Init+0xb8>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80013a8:	4b24      	ldr	r3, [pc, #144]	; (800143c <MX_ADC2_Init+0xb8>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013ae:	4b23      	ldr	r3, [pc, #140]	; (800143c <MX_ADC2_Init+0xb8>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013b4:	4b21      	ldr	r3, [pc, #132]	; (800143c <MX_ADC2_Init+0xb8>)
 80013b6:	2204      	movs	r2, #4
 80013b8:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80013ba:	4b20      	ldr	r3, [pc, #128]	; (800143c <MX_ADC2_Init+0xb8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80013c0:	4b1e      	ldr	r3, [pc, #120]	; (800143c <MX_ADC2_Init+0xb8>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80013c6:	4b1d      	ldr	r3, [pc, #116]	; (800143c <MX_ADC2_Init+0xb8>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <MX_ADC2_Init+0xb8>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013d2:	4b1a      	ldr	r3, [pc, #104]	; (800143c <MX_ADC2_Init+0xb8>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013d8:	4b18      	ldr	r3, [pc, #96]	; (800143c <MX_ADC2_Init+0xb8>)
 80013da:	2200      	movs	r2, #0
 80013dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80013de:	4b17      	ldr	r3, [pc, #92]	; (800143c <MX_ADC2_Init+0xb8>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013e4:	4b15      	ldr	r3, [pc, #84]	; (800143c <MX_ADC2_Init+0xb8>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80013ea:	4b14      	ldr	r3, [pc, #80]	; (800143c <MX_ADC2_Init+0xb8>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <MX_ADC2_Init+0xb8>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80013f8:	4810      	ldr	r0, [pc, #64]	; (800143c <MX_ADC2_Init+0xb8>)
 80013fa:	f001 fb8f 	bl	8002b1c <HAL_ADC_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8001404:	f000 fcb0 	bl	8001d68 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001408:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_ADC2_Init+0xc0>)
 800140a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800140c:	2306      	movs	r3, #6
 800140e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <MX_ADC2_Init+0xc4>)
 8001416:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001418:	2304      	movs	r3, #4
 800141a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	4619      	mov	r1, r3
 8001424:	4805      	ldr	r0, [pc, #20]	; (800143c <MX_ADC2_Init+0xb8>)
 8001426:	f001 fde3 	bl	8002ff0 <HAL_ADC_ConfigChannel>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8001430:	f000 fc9a 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	3720      	adds	r7, #32
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	24000678 	.word	0x24000678
 8001440:	40022100 	.word	0x40022100
 8001444:	10c00010 	.word	0x10c00010
 8001448:	47ff0000 	.word	0x47ff0000

0800144c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
 8001460:	615a      	str	r2, [r3, #20]
 8001462:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 8001464:	4b27      	ldr	r3, [pc, #156]	; (8001504 <MX_ADC3_Init+0xb8>)
 8001466:	4a28      	ldr	r2, [pc, #160]	; (8001508 <MX_ADC3_Init+0xbc>)
 8001468:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800146a:	4b26      	ldr	r3, [pc, #152]	; (8001504 <MX_ADC3_Init+0xb8>)
 800146c:	2200      	movs	r2, #0
 800146e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8001470:	4b24      	ldr	r3, [pc, #144]	; (8001504 <MX_ADC3_Init+0xb8>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001476:	4b23      	ldr	r3, [pc, #140]	; (8001504 <MX_ADC3_Init+0xb8>)
 8001478:	2200      	movs	r2, #0
 800147a:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800147c:	4b21      	ldr	r3, [pc, #132]	; (8001504 <MX_ADC3_Init+0xb8>)
 800147e:	2204      	movs	r2, #4
 8001480:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001482:	4b20      	ldr	r3, [pc, #128]	; (8001504 <MX_ADC3_Init+0xb8>)
 8001484:	2200      	movs	r2, #0
 8001486:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001488:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <MX_ADC3_Init+0xb8>)
 800148a:	2200      	movs	r2, #0
 800148c:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 800148e:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <MX_ADC3_Init+0xb8>)
 8001490:	2201      	movs	r2, #1
 8001492:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <MX_ADC3_Init+0xb8>)
 8001496:	2200      	movs	r2, #0
 8001498:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <MX_ADC3_Init+0xb8>)
 800149c:	2200      	movs	r2, #0
 800149e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <MX_ADC3_Init+0xb8>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80014a6:	4b17      	ldr	r3, [pc, #92]	; (8001504 <MX_ADC3_Init+0xb8>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <MX_ADC3_Init+0xb8>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80014b2:	4b14      	ldr	r3, [pc, #80]	; (8001504 <MX_ADC3_Init+0xb8>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <MX_ADC3_Init+0xb8>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80014c0:	4810      	ldr	r0, [pc, #64]	; (8001504 <MX_ADC3_Init+0xb8>)
 80014c2:	f001 fb2b 	bl	8002b1c <HAL_ADC_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 80014cc:	f000 fc4c 	bl	8001d68 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014d0:	4b0e      	ldr	r3, [pc, #56]	; (800150c <MX_ADC3_Init+0xc0>)
 80014d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014d4:	2306      	movs	r3, #6
 80014d6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80014d8:	2301      	movs	r3, #1
 80014da:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_ADC3_Init+0xc4>)
 80014de:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014e0:	2304      	movs	r3, #4
 80014e2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	4619      	mov	r1, r3
 80014ec:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_ADC3_Init+0xb8>)
 80014ee:	f001 fd7f 	bl	8002ff0 <HAL_ADC_ConfigChannel>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80014f8:	f000 fc36 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	3720      	adds	r7, #32
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	24000854 	.word	0x24000854
 8001508:	58026000 	.word	0x58026000
 800150c:	04300002 	.word	0x04300002
 8001510:	47ff0000 	.word	0x47ff0000

08001514 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001518:	4b2e      	ldr	r3, [pc, #184]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 800151a:	4a2f      	ldr	r2, [pc, #188]	; (80015d8 <MX_FDCAN1_Init+0xc4>)
 800151c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800151e:	4b2d      	ldr	r3, [pc, #180]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001524:	4b2b      	ldr	r3, [pc, #172]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800152a:	4b2a      	ldr	r3, [pc, #168]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 800152c:	2200      	movs	r2, #0
 800152e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001530:	4b28      	ldr	r3, [pc, #160]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 8001532:	2200      	movs	r2, #0
 8001534:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001536:	4b27      	ldr	r3, [pc, #156]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 8001538:	2200      	movs	r2, #0
 800153a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800153c:	4b25      	ldr	r3, [pc, #148]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 800153e:	2201      	movs	r2, #1
 8001540:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001542:	4b24      	ldr	r3, [pc, #144]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 8001544:	2201      	movs	r2, #1
 8001546:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001548:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 800154a:	2202      	movs	r2, #2
 800154c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800154e:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 8001550:	2202      	movs	r2, #2
 8001552:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001554:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 8001556:	2201      	movs	r2, #1
 8001558:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800155a:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 800155c:	2201      	movs	r2, #1
 800155e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001560:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 8001562:	2201      	movs	r2, #1
 8001564:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001566:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 8001568:	2201      	movs	r2, #1
 800156a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 800156e:	2200      	movs	r2, #0
 8001570:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8001572:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 8001574:	2200      	movs	r2, #0
 8001576:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001578:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 800157a:	2200      	movs	r2, #0
 800157c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 8001580:	2200      	movs	r2, #0
 8001582:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001584:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 8001586:	2204      	movs	r2, #4
 8001588:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800158a:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 800158c:	2200      	movs	r2, #0
 800158e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001590:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 8001592:	2204      	movs	r2, #4
 8001594:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 8001598:	2200      	movs	r2, #0
 800159a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800159c:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 800159e:	2204      	movs	r2, #4
 80015a0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80015a8:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80015b4:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 80015bc:	2204      	movs	r2, #4
 80015be:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80015c0:	4804      	ldr	r0, [pc, #16]	; (80015d4 <MX_FDCAN1_Init+0xc0>)
 80015c2:	f002 fd53 	bl	800406c <HAL_FDCAN_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80015cc:	f000 fbcc 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	24000944 	.word	0x24000944
 80015d8:	4000a000 	.word	0x4000a000

080015dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <MX_I2C1_Init+0x74>)
 80015e2:	4a1c      	ldr	r2, [pc, #112]	; (8001654 <MX_I2C1_Init+0x78>)
 80015e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80015e6:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <MX_I2C1_Init+0x74>)
 80015e8:	4a1b      	ldr	r2, [pc, #108]	; (8001658 <MX_I2C1_Init+0x7c>)
 80015ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015ec:	4b18      	ldr	r3, [pc, #96]	; (8001650 <MX_I2C1_Init+0x74>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <MX_I2C1_Init+0x74>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f8:	4b15      	ldr	r3, [pc, #84]	; (8001650 <MX_I2C1_Init+0x74>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <MX_I2C1_Init+0x74>)
 8001600:	2200      	movs	r2, #0
 8001602:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_I2C1_Init+0x74>)
 8001606:	2200      	movs	r2, #0
 8001608:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_I2C1_Init+0x74>)
 800160c:	2200      	movs	r2, #0
 800160e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_I2C1_Init+0x74>)
 8001612:	2200      	movs	r2, #0
 8001614:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001616:	480e      	ldr	r0, [pc, #56]	; (8001650 <MX_I2C1_Init+0x74>)
 8001618:	f003 fa74 	bl	8004b04 <HAL_I2C_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001622:	f000 fba1 	bl	8001d68 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001626:	2100      	movs	r1, #0
 8001628:	4809      	ldr	r0, [pc, #36]	; (8001650 <MX_I2C1_Init+0x74>)
 800162a:	f003 fafb 	bl	8004c24 <HAL_I2CEx_ConfigAnalogFilter>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001634:	f000 fb98 	bl	8001d68 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001638:	2100      	movs	r1, #0
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_I2C1_Init+0x74>)
 800163c:	f003 fb3d 	bl	8004cba <HAL_I2CEx_ConfigDigitalFilter>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001646:	f000 fb8f 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	240006dc 	.word	0x240006dc
 8001654:	40005400 	.word	0x40005400
 8001658:	307075b1 	.word	0x307075b1

0800165c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001660:	4b27      	ldr	r3, [pc, #156]	; (8001700 <MX_SPI1_Init+0xa4>)
 8001662:	4a28      	ldr	r2, [pc, #160]	; (8001704 <MX_SPI1_Init+0xa8>)
 8001664:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001666:	4b26      	ldr	r3, [pc, #152]	; (8001700 <MX_SPI1_Init+0xa4>)
 8001668:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800166c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800166e:	4b24      	ldr	r3, [pc, #144]	; (8001700 <MX_SPI1_Init+0xa4>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001674:	4b22      	ldr	r3, [pc, #136]	; (8001700 <MX_SPI1_Init+0xa4>)
 8001676:	220f      	movs	r2, #15
 8001678:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800167a:	4b21      	ldr	r3, [pc, #132]	; (8001700 <MX_SPI1_Init+0xa4>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001680:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <MX_SPI1_Init+0xa4>)
 8001682:	2200      	movs	r2, #0
 8001684:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001686:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <MX_SPI1_Init+0xa4>)
 8001688:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800168c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800168e:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <MX_SPI1_Init+0xa4>)
 8001690:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001694:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001696:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <MX_SPI1_Init+0xa4>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800169c:	4b18      	ldr	r3, [pc, #96]	; (8001700 <MX_SPI1_Init+0xa4>)
 800169e:	2200      	movs	r2, #0
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <MX_SPI1_Init+0xa4>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <MX_SPI1_Init+0xa4>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80016ae:	4b14      	ldr	r3, [pc, #80]	; (8001700 <MX_SPI1_Init+0xa4>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <MX_SPI1_Init+0xa4>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_SPI1_Init+0xa4>)
 80016bc:	2200      	movs	r2, #0
 80016be:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <MX_SPI1_Init+0xa4>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <MX_SPI1_Init+0xa4>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_SPI1_Init+0xa4>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <MX_SPI1_Init+0xa4>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_SPI1_Init+0xa4>)
 80016da:	2200      	movs	r2, #0
 80016dc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80016de:	4b08      	ldr	r3, [pc, #32]	; (8001700 <MX_SPI1_Init+0xa4>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_SPI1_Init+0xa4>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016ea:	4805      	ldr	r0, [pc, #20]	; (8001700 <MX_SPI1_Init+0xa4>)
 80016ec:	f006 f920 	bl	8007930 <HAL_SPI_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80016f6:	f000 fb37 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	24000a24 	.word	0x24000a24
 8001704:	40013000 	.word	0x40013000

08001708 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800170c:	4b27      	ldr	r3, [pc, #156]	; (80017ac <MX_SPI2_Init+0xa4>)
 800170e:	4a28      	ldr	r2, [pc, #160]	; (80017b0 <MX_SPI2_Init+0xa8>)
 8001710:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001712:	4b26      	ldr	r3, [pc, #152]	; (80017ac <MX_SPI2_Init+0xa4>)
 8001714:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001718:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800171a:	4b24      	ldr	r3, [pc, #144]	; (80017ac <MX_SPI2_Init+0xa4>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001720:	4b22      	ldr	r3, [pc, #136]	; (80017ac <MX_SPI2_Init+0xa4>)
 8001722:	220f      	movs	r2, #15
 8001724:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001726:	4b21      	ldr	r3, [pc, #132]	; (80017ac <MX_SPI2_Init+0xa4>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800172c:	4b1f      	ldr	r3, [pc, #124]	; (80017ac <MX_SPI2_Init+0xa4>)
 800172e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001732:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001734:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <MX_SPI2_Init+0xa4>)
 8001736:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800173a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800173c:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <MX_SPI2_Init+0xa4>)
 800173e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001742:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <MX_SPI2_Init+0xa4>)
 8001746:	2200      	movs	r2, #0
 8001748:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800174a:	4b18      	ldr	r3, [pc, #96]	; (80017ac <MX_SPI2_Init+0xa4>)
 800174c:	2200      	movs	r2, #0
 800174e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001750:	4b16      	ldr	r3, [pc, #88]	; (80017ac <MX_SPI2_Init+0xa4>)
 8001752:	2200      	movs	r2, #0
 8001754:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <MX_SPI2_Init+0xa4>)
 8001758:	2200      	movs	r2, #0
 800175a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <MX_SPI2_Init+0xa4>)
 800175e:	2200      	movs	r2, #0
 8001760:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <MX_SPI2_Init+0xa4>)
 8001764:	2200      	movs	r2, #0
 8001766:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001768:	4b10      	ldr	r3, [pc, #64]	; (80017ac <MX_SPI2_Init+0xa4>)
 800176a:	2200      	movs	r2, #0
 800176c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800176e:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <MX_SPI2_Init+0xa4>)
 8001770:	2200      	movs	r2, #0
 8001772:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001774:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <MX_SPI2_Init+0xa4>)
 8001776:	2200      	movs	r2, #0
 8001778:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800177a:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_SPI2_Init+0xa4>)
 800177c:	2200      	movs	r2, #0
 800177e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001780:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <MX_SPI2_Init+0xa4>)
 8001782:	2200      	movs	r2, #0
 8001784:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_SPI2_Init+0xa4>)
 8001788:	2200      	movs	r2, #0
 800178a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800178c:	4b07      	ldr	r3, [pc, #28]	; (80017ac <MX_SPI2_Init+0xa4>)
 800178e:	2200      	movs	r2, #0
 8001790:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_SPI2_Init+0xa4>)
 8001794:	2200      	movs	r2, #0
 8001796:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001798:	4804      	ldr	r0, [pc, #16]	; (80017ac <MX_SPI2_Init+0xa4>)
 800179a:	f006 f8c9 	bl	8007930 <HAL_SPI_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80017a4:	f000 fae0 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	240005f0 	.word	0x240005f0
 80017b0:	40003800 	.word	0x40003800

080017b4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80017b8:	4b27      	ldr	r3, [pc, #156]	; (8001858 <MX_SPI3_Init+0xa4>)
 80017ba:	4a28      	ldr	r2, [pc, #160]	; (800185c <MX_SPI3_Init+0xa8>)
 80017bc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80017be:	4b26      	ldr	r3, [pc, #152]	; (8001858 <MX_SPI3_Init+0xa4>)
 80017c0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80017c4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80017c6:	4b24      	ldr	r3, [pc, #144]	; (8001858 <MX_SPI3_Init+0xa4>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80017cc:	4b22      	ldr	r3, [pc, #136]	; (8001858 <MX_SPI3_Init+0xa4>)
 80017ce:	220f      	movs	r2, #15
 80017d0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <MX_SPI3_Init+0xa4>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017d8:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <MX_SPI3_Init+0xa4>)
 80017da:	2200      	movs	r2, #0
 80017dc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80017de:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <MX_SPI3_Init+0xa4>)
 80017e0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80017e4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <MX_SPI3_Init+0xa4>)
 80017e8:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80017ec:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017ee:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <MX_SPI3_Init+0xa4>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80017f4:	4b18      	ldr	r3, [pc, #96]	; (8001858 <MX_SPI3_Init+0xa4>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017fa:	4b17      	ldr	r3, [pc, #92]	; (8001858 <MX_SPI3_Init+0xa4>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001800:	4b15      	ldr	r3, [pc, #84]	; (8001858 <MX_SPI3_Init+0xa4>)
 8001802:	2200      	movs	r2, #0
 8001804:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001806:	4b14      	ldr	r3, [pc, #80]	; (8001858 <MX_SPI3_Init+0xa4>)
 8001808:	2200      	movs	r2, #0
 800180a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <MX_SPI3_Init+0xa4>)
 800180e:	2200      	movs	r2, #0
 8001810:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001812:	4b11      	ldr	r3, [pc, #68]	; (8001858 <MX_SPI3_Init+0xa4>)
 8001814:	2200      	movs	r2, #0
 8001816:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001818:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <MX_SPI3_Init+0xa4>)
 800181a:	2200      	movs	r2, #0
 800181c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <MX_SPI3_Init+0xa4>)
 8001820:	2200      	movs	r2, #0
 8001822:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <MX_SPI3_Init+0xa4>)
 8001826:	2200      	movs	r2, #0
 8001828:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <MX_SPI3_Init+0xa4>)
 800182c:	2200      	movs	r2, #0
 800182e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <MX_SPI3_Init+0xa4>)
 8001832:	2200      	movs	r2, #0
 8001834:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001836:	4b08      	ldr	r3, [pc, #32]	; (8001858 <MX_SPI3_Init+0xa4>)
 8001838:	2200      	movs	r2, #0
 800183a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <MX_SPI3_Init+0xa4>)
 800183e:	2200      	movs	r2, #0
 8001840:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001842:	4805      	ldr	r0, [pc, #20]	; (8001858 <MX_SPI3_Init+0xa4>)
 8001844:	f006 f874 	bl	8007930 <HAL_SPI_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 800184e:	f000 fa8b 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	24000768 	.word	0x24000768
 800185c:	40003c00 	.word	0x40003c00

08001860 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b09a      	sub	sp, #104	; 0x68
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001866:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001874:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001880:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
 8001890:	615a      	str	r2, [r3, #20]
 8001892:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001894:	1d3b      	adds	r3, r7, #4
 8001896:	222c      	movs	r2, #44	; 0x2c
 8001898:	2100      	movs	r1, #0
 800189a:	4618      	mov	r0, r3
 800189c:	f00a fc0d 	bl	800c0ba <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018a0:	4b4f      	ldr	r3, [pc, #316]	; (80019e0 <MX_TIM1_Init+0x180>)
 80018a2:	4a50      	ldr	r2, [pc, #320]	; (80019e4 <MX_TIM1_Init+0x184>)
 80018a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018a6:	4b4e      	ldr	r3, [pc, #312]	; (80019e0 <MX_TIM1_Init+0x180>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ac:	4b4c      	ldr	r3, [pc, #304]	; (80019e0 <MX_TIM1_Init+0x180>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 11999;
 80018b2:	4b4b      	ldr	r3, [pc, #300]	; (80019e0 <MX_TIM1_Init+0x180>)
 80018b4:	f642 62df 	movw	r2, #11999	; 0x2edf
 80018b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ba:	4b49      	ldr	r3, [pc, #292]	; (80019e0 <MX_TIM1_Init+0x180>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018c0:	4b47      	ldr	r3, [pc, #284]	; (80019e0 <MX_TIM1_Init+0x180>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c6:	4b46      	ldr	r3, [pc, #280]	; (80019e0 <MX_TIM1_Init+0x180>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018cc:	4844      	ldr	r0, [pc, #272]	; (80019e0 <MX_TIM1_Init+0x180>)
 80018ce:	f006 fdd8 	bl	8008482 <HAL_TIM_Base_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80018d8:	f000 fa46 	bl	8001d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018e6:	4619      	mov	r1, r3
 80018e8:	483d      	ldr	r0, [pc, #244]	; (80019e0 <MX_TIM1_Init+0x180>)
 80018ea:	f007 f8e5 	bl	8008ab8 <HAL_TIM_ConfigClockSource>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80018f4:	f000 fa38 	bl	8001d68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018f8:	4839      	ldr	r0, [pc, #228]	; (80019e0 <MX_TIM1_Init+0x180>)
 80018fa:	f006 fe17 	bl	800852c <HAL_TIM_PWM_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001904:	f000 fa30 	bl	8001d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001908:	2300      	movs	r3, #0
 800190a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800190c:	2300      	movs	r3, #0
 800190e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001910:	2300      	movs	r3, #0
 8001912:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001914:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001918:	4619      	mov	r1, r3
 800191a:	4831      	ldr	r0, [pc, #196]	; (80019e0 <MX_TIM1_Init+0x180>)
 800191c:	f007 fe2a 	bl	8009574 <HAL_TIMEx_MasterConfigSynchronization>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001926:	f000 fa1f 	bl	8001d68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800192a:	2360      	movs	r3, #96	; 0x60
 800192c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001932:	2300      	movs	r3, #0
 8001934:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001936:	2300      	movs	r3, #0
 8001938:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800193a:	2300      	movs	r3, #0
 800193c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800193e:	2300      	movs	r3, #0
 8001940:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001942:	2300      	movs	r3, #0
 8001944:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001946:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800194a:	2200      	movs	r2, #0
 800194c:	4619      	mov	r1, r3
 800194e:	4824      	ldr	r0, [pc, #144]	; (80019e0 <MX_TIM1_Init+0x180>)
 8001950:	f006 ff9a 	bl	8008888 <HAL_TIM_PWM_ConfigChannel>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800195a:	f000 fa05 	bl	8001d68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800195e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001962:	2204      	movs	r2, #4
 8001964:	4619      	mov	r1, r3
 8001966:	481e      	ldr	r0, [pc, #120]	; (80019e0 <MX_TIM1_Init+0x180>)
 8001968:	f006 ff8e 	bl	8008888 <HAL_TIM_PWM_ConfigChannel>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001972:	f000 f9f9 	bl	8001d68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001976:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800197a:	2208      	movs	r2, #8
 800197c:	4619      	mov	r1, r3
 800197e:	4818      	ldr	r0, [pc, #96]	; (80019e0 <MX_TIM1_Init+0x180>)
 8001980:	f006 ff82 	bl	8008888 <HAL_TIM_PWM_ConfigChannel>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800198a:	f000 f9ed 	bl	8001d68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 80;
 800199a:	2350      	movs	r3, #80	; 0x50
 800199c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	4619      	mov	r1, r3
 80019c2:	4807      	ldr	r0, [pc, #28]	; (80019e0 <MX_TIM1_Init+0x180>)
 80019c4:	f007 fe32 	bl	800962c <HAL_TIMEx_ConfigBreakDeadTime>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80019ce:	f000 f9cb 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019d2:	4803      	ldr	r0, [pc, #12]	; (80019e0 <MX_TIM1_Init+0x180>)
 80019d4:	f000 fc9e 	bl	8002314 <HAL_TIM_MspPostInit>

}
 80019d8:	bf00      	nop
 80019da:	3768      	adds	r7, #104	; 0x68
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	240009e4 	.word	0x240009e4
 80019e4:	40010000 	.word	0x40010000

080019e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b088      	sub	sp, #32
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ee:	f107 0310 	add.w	r3, r7, #16
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019fc:	1d3b      	adds	r3, r7, #4
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a06:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <MX_TIM2_Init+0x94>)
 8001a08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240;
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <MX_TIM2_Init+0x94>)
 8001a10:	22f0      	movs	r2, #240	; 0xf0
 8001a12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <MX_TIM2_Init+0x94>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500000;
 8001a1a:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <MX_TIM2_Init+0x94>)
 8001a1c:	4a18      	ldr	r2, [pc, #96]	; (8001a80 <MX_TIM2_Init+0x98>)
 8001a1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a20:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <MX_TIM2_Init+0x94>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <MX_TIM2_Init+0x94>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a2c:	4813      	ldr	r0, [pc, #76]	; (8001a7c <MX_TIM2_Init+0x94>)
 8001a2e:	f006 fd28 	bl	8008482 <HAL_TIM_Base_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a38:	f000 f996 	bl	8001d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a42:	f107 0310 	add.w	r3, r7, #16
 8001a46:	4619      	mov	r1, r3
 8001a48:	480c      	ldr	r0, [pc, #48]	; (8001a7c <MX_TIM2_Init+0x94>)
 8001a4a:	f007 f835 	bl	8008ab8 <HAL_TIM_ConfigClockSource>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a54:	f000 f988 	bl	8001d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	4619      	mov	r1, r3
 8001a64:	4805      	ldr	r0, [pc, #20]	; (8001a7c <MX_TIM2_Init+0x94>)
 8001a66:	f007 fd85 	bl	8009574 <HAL_TIMEx_MasterConfigSynchronization>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a70:	f000 f97a 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a74:	bf00      	nop
 8001a76:	3720      	adds	r7, #32
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	24000aac 	.word	0x24000aac
 8001a80:	0007a120 	.word	0x0007a120

08001a84 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b088      	sub	sp, #32
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a8a:	f107 0310 	add.w	r3, r7, #16
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001aa2:	4b1d      	ldr	r3, [pc, #116]	; (8001b18 <MX_TIM3_Init+0x94>)
 8001aa4:	4a1d      	ldr	r2, [pc, #116]	; (8001b1c <MX_TIM3_Init+0x98>)
 8001aa6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <MX_TIM3_Init+0x94>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aae:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <MX_TIM3_Init+0x94>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 11999;
 8001ab4:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <MX_TIM3_Init+0x94>)
 8001ab6:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001aba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001abc:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <MX_TIM3_Init+0x94>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <MX_TIM3_Init+0x94>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ac8:	4813      	ldr	r0, [pc, #76]	; (8001b18 <MX_TIM3_Init+0x94>)
 8001aca:	f006 fcda 	bl	8008482 <HAL_TIM_Base_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001ad4:	f000 f948 	bl	8001d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001adc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ade:	f107 0310 	add.w	r3, r7, #16
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	480c      	ldr	r0, [pc, #48]	; (8001b18 <MX_TIM3_Init+0x94>)
 8001ae6:	f006 ffe7 	bl	8008ab8 <HAL_TIM_ConfigClockSource>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001af0:	f000 f93a 	bl	8001d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af4:	2300      	movs	r3, #0
 8001af6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	4619      	mov	r1, r3
 8001b00:	4805      	ldr	r0, [pc, #20]	; (8001b18 <MX_TIM3_Init+0x94>)
 8001b02:	f007 fd37 	bl	8009574 <HAL_TIMEx_MasterConfigSynchronization>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001b0c:	f000 f92c 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b10:	bf00      	nop
 8001b12:	3720      	adds	r7, #32
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	24000728 	.word	0x24000728
 8001b1c:	40000400 	.word	0x40000400

08001b20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b24:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b26:	4a23      	ldr	r2, [pc, #140]	; (8001bb4 <MX_USART1_UART_Init+0x94>)
 8001b28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b2a:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b32:	4b1f      	ldr	r3, [pc, #124]	; (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b38:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b3e:	4b1c      	ldr	r3, [pc, #112]	; (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b44:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b46:	220c      	movs	r2, #12
 8001b48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b4a:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b50:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b56:	4b16      	ldr	r3, [pc, #88]	; (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b5c:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b62:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b68:	4811      	ldr	r0, [pc, #68]	; (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b6a:	f007 fe20 	bl	80097ae <HAL_UART_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001b74:	f000 f8f8 	bl	8001d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b78:	2100      	movs	r1, #0
 8001b7a:	480d      	ldr	r0, [pc, #52]	; (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b7c:	f00a f989 	bl	800be92 <HAL_UARTEx_SetTxFifoThreshold>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b86:	f000 f8ef 	bl	8001d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	4808      	ldr	r0, [pc, #32]	; (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b8e:	f00a f9be 	bl	800bf0e <HAL_UARTEx_SetRxFifoThreshold>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b98:	f000 f8e6 	bl	8001d68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b9c:	4804      	ldr	r0, [pc, #16]	; (8001bb0 <MX_USART1_UART_Init+0x90>)
 8001b9e:	f00a f93f 	bl	800be20 <HAL_UARTEx_DisableFifoMode>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ba8:	f000 f8de 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	240008b8 	.word	0x240008b8
 8001bb4:	40011000 	.word	0x40011000

08001bb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08c      	sub	sp, #48	; 0x30
 8001bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbe:	f107 031c 	add.w	r3, r7, #28
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]
 8001bcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bce:	4b45      	ldr	r3, [pc, #276]	; (8001ce4 <MX_GPIO_Init+0x12c>)
 8001bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd4:	4a43      	ldr	r2, [pc, #268]	; (8001ce4 <MX_GPIO_Init+0x12c>)
 8001bd6:	f043 0304 	orr.w	r3, r3, #4
 8001bda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bde:	4b41      	ldr	r3, [pc, #260]	; (8001ce4 <MX_GPIO_Init+0x12c>)
 8001be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	61bb      	str	r3, [r7, #24]
 8001bea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bec:	4b3d      	ldr	r3, [pc, #244]	; (8001ce4 <MX_GPIO_Init+0x12c>)
 8001bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf2:	4a3c      	ldr	r2, [pc, #240]	; (8001ce4 <MX_GPIO_Init+0x12c>)
 8001bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bfc:	4b39      	ldr	r3, [pc, #228]	; (8001ce4 <MX_GPIO_Init+0x12c>)
 8001bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0a:	4b36      	ldr	r3, [pc, #216]	; (8001ce4 <MX_GPIO_Init+0x12c>)
 8001c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c10:	4a34      	ldr	r2, [pc, #208]	; (8001ce4 <MX_GPIO_Init+0x12c>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c1a:	4b32      	ldr	r3, [pc, #200]	; (8001ce4 <MX_GPIO_Init+0x12c>)
 8001c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c28:	4b2e      	ldr	r3, [pc, #184]	; (8001ce4 <MX_GPIO_Init+0x12c>)
 8001c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c2e:	4a2d      	ldr	r2, [pc, #180]	; (8001ce4 <MX_GPIO_Init+0x12c>)
 8001c30:	f043 0302 	orr.w	r3, r3, #2
 8001c34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c38:	4b2a      	ldr	r3, [pc, #168]	; (8001ce4 <MX_GPIO_Init+0x12c>)
 8001c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c46:	4b27      	ldr	r3, [pc, #156]	; (8001ce4 <MX_GPIO_Init+0x12c>)
 8001c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4c:	4a25      	ldr	r2, [pc, #148]	; (8001ce4 <MX_GPIO_Init+0x12c>)
 8001c4e:	f043 0310 	orr.w	r3, r3, #16
 8001c52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c56:	4b23      	ldr	r3, [pc, #140]	; (8001ce4 <MX_GPIO_Init+0x12c>)
 8001c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5c:	f003 0310 	and.w	r3, r3, #16
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c64:	4b1f      	ldr	r3, [pc, #124]	; (8001ce4 <MX_GPIO_Init+0x12c>)
 8001c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6a:	4a1e      	ldr	r2, [pc, #120]	; (8001ce4 <MX_GPIO_Init+0x12c>)
 8001c6c:	f043 0308 	orr.w	r3, r3, #8
 8001c70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c74:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <MX_GPIO_Init+0x12c>)
 8001c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	607b      	str	r3, [r7, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001c82:	2200      	movs	r2, #0
 8001c84:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001c88:	4817      	ldr	r0, [pc, #92]	; (8001ce8 <MX_GPIO_Init+0x130>)
 8001c8a:	f002 ff07 	bl	8004a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001c8e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c94:	2301      	movs	r3, #1
 8001c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca0:	f107 031c 	add.w	r3, r7, #28
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4810      	ldr	r0, [pc, #64]	; (8001ce8 <MX_GPIO_Init+0x130>)
 8001ca8:	f002 fd48 	bl	800473c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001cac:	230f      	movs	r3, #15
 8001cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb8:	f107 031c 	add.w	r3, r7, #28
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	480b      	ldr	r0, [pc, #44]	; (8001cec <MX_GPIO_Init+0x134>)
 8001cc0:	f002 fd3c 	bl	800473c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cd0:	f107 031c 	add.w	r3, r7, #28
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4806      	ldr	r0, [pc, #24]	; (8001cf0 <MX_GPIO_Init+0x138>)
 8001cd8:	f002 fd30 	bl	800473c <HAL_GPIO_Init>

}
 8001cdc:	bf00      	nop
 8001cde:	3730      	adds	r7, #48	; 0x30
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	58024400 	.word	0x58024400
 8001ce8:	58020800 	.word	0x58020800
 8001cec:	58020000 	.word	0x58020000
 8001cf0:	58020c00 	.word	0x58020c00

08001cf4 <set_pmw>:

/* USER CODE BEGIN 4 */
int set_pmw(int a, int b, int c) {
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
	TIM1->CCER = 0b0000010101010101;
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <set_pmw+0x34>)
 8001d02:	f240 5255 	movw	r2, #1365	; 0x555
 8001d06:	621a      	str	r2, [r3, #32]
	TIM1->CCR1 = a;
 8001d08:	4a07      	ldr	r2, [pc, #28]	; (8001d28 <set_pmw+0x34>)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 = b;
 8001d0e:	4a06      	ldr	r2, [pc, #24]	; (8001d28 <set_pmw+0x34>)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	6393      	str	r3, [r2, #56]	; 0x38
	TIM1->CCR3 = c;
 8001d14:	4a04      	ldr	r2, [pc, #16]	; (8001d28 <set_pmw+0x34>)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	63d3      	str	r3, [r2, #60]	; 0x3c
	return (1);
 8001d1a:	2301      	movs	r3, #1
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	40010000 	.word	0x40010000

08001d2c <mech_to_electric_angle>:
int mech_to_electric_angle(int mechangle) {
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
//		foc_angle = 3600-(foc_angle % 900) * 4;//convert to electrical degrees by x4 and mod to 360 degrees
//		angle_adjusted = ((int) (angle + 357)) % 90;
//	int foc_angle = (mechangle + 690) % 900 * 4;		//OG:649//BEST:670
//	int foc_angle = (mechangle + 880) % 900 * 4;	//Best in practice and
//	int foc_angle = (mechangle + 870) % 900 * 4;	//theory
	int foc_angle = (360-mechangle+70) % 90 * 4;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f5c3 73d7 	rsb	r3, r3, #430	; 0x1ae
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <mech_to_electric_angle+0x38>)
 8001d3c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d40:	441a      	add	r2, r3
 8001d42:	1191      	asrs	r1, r2, #6
 8001d44:	17da      	asrs	r2, r3, #31
 8001d46:	1a8a      	subs	r2, r1, r2
 8001d48:	215a      	movs	r1, #90	; 0x5a
 8001d4a:	fb01 f202 	mul.w	r2, r1, r2
 8001d4e:	1a9a      	subs	r2, r3, r2
 8001d50:	0093      	lsls	r3, r2, #2
 8001d52:	60fb      	str	r3, [r7, #12]
//	int foc_angle = (360-mechangle+2) % 90 * 4;
	return (foc_angle);
 8001d54:	68fb      	ldr	r3, [r7, #12]

}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	b60b60b7 	.word	0xb60b60b7

08001d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <HAL_MspInit+0x30>)
 8001d80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d84:	4a08      	ldr	r2, [pc, #32]	; (8001da8 <HAL_MspInit+0x30>)
 8001d86:	f043 0302 	orr.w	r3, r3, #2
 8001d8a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_MspInit+0x30>)
 8001d90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	607b      	str	r3, [r7, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	58024400 	.word	0x58024400

08001dac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08e      	sub	sp, #56	; 0x38
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a51      	ldr	r2, [pc, #324]	; (8001f10 <HAL_ADC_MspInit+0x164>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d133      	bne.n	8001e36 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001dce:	4b51      	ldr	r3, [pc, #324]	; (8001f14 <HAL_ADC_MspInit+0x168>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	4a4f      	ldr	r2, [pc, #316]	; (8001f14 <HAL_ADC_MspInit+0x168>)
 8001dd6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001dd8:	4b4e      	ldr	r3, [pc, #312]	; (8001f14 <HAL_ADC_MspInit+0x168>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d10e      	bne.n	8001dfe <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001de0:	4b4d      	ldr	r3, [pc, #308]	; (8001f18 <HAL_ADC_MspInit+0x16c>)
 8001de2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001de6:	4a4c      	ldr	r2, [pc, #304]	; (8001f18 <HAL_ADC_MspInit+0x16c>)
 8001de8:	f043 0320 	orr.w	r3, r3, #32
 8001dec:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001df0:	4b49      	ldr	r3, [pc, #292]	; (8001f18 <HAL_ADC_MspInit+0x16c>)
 8001df2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001df6:	f003 0320 	and.w	r3, r3, #32
 8001dfa:	623b      	str	r3, [r7, #32]
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
    }
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfe:	4b46      	ldr	r3, [pc, #280]	; (8001f18 <HAL_ADC_MspInit+0x16c>)
 8001e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e04:	4a44      	ldr	r2, [pc, #272]	; (8001f18 <HAL_ADC_MspInit+0x16c>)
 8001e06:	f043 0302 	orr.w	r3, r3, #2
 8001e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e0e:	4b42      	ldr	r3, [pc, #264]	; (8001f18 <HAL_ADC_MspInit+0x16c>)
 8001e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	61fb      	str	r3, [r7, #28]
 8001e1a:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_INN5
    PB1     ------> ADC1_INP5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e20:	2303      	movs	r3, #3
 8001e22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	483b      	ldr	r0, [pc, #236]	; (8001f1c <HAL_ADC_MspInit+0x170>)
 8001e30:	f002 fc84 	bl	800473c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001e34:	e067      	b.n	8001f06 <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC2)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a39      	ldr	r2, [pc, #228]	; (8001f20 <HAL_ADC_MspInit+0x174>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d133      	bne.n	8001ea8 <HAL_ADC_MspInit+0xfc>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001e40:	4b34      	ldr	r3, [pc, #208]	; (8001f14 <HAL_ADC_MspInit+0x168>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	3301      	adds	r3, #1
 8001e46:	4a33      	ldr	r2, [pc, #204]	; (8001f14 <HAL_ADC_MspInit+0x168>)
 8001e48:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001e4a:	4b32      	ldr	r3, [pc, #200]	; (8001f14 <HAL_ADC_MspInit+0x168>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d10e      	bne.n	8001e70 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001e52:	4b31      	ldr	r3, [pc, #196]	; (8001f18 <HAL_ADC_MspInit+0x16c>)
 8001e54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e58:	4a2f      	ldr	r2, [pc, #188]	; (8001f18 <HAL_ADC_MspInit+0x16c>)
 8001e5a:	f043 0320 	orr.w	r3, r3, #32
 8001e5e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e62:	4b2d      	ldr	r3, [pc, #180]	; (8001f18 <HAL_ADC_MspInit+0x16c>)
 8001e64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e68:	f003 0320 	and.w	r3, r3, #32
 8001e6c:	61bb      	str	r3, [r7, #24]
 8001e6e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e70:	4b29      	ldr	r3, [pc, #164]	; (8001f18 <HAL_ADC_MspInit+0x16c>)
 8001e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e76:	4a28      	ldr	r2, [pc, #160]	; (8001f18 <HAL_ADC_MspInit+0x16c>)
 8001e78:	f043 0304 	orr.w	r3, r3, #4
 8001e7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e80:	4b25      	ldr	r3, [pc, #148]	; (8001f18 <HAL_ADC_MspInit+0x16c>)
 8001e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e86:	f003 0304 	and.w	r3, r3, #4
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001e8e:	2330      	movs	r3, #48	; 0x30
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e92:	2303      	movs	r3, #3
 8001e94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4820      	ldr	r0, [pc, #128]	; (8001f24 <HAL_ADC_MspInit+0x178>)
 8001ea2:	f002 fc4b 	bl	800473c <HAL_GPIO_Init>
}
 8001ea6:	e02e      	b.n	8001f06 <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC3)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a1e      	ldr	r2, [pc, #120]	; (8001f28 <HAL_ADC_MspInit+0x17c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d129      	bne.n	8001f06 <HAL_ADC_MspInit+0x15a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001eb2:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <HAL_ADC_MspInit+0x16c>)
 8001eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb8:	4a17      	ldr	r2, [pc, #92]	; (8001f18 <HAL_ADC_MspInit+0x16c>)
 8001eba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ebe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ec2:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <HAL_ADC_MspInit+0x16c>)
 8001ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <HAL_ADC_MspInit+0x16c>)
 8001ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed6:	4a10      	ldr	r2, [pc, #64]	; (8001f18 <HAL_ADC_MspInit+0x16c>)
 8001ed8:	f043 0304 	orr.w	r3, r3, #4
 8001edc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ee0:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <HAL_ADC_MspInit+0x16c>)
 8001ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001eee:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001ef2:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001ef6:	f000 fc45 	bl	8002784 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8001efa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8001efe:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001f02:	f000 fc3f 	bl	8002784 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001f06:	bf00      	nop
 8001f08:	3738      	adds	r7, #56	; 0x38
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40022000 	.word	0x40022000
 8001f14:	240005ec 	.word	0x240005ec
 8001f18:	58024400 	.word	0x58024400
 8001f1c:	58020400 	.word	0x58020400
 8001f20:	40022100 	.word	0x40022100
 8001f24:	58020800 	.word	0x58020800
 8001f28:	58026000 	.word	0x58026000

08001f2c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	; 0x28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a1a      	ldr	r2, [pc, #104]	; (8001fb4 <HAL_FDCAN_MspInit+0x88>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d12e      	bne.n	8001fac <HAL_FDCAN_MspInit+0x80>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001f4e:	4b1a      	ldr	r3, [pc, #104]	; (8001fb8 <HAL_FDCAN_MspInit+0x8c>)
 8001f50:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001f54:	4a18      	ldr	r2, [pc, #96]	; (8001fb8 <HAL_FDCAN_MspInit+0x8c>)
 8001f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001f5e:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <HAL_FDCAN_MspInit+0x8c>)
 8001f60:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_FDCAN_MspInit+0x8c>)
 8001f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f72:	4a11      	ldr	r2, [pc, #68]	; (8001fb8 <HAL_FDCAN_MspInit+0x8c>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <HAL_FDCAN_MspInit+0x8c>)
 8001f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	60fb      	str	r3, [r7, #12]
 8001f88:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration    
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f8a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f90:	2302      	movs	r3, #2
 8001f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001f9c:	2309      	movs	r3, #9
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4805      	ldr	r0, [pc, #20]	; (8001fbc <HAL_FDCAN_MspInit+0x90>)
 8001fa8:	f002 fbc8 	bl	800473c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001fac:	bf00      	nop
 8001fae:	3728      	adds	r7, #40	; 0x28
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	4000a000 	.word	0x4000a000
 8001fb8:	58024400 	.word	0x58024400
 8001fbc:	58020000 	.word	0x58020000

08001fc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08a      	sub	sp, #40	; 0x28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a1a      	ldr	r2, [pc, #104]	; (8002048 <HAL_I2C_MspInit+0x88>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d12d      	bne.n	800203e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe2:	4b1a      	ldr	r3, [pc, #104]	; (800204c <HAL_I2C_MspInit+0x8c>)
 8001fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fe8:	4a18      	ldr	r2, [pc, #96]	; (800204c <HAL_I2C_MspInit+0x8c>)
 8001fea:	f043 0302 	orr.w	r3, r3, #2
 8001fee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <HAL_I2C_MspInit+0x8c>)
 8001ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002000:	23c0      	movs	r3, #192	; 0xc0
 8002002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002004:	2312      	movs	r3, #18
 8002006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200c:	2300      	movs	r3, #0
 800200e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002010:	2304      	movs	r3, #4
 8002012:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	4619      	mov	r1, r3
 800201a:	480d      	ldr	r0, [pc, #52]	; (8002050 <HAL_I2C_MspInit+0x90>)
 800201c:	f002 fb8e 	bl	800473c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002020:	4b0a      	ldr	r3, [pc, #40]	; (800204c <HAL_I2C_MspInit+0x8c>)
 8002022:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002026:	4a09      	ldr	r2, [pc, #36]	; (800204c <HAL_I2C_MspInit+0x8c>)
 8002028:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800202c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <HAL_I2C_MspInit+0x8c>)
 8002032:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800203e:	bf00      	nop
 8002040:	3728      	adds	r7, #40	; 0x28
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40005400 	.word	0x40005400
 800204c:	58024400 	.word	0x58024400
 8002050:	58020400 	.word	0x58020400

08002054 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08e      	sub	sp, #56	; 0x38
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a73      	ldr	r2, [pc, #460]	; (8002240 <HAL_SPI_MspInit+0x1ec>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d136      	bne.n	80020e4 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002076:	4b73      	ldr	r3, [pc, #460]	; (8002244 <HAL_SPI_MspInit+0x1f0>)
 8002078:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800207c:	4a71      	ldr	r2, [pc, #452]	; (8002244 <HAL_SPI_MspInit+0x1f0>)
 800207e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002082:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002086:	4b6f      	ldr	r3, [pc, #444]	; (8002244 <HAL_SPI_MspInit+0x1f0>)
 8002088:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800208c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002090:	623b      	str	r3, [r7, #32]
 8002092:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002094:	4b6b      	ldr	r3, [pc, #428]	; (8002244 <HAL_SPI_MspInit+0x1f0>)
 8002096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800209a:	4a6a      	ldr	r2, [pc, #424]	; (8002244 <HAL_SPI_MspInit+0x1f0>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020a4:	4b67      	ldr	r3, [pc, #412]	; (8002244 <HAL_SPI_MspInit+0x1f0>)
 80020a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	61fb      	str	r3, [r7, #28]
 80020b0:	69fb      	ldr	r3, [r7, #28]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80020b2:	23f0      	movs	r3, #240	; 0xf0
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b6:	2302      	movs	r3, #2
 80020b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020be:	2300      	movs	r3, #0
 80020c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020c2:	2305      	movs	r3, #5
 80020c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ca:	4619      	mov	r1, r3
 80020cc:	485e      	ldr	r0, [pc, #376]	; (8002248 <HAL_SPI_MspInit+0x1f4>)
 80020ce:	f002 fb35 	bl	800473c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80020d2:	2200      	movs	r2, #0
 80020d4:	2100      	movs	r1, #0
 80020d6:	2023      	movs	r0, #35	; 0x23
 80020d8:	f001 fdfd 	bl	8003cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80020dc:	2023      	movs	r0, #35	; 0x23
 80020de:	f001 fe14 	bl	8003d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80020e2:	e0a9      	b.n	8002238 <HAL_SPI_MspInit+0x1e4>
  else if(hspi->Instance==SPI2)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a58      	ldr	r2, [pc, #352]	; (800224c <HAL_SPI_MspInit+0x1f8>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d148      	bne.n	8002180 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020ee:	4b55      	ldr	r3, [pc, #340]	; (8002244 <HAL_SPI_MspInit+0x1f0>)
 80020f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020f4:	4a53      	ldr	r2, [pc, #332]	; (8002244 <HAL_SPI_MspInit+0x1f0>)
 80020f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020fe:	4b51      	ldr	r3, [pc, #324]	; (8002244 <HAL_SPI_MspInit+0x1f0>)
 8002100:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002108:	61bb      	str	r3, [r7, #24]
 800210a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800210c:	4b4d      	ldr	r3, [pc, #308]	; (8002244 <HAL_SPI_MspInit+0x1f0>)
 800210e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002112:	4a4c      	ldr	r2, [pc, #304]	; (8002244 <HAL_SPI_MspInit+0x1f0>)
 8002114:	f043 0302 	orr.w	r3, r3, #2
 8002118:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800211c:	4b49      	ldr	r3, [pc, #292]	; (8002244 <HAL_SPI_MspInit+0x1f0>)
 800211e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800212a:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002138:	2300      	movs	r3, #0
 800213a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800213c:	2305      	movs	r3, #5
 800213e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002144:	4619      	mov	r1, r3
 8002146:	4842      	ldr	r0, [pc, #264]	; (8002250 <HAL_SPI_MspInit+0x1fc>)
 8002148:	f002 faf8 	bl	800473c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800214c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002152:	2302      	movs	r3, #2
 8002154:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002156:	2301      	movs	r3, #1
 8002158:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215a:	2300      	movs	r3, #0
 800215c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800215e:	2305      	movs	r3, #5
 8002160:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002166:	4619      	mov	r1, r3
 8002168:	4839      	ldr	r0, [pc, #228]	; (8002250 <HAL_SPI_MspInit+0x1fc>)
 800216a:	f002 fae7 	bl	800473c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800216e:	2200      	movs	r2, #0
 8002170:	2100      	movs	r1, #0
 8002172:	2024      	movs	r0, #36	; 0x24
 8002174:	f001 fdaf 	bl	8003cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8002178:	2024      	movs	r0, #36	; 0x24
 800217a:	f001 fdc6 	bl	8003d0a <HAL_NVIC_EnableIRQ>
}
 800217e:	e05b      	b.n	8002238 <HAL_SPI_MspInit+0x1e4>
  else if(hspi->Instance==SPI3)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a33      	ldr	r2, [pc, #204]	; (8002254 <HAL_SPI_MspInit+0x200>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d156      	bne.n	8002238 <HAL_SPI_MspInit+0x1e4>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800218a:	4b2e      	ldr	r3, [pc, #184]	; (8002244 <HAL_SPI_MspInit+0x1f0>)
 800218c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002190:	4a2c      	ldr	r2, [pc, #176]	; (8002244 <HAL_SPI_MspInit+0x1f0>)
 8002192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002196:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800219a:	4b2a      	ldr	r3, [pc, #168]	; (8002244 <HAL_SPI_MspInit+0x1f0>)
 800219c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021a4:	613b      	str	r3, [r7, #16]
 80021a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a8:	4b26      	ldr	r3, [pc, #152]	; (8002244 <HAL_SPI_MspInit+0x1f0>)
 80021aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ae:	4a25      	ldr	r2, [pc, #148]	; (8002244 <HAL_SPI_MspInit+0x1f0>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021b8:	4b22      	ldr	r3, [pc, #136]	; (8002244 <HAL_SPI_MspInit+0x1f0>)
 80021ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c6:	4b1f      	ldr	r3, [pc, #124]	; (8002244 <HAL_SPI_MspInit+0x1f0>)
 80021c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021cc:	4a1d      	ldr	r2, [pc, #116]	; (8002244 <HAL_SPI_MspInit+0x1f0>)
 80021ce:	f043 0304 	orr.w	r3, r3, #4
 80021d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021d6:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <HAL_SPI_MspInit+0x1f0>)
 80021d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80021e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ea:	2302      	movs	r3, #2
 80021ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f2:	2300      	movs	r3, #0
 80021f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021f6:	2306      	movs	r3, #6
 80021f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fe:	4619      	mov	r1, r3
 8002200:	4811      	ldr	r0, [pc, #68]	; (8002248 <HAL_SPI_MspInit+0x1f4>)
 8002202:	f002 fa9b 	bl	800473c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002206:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	2302      	movs	r3, #2
 800220e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002214:	2300      	movs	r3, #0
 8002216:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002218:	2306      	movs	r3, #6
 800221a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800221c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002220:	4619      	mov	r1, r3
 8002222:	480d      	ldr	r0, [pc, #52]	; (8002258 <HAL_SPI_MspInit+0x204>)
 8002224:	f002 fa8a 	bl	800473c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002228:	2200      	movs	r2, #0
 800222a:	2100      	movs	r1, #0
 800222c:	2033      	movs	r0, #51	; 0x33
 800222e:	f001 fd52 	bl	8003cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8002232:	2033      	movs	r0, #51	; 0x33
 8002234:	f001 fd69 	bl	8003d0a <HAL_NVIC_EnableIRQ>
}
 8002238:	bf00      	nop
 800223a:	3738      	adds	r7, #56	; 0x38
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40013000 	.word	0x40013000
 8002244:	58024400 	.word	0x58024400
 8002248:	58020000 	.word	0x58020000
 800224c:	40003800 	.word	0x40003800
 8002250:	58020400 	.word	0x58020400
 8002254:	40003c00 	.word	0x40003c00
 8002258:	58020800 	.word	0x58020800

0800225c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a27      	ldr	r2, [pc, #156]	; (8002308 <HAL_TIM_Base_MspInit+0xac>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d10f      	bne.n	800228e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800226e:	4b27      	ldr	r3, [pc, #156]	; (800230c <HAL_TIM_Base_MspInit+0xb0>)
 8002270:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002274:	4a25      	ldr	r2, [pc, #148]	; (800230c <HAL_TIM_Base_MspInit+0xb0>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800227e:	4b23      	ldr	r3, [pc, #140]	; (800230c <HAL_TIM_Base_MspInit+0xb0>)
 8002280:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800228c:	e038      	b.n	8002300 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM2)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002296:	d117      	bne.n	80022c8 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002298:	4b1c      	ldr	r3, [pc, #112]	; (800230c <HAL_TIM_Base_MspInit+0xb0>)
 800229a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800229e:	4a1b      	ldr	r2, [pc, #108]	; (800230c <HAL_TIM_Base_MspInit+0xb0>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022a8:	4b18      	ldr	r3, [pc, #96]	; (800230c <HAL_TIM_Base_MspInit+0xb0>)
 80022aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80022b6:	2200      	movs	r2, #0
 80022b8:	2100      	movs	r1, #0
 80022ba:	201c      	movs	r0, #28
 80022bc:	f001 fd0b 	bl	8003cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022c0:	201c      	movs	r0, #28
 80022c2:	f001 fd22 	bl	8003d0a <HAL_NVIC_EnableIRQ>
}
 80022c6:	e01b      	b.n	8002300 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM3)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a10      	ldr	r2, [pc, #64]	; (8002310 <HAL_TIM_Base_MspInit+0xb4>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d116      	bne.n	8002300 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022d2:	4b0e      	ldr	r3, [pc, #56]	; (800230c <HAL_TIM_Base_MspInit+0xb0>)
 80022d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022d8:	4a0c      	ldr	r2, [pc, #48]	; (800230c <HAL_TIM_Base_MspInit+0xb0>)
 80022da:	f043 0302 	orr.w	r3, r3, #2
 80022de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022e2:	4b0a      	ldr	r3, [pc, #40]	; (800230c <HAL_TIM_Base_MspInit+0xb0>)
 80022e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80022f0:	2200      	movs	r2, #0
 80022f2:	2100      	movs	r1, #0
 80022f4:	201d      	movs	r0, #29
 80022f6:	f001 fcee 	bl	8003cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022fa:	201d      	movs	r0, #29
 80022fc:	f001 fd05 	bl	8003d0a <HAL_NVIC_EnableIRQ>
}
 8002300:	bf00      	nop
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40010000 	.word	0x40010000
 800230c:	58024400 	.word	0x58024400
 8002310:	40000400 	.word	0x40000400

08002314 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231c:	f107 030c 	add.w	r3, r7, #12
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a13      	ldr	r2, [pc, #76]	; (8002380 <HAL_TIM_MspPostInit+0x6c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d11f      	bne.n	8002376 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002336:	4b13      	ldr	r3, [pc, #76]	; (8002384 <HAL_TIM_MspPostInit+0x70>)
 8002338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800233c:	4a11      	ldr	r2, [pc, #68]	; (8002384 <HAL_TIM_MspPostInit+0x70>)
 800233e:	f043 0310 	orr.w	r3, r3, #16
 8002342:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002346:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <HAL_TIM_MspPostInit+0x70>)
 8002348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	68bb      	ldr	r3, [r7, #8]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8002354:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8002358:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235a:	2302      	movs	r3, #2
 800235c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002362:	2300      	movs	r3, #0
 8002364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002366:	2301      	movs	r3, #1
 8002368:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800236a:	f107 030c 	add.w	r3, r7, #12
 800236e:	4619      	mov	r1, r3
 8002370:	4805      	ldr	r0, [pc, #20]	; (8002388 <HAL_TIM_MspPostInit+0x74>)
 8002372:	f002 f9e3 	bl	800473c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002376:	bf00      	nop
 8002378:	3720      	adds	r7, #32
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40010000 	.word	0x40010000
 8002384:	58024400 	.word	0x58024400
 8002388:	58021000 	.word	0x58021000

0800238c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08a      	sub	sp, #40	; 0x28
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
 80023a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a1a      	ldr	r2, [pc, #104]	; (8002414 <HAL_UART_MspInit+0x88>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d12e      	bne.n	800240c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023ae:	4b1a      	ldr	r3, [pc, #104]	; (8002418 <HAL_UART_MspInit+0x8c>)
 80023b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023b4:	4a18      	ldr	r2, [pc, #96]	; (8002418 <HAL_UART_MspInit+0x8c>)
 80023b6:	f043 0310 	orr.w	r3, r3, #16
 80023ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023be:	4b16      	ldr	r3, [pc, #88]	; (8002418 <HAL_UART_MspInit+0x8c>)
 80023c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023c4:	f003 0310 	and.w	r3, r3, #16
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023cc:	4b12      	ldr	r3, [pc, #72]	; (8002418 <HAL_UART_MspInit+0x8c>)
 80023ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d2:	4a11      	ldr	r2, [pc, #68]	; (8002418 <HAL_UART_MspInit+0x8c>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023dc:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <HAL_UART_MspInit+0x8c>)
 80023de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f0:	2302      	movs	r3, #2
 80023f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f8:	2300      	movs	r3, #0
 80023fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023fc:	2307      	movs	r3, #7
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002400:	f107 0314 	add.w	r3, r7, #20
 8002404:	4619      	mov	r1, r3
 8002406:	4805      	ldr	r0, [pc, #20]	; (800241c <HAL_UART_MspInit+0x90>)
 8002408:	f002 f998 	bl	800473c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800240c:	bf00      	nop
 800240e:	3728      	adds	r7, #40	; 0x28
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40011000 	.word	0x40011000
 8002418:	58024400 	.word	0x58024400
 800241c:	58020000 	.word	0x58020000

08002420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002432:	e7fe      	b.n	8002432 <HardFault_Handler+0x4>

08002434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002438:	e7fe      	b.n	8002438 <MemManage_Handler+0x4>

0800243a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800243e:	e7fe      	b.n	800243e <BusFault_Handler+0x4>

08002440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002444:	e7fe      	b.n	8002444 <UsageFault_Handler+0x4>

08002446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002474:	f000 f938 	bl	80026e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002478:	bf00      	nop
 800247a:	bd80      	pop	{r7, pc}

0800247c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002480:	4804      	ldr	r0, [pc, #16]	; (8002494 <TIM2_IRQHandler+0x18>)
 8002482:	f006 f8e1 	bl	8008648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002486:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800248a:	4803      	ldr	r0, [pc, #12]	; (8002498 <TIM2_IRQHandler+0x1c>)
 800248c:	f002 fb1f 	bl	8004ace <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 8002490:	bf00      	nop
 8002492:	bd80      	pop	{r7, pc}
 8002494:	24000aac 	.word	0x24000aac
 8002498:	58020800 	.word	0x58020800

0800249c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024a0:	4803      	ldr	r0, [pc, #12]	; (80024b0 <TIM3_IRQHandler+0x14>)
 80024a2:	f006 f8d1 	bl	8008648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  wait=0;
 80024a6:	4b03      	ldr	r3, [pc, #12]	; (80024b4 <TIM3_IRQHandler+0x18>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 1 */
}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	24000728 	.word	0x24000728
 80024b4:	240005e8 	.word	0x240005e8

080024b8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <SPI1_IRQHandler+0x10>)
 80024be:	f005 fbf3 	bl	8007ca8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	24000a24 	.word	0x24000a24

080024cc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80024d0:	4802      	ldr	r0, [pc, #8]	; (80024dc <SPI2_IRQHandler+0x10>)
 80024d2:	f005 fbe9 	bl	8007ca8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	240005f0 	.word	0x240005f0

080024e0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80024e4:	4802      	ldr	r0, [pc, #8]	; (80024f0 <SPI3_IRQHandler+0x10>)
 80024e6:	f005 fbdf 	bl	8007ca8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	24000768 	.word	0x24000768

080024f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024f8:	4b29      	ldr	r3, [pc, #164]	; (80025a0 <SystemInit+0xac>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fe:	4a28      	ldr	r2, [pc, #160]	; (80025a0 <SystemInit+0xac>)
 8002500:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002504:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002508:	4b26      	ldr	r3, [pc, #152]	; (80025a4 <SystemInit+0xb0>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a25      	ldr	r2, [pc, #148]	; (80025a4 <SystemInit+0xb0>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002514:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <SystemInit+0xb0>)
 8002516:	2200      	movs	r2, #0
 8002518:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800251a:	4b22      	ldr	r3, [pc, #136]	; (80025a4 <SystemInit+0xb0>)
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	4921      	ldr	r1, [pc, #132]	; (80025a4 <SystemInit+0xb0>)
 8002520:	4b21      	ldr	r3, [pc, #132]	; (80025a8 <SystemInit+0xb4>)
 8002522:	4013      	ands	r3, r2
 8002524:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002526:	4b1f      	ldr	r3, [pc, #124]	; (80025a4 <SystemInit+0xb0>)
 8002528:	2200      	movs	r2, #0
 800252a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800252c:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <SystemInit+0xb0>)
 800252e:	2200      	movs	r2, #0
 8002530:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002532:	4b1c      	ldr	r3, [pc, #112]	; (80025a4 <SystemInit+0xb0>)
 8002534:	2200      	movs	r2, #0
 8002536:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8002538:	4b1a      	ldr	r3, [pc, #104]	; (80025a4 <SystemInit+0xb0>)
 800253a:	2200      	movs	r2, #0
 800253c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800253e:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <SystemInit+0xb0>)
 8002540:	2200      	movs	r2, #0
 8002542:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8002544:	4b17      	ldr	r3, [pc, #92]	; (80025a4 <SystemInit+0xb0>)
 8002546:	2200      	movs	r2, #0
 8002548:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800254a:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <SystemInit+0xb0>)
 800254c:	2200      	movs	r2, #0
 800254e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8002550:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <SystemInit+0xb0>)
 8002552:	2200      	movs	r2, #0
 8002554:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002556:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <SystemInit+0xb0>)
 8002558:	2200      	movs	r2, #0
 800255a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <SystemInit+0xb0>)
 800255e:	2200      	movs	r2, #0
 8002560:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <SystemInit+0xb0>)
 8002564:	2200      	movs	r2, #0
 8002566:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002568:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <SystemInit+0xb0>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a0d      	ldr	r2, [pc, #52]	; (80025a4 <SystemInit+0xb0>)
 800256e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002572:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002574:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <SystemInit+0xb0>)
 8002576:	2200      	movs	r2, #0
 8002578:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800257a:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <SystemInit+0xb8>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <SystemInit+0xbc>)
 8002580:	4013      	ands	r3, r2
 8002582:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002586:	d202      	bcs.n	800258e <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002588:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <SystemInit+0xc0>)
 800258a:	2201      	movs	r2, #1
 800258c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800258e:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <SystemInit+0xac>)
 8002590:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002594:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002596:	bf00      	nop
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	e000ed00 	.word	0xe000ed00
 80025a4:	58024400 	.word	0x58024400
 80025a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80025ac:	5c001000 	.word	0x5c001000
 80025b0:	ffff0000 	.word	0xffff0000
 80025b4:	51008108 	.word	0x51008108

080025b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80025bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80025be:	e003      	b.n	80025c8 <LoopCopyDataInit>

080025c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80025c0:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80025c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80025c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80025c6:	3104      	adds	r1, #4

080025c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80025c8:	480b      	ldr	r0, [pc, #44]	; (80025f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80025ca:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80025cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80025ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80025d0:	d3f6      	bcc.n	80025c0 <CopyDataInit>
  ldr  r2, =_sbss
 80025d2:	4a0b      	ldr	r2, [pc, #44]	; (8002600 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80025d4:	e002      	b.n	80025dc <LoopFillZerobss>

080025d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80025d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80025d8:	f842 3b04 	str.w	r3, [r2], #4

080025dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80025dc:	4b09      	ldr	r3, [pc, #36]	; (8002604 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80025de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80025e0:	d3f9      	bcc.n	80025d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80025e2:	f7ff ff87 	bl	80024f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025e6:	f009 fd39 	bl	800c05c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025ea:	f7fe faa5 	bl	8000b38 <main>
  bx  lr    
 80025ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025f0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80025f4:	0800c160 	.word	0x0800c160
  ldr  r0, =_sdata
 80025f8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80025fc:	240005b8 	.word	0x240005b8
  ldr  r2, =_sbss
 8002600:	240005b8 	.word	0x240005b8
  ldr  r3, = _ebss
 8002604:	24000af0 	.word	0x24000af0

08002608 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002608:	e7fe      	b.n	8002608 <ADC3_IRQHandler>
	...

0800260c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002610:	2003      	movs	r0, #3
 8002612:	f001 fb55 	bl	8003cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002616:	f003 f931 	bl	800587c <HAL_RCC_GetSysClockFreq>
 800261a:	4601      	mov	r1, r0
 800261c:	4b13      	ldr	r3, [pc, #76]	; (800266c <HAL_Init+0x60>)
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	0a1b      	lsrs	r3, r3, #8
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	4a12      	ldr	r2, [pc, #72]	; (8002670 <HAL_Init+0x64>)
 8002628:	5cd3      	ldrb	r3, [r2, r3]
 800262a:	f003 031f 	and.w	r3, r3, #31
 800262e:	fa21 f303 	lsr.w	r3, r1, r3
 8002632:	4a10      	ldr	r2, [pc, #64]	; (8002674 <HAL_Init+0x68>)
 8002634:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002636:	4b0f      	ldr	r3, [pc, #60]	; (8002674 <HAL_Init+0x68>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	4b0c      	ldr	r3, [pc, #48]	; (800266c <HAL_Init+0x60>)
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	490b      	ldr	r1, [pc, #44]	; (8002670 <HAL_Init+0x64>)
 8002644:	5ccb      	ldrb	r3, [r1, r3]
 8002646:	f003 031f 	and.w	r3, r3, #31
 800264a:	fa22 f303 	lsr.w	r3, r2, r3
 800264e:	4a0a      	ldr	r2, [pc, #40]	; (8002678 <HAL_Init+0x6c>)
 8002650:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002652:	2000      	movs	r0, #0
 8002654:	f000 f812 	bl	800267c <HAL_InitTick>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_Init+0x56>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e002      	b.n	8002668 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002662:	f7ff fb89 	bl	8001d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	bd80      	pop	{r7, pc}
 800266c:	58024400 	.word	0x58024400
 8002670:	0800c140 	.word	0x0800c140
 8002674:	240005a8 	.word	0x240005a8
 8002678:	240005ac 	.word	0x240005ac

0800267c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002684:	4b15      	ldr	r3, [pc, #84]	; (80026dc <HAL_InitTick+0x60>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e021      	b.n	80026d4 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002690:	4b13      	ldr	r3, [pc, #76]	; (80026e0 <HAL_InitTick+0x64>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	4b11      	ldr	r3, [pc, #68]	; (80026dc <HAL_InitTick+0x60>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	4619      	mov	r1, r3
 800269a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800269e:	fbb3 f3f1 	udiv	r3, r3, r1
 80026a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a6:	4618      	mov	r0, r3
 80026a8:	f001 fb3d 	bl	8003d26 <HAL_SYSTICK_Config>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e00e      	b.n	80026d4 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b0f      	cmp	r3, #15
 80026ba:	d80a      	bhi.n	80026d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026bc:	2200      	movs	r2, #0
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	f04f 30ff 	mov.w	r0, #4294967295
 80026c4:	f001 fb07 	bl	8003cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026c8:	4a06      	ldr	r2, [pc, #24]	; (80026e4 <HAL_InitTick+0x68>)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	e000      	b.n	80026d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	240005b4 	.word	0x240005b4
 80026e0:	240005a8 	.word	0x240005a8
 80026e4:	240005b0 	.word	0x240005b0

080026e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026ec:	4b06      	ldr	r3, [pc, #24]	; (8002708 <HAL_IncTick+0x20>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_IncTick+0x24>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4413      	add	r3, r2
 80026f8:	4a04      	ldr	r2, [pc, #16]	; (800270c <HAL_IncTick+0x24>)
 80026fa:	6013      	str	r3, [r2, #0]
}
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	240005b4 	.word	0x240005b4
 800270c:	24000aec 	.word	0x24000aec

08002710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  return uwTick;
 8002714:	4b03      	ldr	r3, [pc, #12]	; (8002724 <HAL_GetTick+0x14>)
 8002716:	681b      	ldr	r3, [r3, #0]
}
 8002718:	4618      	mov	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	24000aec 	.word	0x24000aec

08002728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002730:	f7ff ffee 	bl	8002710 <HAL_GetTick>
 8002734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002740:	d005      	beq.n	800274e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002742:	4b09      	ldr	r3, [pc, #36]	; (8002768 <HAL_Delay+0x40>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4413      	add	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800274e:	bf00      	nop
 8002750:	f7ff ffde 	bl	8002710 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	429a      	cmp	r2, r3
 800275e:	d8f7      	bhi.n	8002750 <HAL_Delay+0x28>
  {
  }
}
 8002760:	bf00      	nop
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	240005b4 	.word	0x240005b4

0800276c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002770:	4b03      	ldr	r3, [pc, #12]	; (8002780 <HAL_GetREVID+0x14>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	0c1b      	lsrs	r3, r3, #16
}
 8002776:	4618      	mov	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	5c001000 	.word	0x5c001000

08002784 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800278e:	4b07      	ldr	r3, [pc, #28]	; (80027ac <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	43db      	mvns	r3, r3
 8002796:	401a      	ands	r2, r3
 8002798:	4904      	ldr	r1, [pc, #16]	; (80027ac <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	4313      	orrs	r3, r2
 800279e:	604b      	str	r3, [r1, #4]
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	58000400 	.word	0x58000400

080027b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	431a      	orrs	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	609a      	str	r2, [r3, #8]
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
 80027de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	609a      	str	r2, [r3, #8]
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002818:	b490      	push	{r4, r7}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	3360      	adds	r3, #96	; 0x60
 800282a:	461a      	mov	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002834:	6823      	ldr	r3, [r4, #0]
 8002836:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	430b      	orrs	r3, r1
 8002844:	4313      	orrs	r3, r2
 8002846:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002848:	bf00      	nop
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bc90      	pop	{r4, r7}
 8002850:	4770      	bx	lr

08002852 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002852:	b480      	push	{r7}
 8002854:	b085      	sub	sp, #20
 8002856:	af00      	add	r7, sp, #0
 8002858:	60f8      	str	r0, [r7, #12]
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	f003 031f 	and.w	r3, r3, #31
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	fa01 f303 	lsl.w	r3, r1, r3
 8002872:	431a      	orrs	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	611a      	str	r2, [r3, #16]
}
 8002878:	bf00      	nop
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002884:	b490      	push	{r4, r7}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	3360      	adds	r3, #96	; 0x60
 8002894:	461a      	mov	r2, r3
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800289e:	6823      	ldr	r3, [r4, #0]
 80028a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	6023      	str	r3, [r4, #0]
}
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc90      	pop	{r4, r7}
 80028b2:	4770      	bx	lr

080028b4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80028b4:	b490      	push	{r4, r7}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	3330      	adds	r3, #48	; 0x30
 80028c4:	461a      	mov	r2, r3
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	0a1b      	lsrs	r3, r3, #8
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	f003 030c 	and.w	r3, r3, #12
 80028d0:	4413      	add	r3, r2
 80028d2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80028d4:	6822      	ldr	r2, [r4, #0]
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	f003 031f 	and.w	r3, r3, #31
 80028dc:	211f      	movs	r1, #31
 80028de:	fa01 f303 	lsl.w	r3, r1, r3
 80028e2:	43db      	mvns	r3, r3
 80028e4:	401a      	ands	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	0e9b      	lsrs	r3, r3, #26
 80028ea:	f003 011f 	and.w	r1, r3, #31
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	f003 031f 	and.w	r3, r3, #31
 80028f4:	fa01 f303 	lsl.w	r3, r1, r3
 80028f8:	4313      	orrs	r3, r2
 80028fa:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80028fc:	bf00      	nop
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bc90      	pop	{r4, r7}
 8002904:	4770      	bx	lr

08002906 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002906:	b490      	push	{r4, r7}
 8002908:	b084      	sub	sp, #16
 800290a:	af00      	add	r7, sp, #0
 800290c:	60f8      	str	r0, [r7, #12]
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	3314      	adds	r3, #20
 8002916:	461a      	mov	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	0e5b      	lsrs	r3, r3, #25
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	4413      	add	r3, r2
 8002924:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002926:	6822      	ldr	r2, [r4, #0]
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	0d1b      	lsrs	r3, r3, #20
 800292c:	f003 031f 	and.w	r3, r3, #31
 8002930:	2107      	movs	r1, #7
 8002932:	fa01 f303 	lsl.w	r3, r1, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	401a      	ands	r2, r3
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	0d1b      	lsrs	r3, r3, #20
 800293e:	f003 031f 	and.w	r3, r3, #31
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	fa01 f303 	lsl.w	r3, r1, r3
 8002948:	4313      	orrs	r3, r2
 800294a:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800294c:	bf00      	nop
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bc90      	pop	{r4, r7}
 8002954:	4770      	bx	lr
	...

08002958 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002970:	43db      	mvns	r3, r3
 8002972:	401a      	ands	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f003 0318 	and.w	r3, r3, #24
 800297a:	4908      	ldr	r1, [pc, #32]	; (800299c <LL_ADC_SetChannelSingleDiff+0x44>)
 800297c:	40d9      	lsrs	r1, r3
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	400b      	ands	r3, r1
 8002982:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002986:	431a      	orrs	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800298e:	bf00      	nop
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	000fffff 	.word	0x000fffff

080029a0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 031f 	and.w	r3, r3, #31
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	4b04      	ldr	r3, [pc, #16]	; (80029dc <LL_ADC_DisableDeepPowerDown+0x20>)
 80029ca:	4013      	ands	r3, r2
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6093      	str	r3, [r2, #8]
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	5fffffc0 	.word	0x5fffffc0

080029e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029f4:	d101      	bne.n	80029fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029f6:	2301      	movs	r3, #1
 80029f8:	e000      	b.n	80029fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <LL_ADC_EnableInternalRegulator+0x24>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	6fffffc0 	.word	0x6fffffc0

08002a30 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a44:	d101      	bne.n	8002a4a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <LL_ADC_Enable+0x24>)
 8002a66:	4013      	ands	r3, r2
 8002a68:	f043 0201 	orr.w	r2, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	7fffffc0 	.word	0x7fffffc0

08002a80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <LL_ADC_IsEnabled+0x18>
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <LL_ADC_IsEnabled+0x1a>
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	4b05      	ldr	r3, [pc, #20]	; (8002acc <LL_ADC_REG_StartConversion+0x24>)
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	f043 0204 	orr.w	r2, r3, #4
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	7fffffc0 	.word	0x7fffffc0

08002ad0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d101      	bne.n	8002ae8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e000      	b.n	8002aea <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	2b08      	cmp	r3, #8
 8002b08:	d101      	bne.n	8002b0e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b1c:	b590      	push	{r4, r7, lr}
 8002b1e:	b089      	sub	sp, #36	; 0x24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b24:	2300      	movs	r3, #0
 8002b26:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e18e      	b.n	8002e54 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d109      	bne.n	8002b58 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7ff f931 	bl	8001dac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff ff3f 	bl	80029e0 <LL_ADC_IsDeepPowerDownEnabled>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d004      	beq.n	8002b72 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff ff25 	bl	80029bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff ff5a 	bl	8002a30 <LL_ADC_IsInternalRegulatorEnabled>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d113      	bne.n	8002baa <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff ff3e 	bl	8002a08 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002b8c:	4b9a      	ldr	r3, [pc, #616]	; (8002df8 <HAL_ADC_Init+0x2dc>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	099b      	lsrs	r3, r3, #6
 8002b92:	4a9a      	ldr	r2, [pc, #616]	; (8002dfc <HAL_ADC_Init+0x2e0>)
 8002b94:	fba2 2303 	umull	r2, r3, r2, r3
 8002b98:	099b      	lsrs	r3, r3, #6
 8002b9a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b9c:	e002      	b.n	8002ba4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f9      	bne.n	8002b9e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff ff3e 	bl	8002a30 <LL_ADC_IsInternalRegulatorEnabled>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10d      	bne.n	8002bd6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbe:	f043 0210 	orr.w	r2, r3, #16
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bca:	f043 0201 	orr.w	r2, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff ff78 	bl	8002ad0 <LL_ADC_REG_IsConversionOngoing>
 8002be0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be6:	f003 0310 	and.w	r3, r3, #16
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f040 8129 	bne.w	8002e42 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f040 8125 	bne.w	8002e42 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c00:	f043 0202 	orr.w	r2, r3, #2
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff ff37 	bl	8002a80 <LL_ADC_IsEnabled>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d136      	bne.n	8002c86 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a78      	ldr	r2, [pc, #480]	; (8002e00 <HAL_ADC_Init+0x2e4>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d004      	beq.n	8002c2c <HAL_ADC_Init+0x110>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a77      	ldr	r2, [pc, #476]	; (8002e04 <HAL_ADC_Init+0x2e8>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d10e      	bne.n	8002c4a <HAL_ADC_Init+0x12e>
 8002c2c:	4874      	ldr	r0, [pc, #464]	; (8002e00 <HAL_ADC_Init+0x2e4>)
 8002c2e:	f7ff ff27 	bl	8002a80 <LL_ADC_IsEnabled>
 8002c32:	4604      	mov	r4, r0
 8002c34:	4873      	ldr	r0, [pc, #460]	; (8002e04 <HAL_ADC_Init+0x2e8>)
 8002c36:	f7ff ff23 	bl	8002a80 <LL_ADC_IsEnabled>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	4323      	orrs	r3, r4
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	bf0c      	ite	eq
 8002c42:	2301      	moveq	r3, #1
 8002c44:	2300      	movne	r3, #0
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	e008      	b.n	8002c5c <HAL_ADC_Init+0x140>
 8002c4a:	486f      	ldr	r0, [pc, #444]	; (8002e08 <HAL_ADC_Init+0x2ec>)
 8002c4c:	f7ff ff18 	bl	8002a80 <LL_ADC_IsEnabled>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	bf0c      	ite	eq
 8002c56:	2301      	moveq	r3, #1
 8002c58:	2300      	movne	r3, #0
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d012      	beq.n	8002c86 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a66      	ldr	r2, [pc, #408]	; (8002e00 <HAL_ADC_Init+0x2e4>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d004      	beq.n	8002c74 <HAL_ADC_Init+0x158>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a65      	ldr	r2, [pc, #404]	; (8002e04 <HAL_ADC_Init+0x2e8>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d101      	bne.n	8002c78 <HAL_ADC_Init+0x15c>
 8002c74:	4a65      	ldr	r2, [pc, #404]	; (8002e0c <HAL_ADC_Init+0x2f0>)
 8002c76:	e000      	b.n	8002c7a <HAL_ADC_Init+0x15e>
 8002c78:	4a65      	ldr	r2, [pc, #404]	; (8002e10 <HAL_ADC_Init+0x2f4>)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4610      	mov	r0, r2
 8002c82:	f7ff fd95 	bl	80027b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002c86:	f7ff fd71 	bl	800276c <HAL_GetREVID>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d914      	bls.n	8002cbe <HAL_ADC_Init+0x1a2>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	2b10      	cmp	r3, #16
 8002c9a:	d110      	bne.n	8002cbe <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	7d5b      	ldrb	r3, [r3, #21]
 8002ca0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ca6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002cac:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	7f1b      	ldrb	r3, [r3, #28]
 8002cb2:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002cb4:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002cb6:	f043 030c 	orr.w	r3, r3, #12
 8002cba:	61bb      	str	r3, [r7, #24]
 8002cbc:	e00d      	b.n	8002cda <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	7d5b      	ldrb	r3, [r3, #21]
 8002cc2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002cc8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002cce:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	7f1b      	ldrb	r3, [r3, #28]
 8002cd4:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
    }


    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	7f1b      	ldrb	r3, [r3, #28]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d106      	bne.n	8002cf0 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	045b      	lsls	r3, r3, #17
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d009      	beq.n	8002d0c <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d04:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	4b40      	ldr	r3, [pc, #256]	; (8002e14 <HAL_ADC_Init+0x2f8>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6812      	ldr	r2, [r2, #0]
 8002d1a:	69b9      	ldr	r1, [r7, #24]
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fed3 	bl	8002ad0 <LL_ADC_REG_IsConversionOngoing>
 8002d2a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff fee0 	bl	8002af6 <LL_ADC_INJ_IsConversionOngoing>
 8002d36:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d14a      	bne.n	8002dd4 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d147      	bne.n	8002dd4 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	7d1b      	ldrb	r3, [r3, #20]
 8002d48:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68da      	ldr	r2, [r3, #12]
 8002d58:	4b2f      	ldr	r3, [pc, #188]	; (8002e18 <HAL_ADC_Init+0x2fc>)
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6812      	ldr	r2, [r2, #0]
 8002d60:	69b9      	ldr	r1, [r7, #24]
 8002d62:	430b      	orrs	r3, r1
 8002d64:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d11b      	bne.n	8002da8 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d74:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	691a      	ldr	r2, [r3, #16]
 8002d7c:	4b27      	ldr	r3, [pc, #156]	; (8002e1c <HAL_ADC_Init+0x300>)
 8002d7e:	4013      	ands	r3, r2
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d84:	3a01      	subs	r2, #1
 8002d86:	0411      	lsls	r1, r2, #16
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d8c:	4311      	orrs	r1, r2
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d92:	4311      	orrs	r1, r2
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f042 0201 	orr.w	r2, r2, #1
 8002da4:	611a      	str	r2, [r3, #16]
 8002da6:	e007      	b.n	8002db8 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691a      	ldr	r2, [r3, #16]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0201 	bic.w	r2, r2, #1
 8002db6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 fca6 	bl	8003720 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d121      	bne.n	8002e20 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	f023 010f 	bic.w	r1, r3, #15
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	1e5a      	subs	r2, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	631a      	str	r2, [r3, #48]	; 0x30
 8002df4:	e01c      	b.n	8002e30 <HAL_ADC_Init+0x314>
 8002df6:	bf00      	nop
 8002df8:	240005a8 	.word	0x240005a8
 8002dfc:	053e2d63 	.word	0x053e2d63
 8002e00:	40022000 	.word	0x40022000
 8002e04:	40022100 	.word	0x40022100
 8002e08:	58026000 	.word	0x58026000
 8002e0c:	40022300 	.word	0x40022300
 8002e10:	58026300 	.word	0x58026300
 8002e14:	fff0c003 	.word	0xfff0c003
 8002e18:	ffffbffc 	.word	0xffffbffc
 8002e1c:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 020f 	bic.w	r2, r2, #15
 8002e2e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e34:	f023 0303 	bic.w	r3, r3, #3
 8002e38:	f043 0201 	orr.w	r2, r3, #1
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	655a      	str	r2, [r3, #84]	; 0x54
 8002e40:	e007      	b.n	8002e52 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e46:	f043 0210 	orr.w	r2, r3, #16
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e52:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3724      	adds	r7, #36	; 0x24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd90      	pop	{r4, r7, pc}

08002e5c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a5c      	ldr	r2, [pc, #368]	; (8002fdc <HAL_ADC_Start+0x180>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d004      	beq.n	8002e78 <HAL_ADC_Start+0x1c>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a5b      	ldr	r2, [pc, #364]	; (8002fe0 <HAL_ADC_Start+0x184>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d101      	bne.n	8002e7c <HAL_ADC_Start+0x20>
 8002e78:	4b5a      	ldr	r3, [pc, #360]	; (8002fe4 <HAL_ADC_Start+0x188>)
 8002e7a:	e000      	b.n	8002e7e <HAL_ADC_Start+0x22>
 8002e7c:	4b5a      	ldr	r3, [pc, #360]	; (8002fe8 <HAL_ADC_Start+0x18c>)
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fd8e 	bl	80029a0 <LL_ADC_GetMultimode>
 8002e84:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff fe20 	bl	8002ad0 <LL_ADC_REG_IsConversionOngoing>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f040 809a 	bne.w	8002fcc <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d101      	bne.n	8002ea6 <HAL_ADC_Start+0x4a>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e095      	b.n	8002fd2 <HAL_ADC_Start+0x176>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fbb2 	bl	8003618 <ADC_Enable>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002eb8:	7dfb      	ldrb	r3, [r7, #23]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f040 8081 	bne.w	8002fc2 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ec4:	4b49      	ldr	r3, [pc, #292]	; (8002fec <HAL_ADC_Start+0x190>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a42      	ldr	r2, [pc, #264]	; (8002fe0 <HAL_ADC_Start+0x184>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d002      	beq.n	8002ee0 <HAL_ADC_Start+0x84>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	e000      	b.n	8002ee2 <HAL_ADC_Start+0x86>
 8002ee0:	4b3e      	ldr	r3, [pc, #248]	; (8002fdc <HAL_ADC_Start+0x180>)
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6812      	ldr	r2, [r2, #0]
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d002      	beq.n	8002ef0 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d105      	bne.n	8002efc <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f08:	d106      	bne.n	8002f18 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0e:	f023 0206 	bic.w	r2, r3, #6
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	659a      	str	r2, [r3, #88]	; 0x58
 8002f16:	e002      	b.n	8002f1e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	221c      	movs	r2, #28
 8002f24:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a2b      	ldr	r2, [pc, #172]	; (8002fe0 <HAL_ADC_Start+0x184>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d002      	beq.n	8002f3e <HAL_ADC_Start+0xe2>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	e000      	b.n	8002f40 <HAL_ADC_Start+0xe4>
 8002f3e:	4b27      	ldr	r3, [pc, #156]	; (8002fdc <HAL_ADC_Start+0x180>)
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6812      	ldr	r2, [r2, #0]
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d008      	beq.n	8002f5a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d005      	beq.n	8002f5a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	2b05      	cmp	r3, #5
 8002f52:	d002      	beq.n	8002f5a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	2b09      	cmp	r3, #9
 8002f58:	d114      	bne.n	8002f84 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d007      	beq.n	8002f78 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff fd93 	bl	8002aa8 <LL_ADC_REG_StartConversion>
 8002f82:	e025      	b.n	8002fd0 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f88:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a12      	ldr	r2, [pc, #72]	; (8002fe0 <HAL_ADC_Start+0x184>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d002      	beq.n	8002fa0 <HAL_ADC_Start+0x144>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	e000      	b.n	8002fa2 <HAL_ADC_Start+0x146>
 8002fa0:	4b0e      	ldr	r3, [pc, #56]	; (8002fdc <HAL_ADC_Start+0x180>)
 8002fa2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00f      	beq.n	8002fd0 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002fb8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	655a      	str	r2, [r3, #84]	; 0x54
 8002fc0:	e006      	b.n	8002fd0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002fca:	e001      	b.n	8002fd0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40022000 	.word	0x40022000
 8002fe0:	40022100 	.word	0x40022100
 8002fe4:	40022300 	.word	0x40022300
 8002fe8:	58026300 	.word	0x58026300
 8002fec:	fffff0fe 	.word	0xfffff0fe

08002ff0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ff0:	b590      	push	{r4, r7, lr}
 8002ff2:	b099      	sub	sp, #100	; 0x64
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003000:	2300      	movs	r3, #0
 8003002:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	4a99      	ldr	r2, [pc, #612]	; (8003270 <HAL_ADC_ConfigChannel+0x280>)
 800300a:	4293      	cmp	r3, r2
      assert_param(IS_ADC3_DIFF_CHANNEL(sConfig->Channel));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003012:	2b01      	cmp	r3, #1
 8003014:	d101      	bne.n	800301a <HAL_ADC_ConfigChannel+0x2a>
 8003016:	2302      	movs	r3, #2
 8003018:	e2e6      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x5f8>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff fd52 	bl	8002ad0 <LL_ADC_REG_IsConversionOngoing>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	f040 82cb 	bne.w	80035ca <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800303c:	2b00      	cmp	r3, #0
 800303e:	d108      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x62>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	0e9b      	lsrs	r3, r3, #26
 8003046:	f003 031f 	and.w	r3, r3, #31
 800304a:	2201      	movs	r2, #1
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	e00f      	b.n	8003072 <HAL_ADC_ConfigChannel+0x82>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800305a:	fa93 f3a3 	rbit	r3, r3
 800305e:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003062:	fab3 f383 	clz	r3, r3
 8003066:	b2db      	uxtb	r3, r3
 8003068:	f003 031f 	and.w	r3, r3, #31
 800306c:	2201      	movs	r2, #1
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6812      	ldr	r2, [r2, #0]
 8003076:	69d1      	ldr	r1, [r2, #28]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	430b      	orrs	r3, r1
 800307e:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6818      	ldr	r0, [r3, #0]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	6859      	ldr	r1, [r3, #4]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	461a      	mov	r2, r3
 800308e:	f7ff fc11 	bl	80028b4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff fd1a 	bl	8002ad0 <LL_ADC_REG_IsConversionOngoing>
 800309c:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff fd27 	bl	8002af6 <LL_ADC_INJ_IsConversionOngoing>
 80030a8:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f040 80b3 	bne.w	8003218 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f040 80af 	bne.w	8003218 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	6819      	ldr	r1, [r3, #0]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	461a      	mov	r2, r3
 80030c8:	f7ff fc1d 	bl	8002906 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80030cc:	4b69      	ldr	r3, [pc, #420]	; (8003274 <HAL_ADC_ConfigChannel+0x284>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80030d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030d8:	d10b      	bne.n	80030f2 <HAL_ADC_ConfigChannel+0x102>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	695a      	ldr	r2, [r3, #20]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	089b      	lsrs	r3, r3, #2
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	e01d      	b.n	800312e <HAL_ADC_ConfigChannel+0x13e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10b      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x128>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	695a      	ldr	r2, [r3, #20]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	089b      	lsrs	r3, r3, #2
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	e00a      	b.n	800312e <HAL_ADC_ConfigChannel+0x13e>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	695a      	ldr	r2, [r3, #20]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	089b      	lsrs	r3, r3, #2
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	2b04      	cmp	r3, #4
 8003136:	d027      	beq.n	8003188 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6818      	ldr	r0, [r3, #0]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	6919      	ldr	r1, [r3, #16]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003146:	f7ff fb67 	bl	8002818 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6818      	ldr	r0, [r3, #0]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	6919      	ldr	r1, [r3, #16]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	7e5b      	ldrb	r3, [r3, #25]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d102      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x170>
 800315a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800315e:	e000      	b.n	8003162 <HAL_ADC_ConfigChannel+0x172>
 8003160:	2300      	movs	r3, #0
 8003162:	461a      	mov	r2, r3
 8003164:	f7ff fb8e 	bl	8002884 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	6919      	ldr	r1, [r3, #16]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	7e1b      	ldrb	r3, [r3, #24]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d102      	bne.n	800317e <HAL_ADC_ConfigChannel+0x18e>
 8003178:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800317c:	e000      	b.n	8003180 <HAL_ADC_ConfigChannel+0x190>
 800317e:	2300      	movs	r3, #0
 8003180:	461a      	mov	r2, r3
 8003182:	f7ff fb66 	bl	8002852 <LL_ADC_SetDataRightShift>
 8003186:	e047      	b.n	8003218 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800318e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	069b      	lsls	r3, r3, #26
 8003198:	429a      	cmp	r2, r3
 800319a:	d107      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031aa:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	069b      	lsls	r3, r3, #26
 80031bc:	429a      	cmp	r2, r3
 80031be:	d107      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031ce:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	069b      	lsls	r3, r3, #26
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d107      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80031f2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	069b      	lsls	r3, r3, #26
 8003204:	429a      	cmp	r2, r3
 8003206:	d107      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003216:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff fc2f 	bl	8002a80 <LL_ADC_IsEnabled>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	f040 81d9 	bne.w	80035dc <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6818      	ldr	r0, [r3, #0]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	6819      	ldr	r1, [r3, #0]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	461a      	mov	r2, r3
 8003238:	f7ff fb8e 	bl	8002958 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	4a0b      	ldr	r2, [pc, #44]	; (8003270 <HAL_ADC_ConfigChannel+0x280>)
 8003242:	4293      	cmp	r3, r2
 8003244:	f040 8101 	bne.w	800344a <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10f      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x288>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	0e9b      	lsrs	r3, r3, #26
 800325e:	3301      	adds	r3, #1
 8003260:	f003 031f 	and.w	r3, r3, #31
 8003264:	2b09      	cmp	r3, #9
 8003266:	bf94      	ite	ls
 8003268:	2301      	movls	r3, #1
 800326a:	2300      	movhi	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	e016      	b.n	800329e <HAL_ADC_ConfigChannel+0x2ae>
 8003270:	47ff0000 	.word	0x47ff0000
 8003274:	5c001000 	.word	0x5c001000
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003280:	fa93 f3a3 	rbit	r3, r3
 8003284:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003288:	fab3 f383 	clz	r3, r3
 800328c:	b2db      	uxtb	r3, r3
 800328e:	3301      	adds	r3, #1
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	2b09      	cmp	r3, #9
 8003296:	bf94      	ite	ls
 8003298:	2301      	movls	r3, #1
 800329a:	2300      	movhi	r3, #0
 800329c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d064      	beq.n	800336c <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d107      	bne.n	80032be <HAL_ADC_ConfigChannel+0x2ce>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	0e9b      	lsrs	r3, r3, #26
 80032b4:	3301      	adds	r3, #1
 80032b6:	069b      	lsls	r3, r3, #26
 80032b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032bc:	e00e      	b.n	80032dc <HAL_ADC_ConfigChannel+0x2ec>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c6:	fa93 f3a3 	rbit	r3, r3
 80032ca:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80032cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ce:	fab3 f383 	clz	r3, r3
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	3301      	adds	r3, #1
 80032d6:	069b      	lsls	r3, r3, #26
 80032d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d109      	bne.n	80032fc <HAL_ADC_ConfigChannel+0x30c>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	0e9b      	lsrs	r3, r3, #26
 80032ee:	3301      	adds	r3, #1
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	2101      	movs	r1, #1
 80032f6:	fa01 f303 	lsl.w	r3, r1, r3
 80032fa:	e010      	b.n	800331e <HAL_ADC_ConfigChannel+0x32e>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003304:	fa93 f3a3 	rbit	r3, r3
 8003308:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800330a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330c:	fab3 f383 	clz	r3, r3
 8003310:	b2db      	uxtb	r3, r3
 8003312:	3301      	adds	r3, #1
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	2101      	movs	r1, #1
 800331a:	fa01 f303 	lsl.w	r3, r1, r3
 800331e:	ea42 0103 	orr.w	r1, r2, r3
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10a      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x354>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	0e9b      	lsrs	r3, r3, #26
 8003334:	3301      	adds	r3, #1
 8003336:	f003 021f 	and.w	r2, r3, #31
 800333a:	4613      	mov	r3, r2
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	4413      	add	r3, r2
 8003340:	051b      	lsls	r3, r3, #20
 8003342:	e011      	b.n	8003368 <HAL_ADC_ConfigChannel+0x378>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334c:	fa93 f3a3 	rbit	r3, r3
 8003350:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	fab3 f383 	clz	r3, r3
 8003358:	b2db      	uxtb	r3, r3
 800335a:	3301      	adds	r3, #1
 800335c:	f003 021f 	and.w	r2, r3, #31
 8003360:	4613      	mov	r3, r2
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	4413      	add	r3, r2
 8003366:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003368:	430b      	orrs	r3, r1
 800336a:	e069      	b.n	8003440 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003374:	2b00      	cmp	r3, #0
 8003376:	d107      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x398>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	0e9b      	lsrs	r3, r3, #26
 800337e:	3301      	adds	r3, #1
 8003380:	069b      	lsls	r3, r3, #26
 8003382:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003386:	e00e      	b.n	80033a6 <HAL_ADC_ConfigChannel+0x3b6>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	fa93 f3a3 	rbit	r3, r3
 8003394:	61fb      	str	r3, [r7, #28]
  return result;
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	fab3 f383 	clz	r3, r3
 800339c:	b2db      	uxtb	r3, r3
 800339e:	3301      	adds	r3, #1
 80033a0:	069b      	lsls	r3, r3, #26
 80033a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d109      	bne.n	80033c6 <HAL_ADC_ConfigChannel+0x3d6>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	0e9b      	lsrs	r3, r3, #26
 80033b8:	3301      	adds	r3, #1
 80033ba:	f003 031f 	and.w	r3, r3, #31
 80033be:	2101      	movs	r1, #1
 80033c0:	fa01 f303 	lsl.w	r3, r1, r3
 80033c4:	e010      	b.n	80033e8 <HAL_ADC_ConfigChannel+0x3f8>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	fa93 f3a3 	rbit	r3, r3
 80033d2:	617b      	str	r3, [r7, #20]
  return result;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	fab3 f383 	clz	r3, r3
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	3301      	adds	r3, #1
 80033de:	f003 031f 	and.w	r3, r3, #31
 80033e2:	2101      	movs	r1, #1
 80033e4:	fa01 f303 	lsl.w	r3, r1, r3
 80033e8:	ea42 0103 	orr.w	r1, r2, r3
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10d      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x424>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	0e9b      	lsrs	r3, r3, #26
 80033fe:	3301      	adds	r3, #1
 8003400:	f003 021f 	and.w	r2, r3, #31
 8003404:	4613      	mov	r3, r2
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	4413      	add	r3, r2
 800340a:	3b1e      	subs	r3, #30
 800340c:	051b      	lsls	r3, r3, #20
 800340e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003412:	e014      	b.n	800343e <HAL_ADC_ConfigChannel+0x44e>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	fa93 f3a3 	rbit	r3, r3
 8003420:	60fb      	str	r3, [r7, #12]
  return result;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	fab3 f383 	clz	r3, r3
 8003428:	b2db      	uxtb	r3, r3
 800342a:	3301      	adds	r3, #1
 800342c:	f003 021f 	and.w	r2, r3, #31
 8003430:	4613      	mov	r3, r2
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	4413      	add	r3, r2
 8003436:	3b1e      	subs	r3, #30
 8003438:	051b      	lsls	r3, r3, #20
 800343a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800343e:	430b      	orrs	r3, r1
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	6892      	ldr	r2, [r2, #8]
 8003444:	4619      	mov	r1, r3
 8003446:	f7ff fa5e 	bl	8002906 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	f280 80c4 	bge.w	80035dc <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a65      	ldr	r2, [pc, #404]	; (80035f0 <HAL_ADC_ConfigChannel+0x600>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d004      	beq.n	8003468 <HAL_ADC_ConfigChannel+0x478>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a64      	ldr	r2, [pc, #400]	; (80035f4 <HAL_ADC_ConfigChannel+0x604>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d101      	bne.n	800346c <HAL_ADC_ConfigChannel+0x47c>
 8003468:	4b63      	ldr	r3, [pc, #396]	; (80035f8 <HAL_ADC_ConfigChannel+0x608>)
 800346a:	e000      	b.n	800346e <HAL_ADC_ConfigChannel+0x47e>
 800346c:	4b63      	ldr	r3, [pc, #396]	; (80035fc <HAL_ADC_ConfigChannel+0x60c>)
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff f9c4 	bl	80027fc <LL_ADC_GetCommonPathInternalCh>
 8003474:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a5d      	ldr	r2, [pc, #372]	; (80035f0 <HAL_ADC_ConfigChannel+0x600>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d004      	beq.n	800348a <HAL_ADC_ConfigChannel+0x49a>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a5b      	ldr	r2, [pc, #364]	; (80035f4 <HAL_ADC_ConfigChannel+0x604>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d10e      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x4b8>
 800348a:	4859      	ldr	r0, [pc, #356]	; (80035f0 <HAL_ADC_ConfigChannel+0x600>)
 800348c:	f7ff faf8 	bl	8002a80 <LL_ADC_IsEnabled>
 8003490:	4604      	mov	r4, r0
 8003492:	4858      	ldr	r0, [pc, #352]	; (80035f4 <HAL_ADC_ConfigChannel+0x604>)
 8003494:	f7ff faf4 	bl	8002a80 <LL_ADC_IsEnabled>
 8003498:	4603      	mov	r3, r0
 800349a:	4323      	orrs	r3, r4
 800349c:	2b00      	cmp	r3, #0
 800349e:	bf0c      	ite	eq
 80034a0:	2301      	moveq	r3, #1
 80034a2:	2300      	movne	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	e008      	b.n	80034ba <HAL_ADC_ConfigChannel+0x4ca>
 80034a8:	4855      	ldr	r0, [pc, #340]	; (8003600 <HAL_ADC_ConfigChannel+0x610>)
 80034aa:	f7ff fae9 	bl	8002a80 <LL_ADC_IsEnabled>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	bf0c      	ite	eq
 80034b4:	2301      	moveq	r3, #1
 80034b6:	2300      	movne	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d07b      	beq.n	80035b6 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a50      	ldr	r2, [pc, #320]	; (8003604 <HAL_ADC_ConfigChannel+0x614>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d12e      	bne.n	8003526 <HAL_ADC_ConfigChannel+0x536>
 80034c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d129      	bne.n	8003526 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a4a      	ldr	r2, [pc, #296]	; (8003600 <HAL_ADC_ConfigChannel+0x610>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d17f      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a43      	ldr	r2, [pc, #268]	; (80035f0 <HAL_ADC_ConfigChannel+0x600>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d004      	beq.n	80034f0 <HAL_ADC_ConfigChannel+0x500>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a42      	ldr	r2, [pc, #264]	; (80035f4 <HAL_ADC_ConfigChannel+0x604>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d101      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x504>
 80034f0:	4a41      	ldr	r2, [pc, #260]	; (80035f8 <HAL_ADC_ConfigChannel+0x608>)
 80034f2:	e000      	b.n	80034f6 <HAL_ADC_ConfigChannel+0x506>
 80034f4:	4a41      	ldr	r2, [pc, #260]	; (80035fc <HAL_ADC_ConfigChannel+0x60c>)
 80034f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034fc:	4619      	mov	r1, r3
 80034fe:	4610      	mov	r0, r2
 8003500:	f7ff f969 	bl	80027d6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003504:	4b40      	ldr	r3, [pc, #256]	; (8003608 <HAL_ADC_ConfigChannel+0x618>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	099b      	lsrs	r3, r3, #6
 800350a:	4a40      	ldr	r2, [pc, #256]	; (800360c <HAL_ADC_ConfigChannel+0x61c>)
 800350c:	fba2 2303 	umull	r2, r3, r2, r3
 8003510:	099b      	lsrs	r3, r3, #6
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8003516:	e002      	b.n	800351e <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	3b01      	subs	r3, #1
 800351c:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1f9      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003524:	e05a      	b.n	80035dc <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a39      	ldr	r2, [pc, #228]	; (8003610 <HAL_ADC_ConfigChannel+0x620>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d11e      	bne.n	800356e <HAL_ADC_ConfigChannel+0x57e>
 8003530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003532:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d119      	bne.n	800356e <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a30      	ldr	r2, [pc, #192]	; (8003600 <HAL_ADC_ConfigChannel+0x610>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d14b      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a29      	ldr	r2, [pc, #164]	; (80035f0 <HAL_ADC_ConfigChannel+0x600>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d004      	beq.n	8003558 <HAL_ADC_ConfigChannel+0x568>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a28      	ldr	r2, [pc, #160]	; (80035f4 <HAL_ADC_ConfigChannel+0x604>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d101      	bne.n	800355c <HAL_ADC_ConfigChannel+0x56c>
 8003558:	4a27      	ldr	r2, [pc, #156]	; (80035f8 <HAL_ADC_ConfigChannel+0x608>)
 800355a:	e000      	b.n	800355e <HAL_ADC_ConfigChannel+0x56e>
 800355c:	4a27      	ldr	r2, [pc, #156]	; (80035fc <HAL_ADC_ConfigChannel+0x60c>)
 800355e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003560:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003564:	4619      	mov	r1, r3
 8003566:	4610      	mov	r0, r2
 8003568:	f7ff f935 	bl	80027d6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800356c:	e036      	b.n	80035dc <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a28      	ldr	r2, [pc, #160]	; (8003614 <HAL_ADC_ConfigChannel+0x624>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d131      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x5ec>
 8003578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800357a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d12c      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a1e      	ldr	r2, [pc, #120]	; (8003600 <HAL_ADC_ConfigChannel+0x610>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d127      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a17      	ldr	r2, [pc, #92]	; (80035f0 <HAL_ADC_ConfigChannel+0x600>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d004      	beq.n	80035a0 <HAL_ADC_ConfigChannel+0x5b0>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a16      	ldr	r2, [pc, #88]	; (80035f4 <HAL_ADC_ConfigChannel+0x604>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d101      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x5b4>
 80035a0:	4a15      	ldr	r2, [pc, #84]	; (80035f8 <HAL_ADC_ConfigChannel+0x608>)
 80035a2:	e000      	b.n	80035a6 <HAL_ADC_ConfigChannel+0x5b6>
 80035a4:	4a15      	ldr	r2, [pc, #84]	; (80035fc <HAL_ADC_ConfigChannel+0x60c>)
 80035a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035ac:	4619      	mov	r1, r3
 80035ae:	4610      	mov	r0, r2
 80035b0:	f7ff f911 	bl	80027d6 <LL_ADC_SetCommonPathInternalCh>
 80035b4:	e012      	b.n	80035dc <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ba:	f043 0220 	orr.w	r2, r3, #32
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80035c8:	e008      	b.n	80035dc <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ce:	f043 0220 	orr.w	r2, r3, #32
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80035e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3764      	adds	r7, #100	; 0x64
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd90      	pop	{r4, r7, pc}
 80035f0:	40022000 	.word	0x40022000
 80035f4:	40022100 	.word	0x40022100
 80035f8:	40022300 	.word	0x40022300
 80035fc:	58026300 	.word	0x58026300
 8003600:	58026000 	.word	0x58026000
 8003604:	cb840000 	.word	0xcb840000
 8003608:	240005a8 	.word	0x240005a8
 800360c:	053e2d63 	.word	0x053e2d63
 8003610:	c7520000 	.word	0xc7520000
 8003614:	cfb80000 	.word	0xcfb80000

08003618 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff fa2b 	bl	8002a80 <LL_ADC_IsEnabled>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d167      	bne.n	8003700 <ADC_Enable+0xe8>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	4b35      	ldr	r3, [pc, #212]	; (800370c <ADC_Enable+0xf4>)
 8003638:	4013      	ands	r3, r2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00d      	beq.n	800365a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003642:	f043 0210 	orr.w	r2, r3, #16
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364e:	f043 0201 	orr.w	r2, r3, #1
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e053      	b.n	8003702 <ADC_Enable+0xea>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff f9fa 	bl	8002a58 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003664:	f7ff f854 	bl	8002710 <HAL_GetTick>
 8003668:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a28      	ldr	r2, [pc, #160]	; (8003710 <ADC_Enable+0xf8>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d004      	beq.n	800367e <ADC_Enable+0x66>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a26      	ldr	r2, [pc, #152]	; (8003714 <ADC_Enable+0xfc>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d101      	bne.n	8003682 <ADC_Enable+0x6a>
 800367e:	4b26      	ldr	r3, [pc, #152]	; (8003718 <ADC_Enable+0x100>)
 8003680:	e000      	b.n	8003684 <ADC_Enable+0x6c>
 8003682:	4b26      	ldr	r3, [pc, #152]	; (800371c <ADC_Enable+0x104>)
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff f98b 	bl	80029a0 <LL_ADC_GetMultimode>
 800368a:	60b8      	str	r0, [r7, #8]
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a20      	ldr	r2, [pc, #128]	; (8003714 <ADC_Enable+0xfc>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d002      	beq.n	800369c <ADC_Enable+0x84>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	e000      	b.n	800369e <ADC_Enable+0x86>
 800369c:	4b1c      	ldr	r3, [pc, #112]	; (8003710 <ADC_Enable+0xf8>)
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6812      	ldr	r2, [r2, #0]
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d025      	beq.n	80036f2 <ADC_Enable+0xda>
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d129      	bne.n	8003700 <ADC_Enable+0xe8>
       )
    {
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036ac:	e021      	b.n	80036f2 <ADC_Enable+0xda>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff f9e4 	bl	8002a80 <LL_ADC_IsEnabled>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d104      	bne.n	80036c8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff f9c8 	bl	8002a58 <LL_ADC_Enable>
        }

        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036c8:	f7ff f822 	bl	8002710 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d90d      	bls.n	80036f2 <ADC_Enable+0xda>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036da:	f043 0210 	orr.w	r2, r3, #16
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e6:	f043 0201 	orr.w	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e007      	b.n	8003702 <ADC_Enable+0xea>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d1d6      	bne.n	80036ae <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	8000003f 	.word	0x8000003f
 8003710:	40022000 	.word	0x40022000
 8003714:	40022100 	.word	0x40022100
 8003718:	40022300 	.word	0x40022300
 800371c:	58026300 	.word	0x58026300

08003720 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a74      	ldr	r2, [pc, #464]	; (8003900 <ADC_ConfigureBoostMode+0x1e0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d004      	beq.n	800373c <ADC_ConfigureBoostMode+0x1c>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a73      	ldr	r2, [pc, #460]	; (8003904 <ADC_ConfigureBoostMode+0x1e4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d109      	bne.n	8003750 <ADC_ConfigureBoostMode+0x30>
 800373c:	4b72      	ldr	r3, [pc, #456]	; (8003908 <ADC_ConfigureBoostMode+0x1e8>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003744:	2b00      	cmp	r3, #0
 8003746:	bf14      	ite	ne
 8003748:	2301      	movne	r3, #1
 800374a:	2300      	moveq	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	e008      	b.n	8003762 <ADC_ConfigureBoostMode+0x42>
 8003750:	4b6e      	ldr	r3, [pc, #440]	; (800390c <ADC_ConfigureBoostMode+0x1ec>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003758:	2b00      	cmp	r3, #0
 800375a:	bf14      	ite	ne
 800375c:	2301      	movne	r3, #1
 800375e:	2300      	moveq	r3, #0
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d01a      	beq.n	800379c <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003766:	f002 f9fb 	bl	8005b60 <HAL_RCC_GetHCLKFreq>
 800376a:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003774:	d006      	beq.n	8003784 <ADC_ConfigureBoostMode+0x64>
 8003776:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800377a:	d00b      	beq.n	8003794 <ADC_ConfigureBoostMode+0x74>
 800377c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003780:	d000      	beq.n	8003784 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8003782:	e05d      	b.n	8003840 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	0c1b      	lsrs	r3, r3, #16
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003790:	60fb      	str	r3, [r7, #12]
        break;
 8003792:	e055      	b.n	8003840 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	089b      	lsrs	r3, r3, #2
 8003798:	60fb      	str	r3, [r7, #12]
        break;
 800379a:	e051      	b.n	8003840 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800379c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80037a0:	f003 f916 	bl	80069d0 <HAL_RCCEx_GetPeriphCLKFreq>
 80037a4:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80037ae:	d02a      	beq.n	8003806 <ADC_ConfigureBoostMode+0xe6>
 80037b0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80037b4:	d813      	bhi.n	80037de <ADC_ConfigureBoostMode+0xbe>
 80037b6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80037ba:	d024      	beq.n	8003806 <ADC_ConfigureBoostMode+0xe6>
 80037bc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80037c0:	d806      	bhi.n	80037d0 <ADC_ConfigureBoostMode+0xb0>
 80037c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037c6:	d01e      	beq.n	8003806 <ADC_ConfigureBoostMode+0xe6>
 80037c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80037cc:	d01b      	beq.n	8003806 <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 80037ce:	e037      	b.n	8003840 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80037d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037d4:	d017      	beq.n	8003806 <ADC_ConfigureBoostMode+0xe6>
 80037d6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80037da:	d014      	beq.n	8003806 <ADC_ConfigureBoostMode+0xe6>
        break;
 80037dc:	e030      	b.n	8003840 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80037de:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80037e2:	d021      	beq.n	8003828 <ADC_ConfigureBoostMode+0x108>
 80037e4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80037e8:	d806      	bhi.n	80037f8 <ADC_ConfigureBoostMode+0xd8>
 80037ea:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80037ee:	d013      	beq.n	8003818 <ADC_ConfigureBoostMode+0xf8>
 80037f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037f4:	d014      	beq.n	8003820 <ADC_ConfigureBoostMode+0x100>
        break;
 80037f6:	e023      	b.n	8003840 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80037f8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80037fc:	d018      	beq.n	8003830 <ADC_ConfigureBoostMode+0x110>
 80037fe:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003802:	d019      	beq.n	8003838 <ADC_ConfigureBoostMode+0x118>
        break;
 8003804:	e01c      	b.n	8003840 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	0c9b      	lsrs	r3, r3, #18
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	fbb2 f3f3 	udiv	r3, r2, r3
 8003814:	60fb      	str	r3, [r7, #12]
        break;
 8003816:	e013      	b.n	8003840 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	091b      	lsrs	r3, r3, #4
 800381c:	60fb      	str	r3, [r7, #12]
      break;
 800381e:	e00f      	b.n	8003840 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	60fb      	str	r3, [r7, #12]
        break;
 8003826:	e00b      	b.n	8003840 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	099b      	lsrs	r3, r3, #6
 800382c:	60fb      	str	r3, [r7, #12]
        break;
 800382e:	e007      	b.n	8003840 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	09db      	lsrs	r3, r3, #7
 8003834:	60fb      	str	r3, [r7, #12]
        break;
 8003836:	e003      	b.n	8003840 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	0a1b      	lsrs	r3, r3, #8
 800383c:	60fb      	str	r3, [r7, #12]
        break;
 800383e:	bf00      	nop
    }
  }

  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003840:	f7fe ff94 	bl	800276c <HAL_GetREVID>
 8003844:	4602      	mov	r2, r0
 8003846:	f241 0303 	movw	r3, #4099	; 0x1003
 800384a:	429a      	cmp	r2, r3
 800384c:	d815      	bhi.n	800387a <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4a2f      	ldr	r2, [pc, #188]	; (8003910 <ADC_ConfigureBoostMode+0x1f0>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d908      	bls.n	8003868 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003864:	609a      	str	r2, [r3, #8]
    else /* if(freq > 25000000UL) */
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
}
 8003866:	e047      	b.n	80038f8 <ADC_ConfigureBoostMode+0x1d8>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003876:	609a      	str	r2, [r3, #8]
}
 8003878:	e03e      	b.n	80038f8 <ADC_ConfigureBoostMode+0x1d8>
    freq /= 2U; /* divider by 2 for Rev.V */
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	085b      	lsrs	r3, r3, #1
 800387e:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4a24      	ldr	r2, [pc, #144]	; (8003914 <ADC_ConfigureBoostMode+0x1f4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d808      	bhi.n	800389a <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689a      	ldr	r2, [r3, #8]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003896:	609a      	str	r2, [r3, #8]
}
 8003898:	e02e      	b.n	80038f8 <ADC_ConfigureBoostMode+0x1d8>
    else if((freq > 6250000UL) && (freq <= 12500000UL))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4a1d      	ldr	r2, [pc, #116]	; (8003914 <ADC_ConfigureBoostMode+0x1f4>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d90e      	bls.n	80038c0 <ADC_ConfigureBoostMode+0x1a0>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4a1c      	ldr	r2, [pc, #112]	; (8003918 <ADC_ConfigureBoostMode+0x1f8>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d80a      	bhi.n	80038c0 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038bc:	609a      	str	r2, [r3, #8]
 80038be:	e01b      	b.n	80038f8 <ADC_ConfigureBoostMode+0x1d8>
    else if((freq > 12500000UL) && (freq <= 25000000UL))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4a15      	ldr	r2, [pc, #84]	; (8003918 <ADC_ConfigureBoostMode+0x1f8>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d90e      	bls.n	80038e6 <ADC_ConfigureBoostMode+0x1c6>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4a14      	ldr	r2, [pc, #80]	; (800391c <ADC_ConfigureBoostMode+0x1fc>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d80a      	bhi.n	80038e6 <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e2:	609a      	str	r2, [r3, #8]
 80038e4:	e008      	b.n	80038f8 <ADC_ConfigureBoostMode+0x1d8>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689a      	ldr	r2, [r3, #8]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80038f4:	609a      	str	r2, [r3, #8]
}
 80038f6:	e7ff      	b.n	80038f8 <ADC_ConfigureBoostMode+0x1d8>
 80038f8:	bf00      	nop
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40022000 	.word	0x40022000
 8003904:	40022100 	.word	0x40022100
 8003908:	40022300 	.word	0x40022300
 800390c:	58026300 	.word	0x58026300
 8003910:	01312d00 	.word	0x01312d00
 8003914:	005f5e10 	.word	0x005f5e10
 8003918:	00bebc20 	.word	0x00bebc20
 800391c:	017d7840 	.word	0x017d7840

08003920 <LL_ADC_IsEnabled>:
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <LL_ADC_IsEnabled+0x18>
 8003934:	2301      	movs	r3, #1
 8003936:	e000      	b.n	800393a <LL_ADC_IsEnabled+0x1a>
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <LL_ADC_REG_IsConversionOngoing>:
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	2b04      	cmp	r3, #4
 8003958:	d101      	bne.n	800395e <LL_ADC_REG_IsConversionOngoing+0x18>
 800395a:	2301      	movs	r3, #1
 800395c:	e000      	b.n	8003960 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800396c:	b590      	push	{r4, r7, lr}
 800396e:	b09f      	sub	sp, #124	; 0x7c
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003982:	2b01      	cmp	r3, #1
 8003984:	d101      	bne.n	800398a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003986:	2302      	movs	r3, #2
 8003988:	e0ba      	b.n	8003b00 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a5c      	ldr	r2, [pc, #368]	; (8003b08 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d102      	bne.n	80039a2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800399c:	4b5b      	ldr	r3, [pc, #364]	; (8003b0c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 800399e:	60bb      	str	r3, [r7, #8]
 80039a0:	e001      	b.n	80039a6 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80039a2:	2300      	movs	r3, #0
 80039a4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10b      	bne.n	80039c4 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b0:	f043 0220 	orr.w	r2, r3, #32
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e09d      	b.n	8003b00 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff ffbd 	bl	8003946 <LL_ADC_REG_IsConversionOngoing>
 80039cc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7ff ffb7 	bl	8003946 <LL_ADC_REG_IsConversionOngoing>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d17f      	bne.n	8003ade <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80039de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d17c      	bne.n	8003ade <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a47      	ldr	r2, [pc, #284]	; (8003b08 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d004      	beq.n	80039f8 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a46      	ldr	r2, [pc, #280]	; (8003b0c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d101      	bne.n	80039fc <HAL_ADCEx_MultiModeConfigChannel+0x90>
 80039f8:	4b45      	ldr	r3, [pc, #276]	; (8003b10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80039fa:	e000      	b.n	80039fe <HAL_ADCEx_MultiModeConfigChannel+0x92>
 80039fc:	4b45      	ldr	r3, [pc, #276]	; (8003b14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80039fe:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d039      	beq.n	8003a7c <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	431a      	orrs	r2, r3
 8003a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a18:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a3a      	ldr	r2, [pc, #232]	; (8003b08 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d004      	beq.n	8003a2e <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a38      	ldr	r2, [pc, #224]	; (8003b0c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d10e      	bne.n	8003a4c <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8003a2e:	4836      	ldr	r0, [pc, #216]	; (8003b08 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003a30:	f7ff ff76 	bl	8003920 <LL_ADC_IsEnabled>
 8003a34:	4604      	mov	r4, r0
 8003a36:	4835      	ldr	r0, [pc, #212]	; (8003b0c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003a38:	f7ff ff72 	bl	8003920 <LL_ADC_IsEnabled>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	4323      	orrs	r3, r4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	bf0c      	ite	eq
 8003a44:	2301      	moveq	r3, #1
 8003a46:	2300      	movne	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	e008      	b.n	8003a5e <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8003a4c:	4832      	ldr	r0, [pc, #200]	; (8003b18 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003a4e:	f7ff ff67 	bl	8003920 <LL_ADC_IsEnabled>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	bf0c      	ite	eq
 8003a58:	2301      	moveq	r3, #1
 8003a5a:	2300      	movne	r3, #0
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d047      	beq.n	8003af2 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	4b2d      	ldr	r3, [pc, #180]	; (8003b1c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	6811      	ldr	r1, [r2, #0]
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	6892      	ldr	r2, [r2, #8]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	431a      	orrs	r2, r3
 8003a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a78:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a7a:	e03a      	b.n	8003af2 <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a86:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a1e      	ldr	r2, [pc, #120]	; (8003b08 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d004      	beq.n	8003a9c <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a1d      	ldr	r2, [pc, #116]	; (8003b0c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d10e      	bne.n	8003aba <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8003a9c:	481a      	ldr	r0, [pc, #104]	; (8003b08 <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8003a9e:	f7ff ff3f 	bl	8003920 <LL_ADC_IsEnabled>
 8003aa2:	4604      	mov	r4, r0
 8003aa4:	4819      	ldr	r0, [pc, #100]	; (8003b0c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8003aa6:	f7ff ff3b 	bl	8003920 <LL_ADC_IsEnabled>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	4323      	orrs	r3, r4
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	bf0c      	ite	eq
 8003ab2:	2301      	moveq	r3, #1
 8003ab4:	2300      	movne	r3, #0
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	e008      	b.n	8003acc <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8003aba:	4817      	ldr	r0, [pc, #92]	; (8003b18 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003abc:	f7ff ff30 	bl	8003920 <LL_ADC_IsEnabled>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	bf0c      	ite	eq
 8003ac6:	2301      	moveq	r3, #1
 8003ac8:	2300      	movne	r3, #0
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d010      	beq.n	8003af2 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	4b11      	ldr	r3, [pc, #68]	; (8003b1c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ada:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003adc:	e009      	b.n	8003af2 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae2:	f043 0220 	orr.w	r2, r3, #32
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003af0:	e000      	b.n	8003af4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003af2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003afc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	377c      	adds	r7, #124	; 0x7c
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd90      	pop	{r4, r7, pc}
 8003b08:	40022000 	.word	0x40022000
 8003b0c:	40022100 	.word	0x40022100
 8003b10:	40022300 	.word	0x40022300
 8003b14:	58026300 	.word	0x58026300
 8003b18:	58026000 	.word	0x58026000
 8003b1c:	fffff0e0 	.word	0xfffff0e0

08003b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f003 0307 	and.w	r3, r3, #7
 8003b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b30:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <__NVIC_SetPriorityGrouping+0x40>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003b48:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <__NVIC_SetPriorityGrouping+0x44>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b4e:	4a04      	ldr	r2, [pc, #16]	; (8003b60 <__NVIC_SetPriorityGrouping+0x40>)
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	60d3      	str	r3, [r2, #12]
}
 8003b54:	bf00      	nop
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	e000ed00 	.word	0xe000ed00
 8003b64:	05fa0000 	.word	0x05fa0000

08003b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b6c:	4b04      	ldr	r3, [pc, #16]	; (8003b80 <__NVIC_GetPriorityGrouping+0x18>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	0a1b      	lsrs	r3, r3, #8
 8003b72:	f003 0307 	and.w	r3, r3, #7
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	e000ed00 	.word	0xe000ed00

08003b84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	db0b      	blt.n	8003bae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b96:	88fb      	ldrh	r3, [r7, #6]
 8003b98:	f003 021f 	and.w	r2, r3, #31
 8003b9c:	4907      	ldr	r1, [pc, #28]	; (8003bbc <__NVIC_EnableIRQ+0x38>)
 8003b9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ba2:	095b      	lsrs	r3, r3, #5
 8003ba4:	2001      	movs	r0, #1
 8003ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8003baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	e000e100 	.word	0xe000e100

08003bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	6039      	str	r1, [r7, #0]
 8003bca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003bcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	db0a      	blt.n	8003bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	490c      	ldr	r1, [pc, #48]	; (8003c0c <__NVIC_SetPriority+0x4c>)
 8003bda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bde:	0112      	lsls	r2, r2, #4
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	440b      	add	r3, r1
 8003be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003be8:	e00a      	b.n	8003c00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	4908      	ldr	r1, [pc, #32]	; (8003c10 <__NVIC_SetPriority+0x50>)
 8003bf0:	88fb      	ldrh	r3, [r7, #6]
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	3b04      	subs	r3, #4
 8003bf8:	0112      	lsls	r2, r2, #4
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	761a      	strb	r2, [r3, #24]
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	e000e100 	.word	0xe000e100
 8003c10:	e000ed00 	.word	0xe000ed00

08003c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b089      	sub	sp, #36	; 0x24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	f1c3 0307 	rsb	r3, r3, #7
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	bf28      	it	cs
 8003c32:	2304      	movcs	r3, #4
 8003c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	3304      	adds	r3, #4
 8003c3a:	2b06      	cmp	r3, #6
 8003c3c:	d902      	bls.n	8003c44 <NVIC_EncodePriority+0x30>
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	3b03      	subs	r3, #3
 8003c42:	e000      	b.n	8003c46 <NVIC_EncodePriority+0x32>
 8003c44:	2300      	movs	r3, #0
 8003c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c48:	f04f 32ff 	mov.w	r2, #4294967295
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	43da      	mvns	r2, r3
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	401a      	ands	r2, r3
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	fa01 f303 	lsl.w	r3, r1, r3
 8003c66:	43d9      	mvns	r1, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c6c:	4313      	orrs	r3, r2
         );
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3724      	adds	r7, #36	; 0x24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
	...

08003c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	3b01      	subs	r3, #1
 8003c88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c8c:	d301      	bcc.n	8003c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e00f      	b.n	8003cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c92:	4a0a      	ldr	r2, [pc, #40]	; (8003cbc <SysTick_Config+0x40>)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3b01      	subs	r3, #1
 8003c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c9a:	210f      	movs	r1, #15
 8003c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca0:	f7ff ff8e 	bl	8003bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ca4:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <SysTick_Config+0x40>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003caa:	4b04      	ldr	r3, [pc, #16]	; (8003cbc <SysTick_Config+0x40>)
 8003cac:	2207      	movs	r2, #7
 8003cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	e000e010 	.word	0xe000e010

08003cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7ff ff29 	bl	8003b20 <__NVIC_SetPriorityGrouping>
}
 8003cce:	bf00      	nop
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b086      	sub	sp, #24
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	4603      	mov	r3, r0
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	607a      	str	r2, [r7, #4]
 8003ce2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ce4:	f7ff ff40 	bl	8003b68 <__NVIC_GetPriorityGrouping>
 8003ce8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	68b9      	ldr	r1, [r7, #8]
 8003cee:	6978      	ldr	r0, [r7, #20]
 8003cf0:	f7ff ff90 	bl	8003c14 <NVIC_EncodePriority>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff ff5f 	bl	8003bc0 <__NVIC_SetPriority>
}
 8003d02:	bf00      	nop
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b082      	sub	sp, #8
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	4603      	mov	r3, r0
 8003d12:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff ff33 	bl	8003b84 <__NVIC_EnableIRQ>
}
 8003d1e:	bf00      	nop
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b082      	sub	sp, #8
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7ff ffa4 	bl	8003c7c <SysTick_Config>
 8003d34:	4603      	mov	r3, r0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
	...

08003d40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e188      	b.n	8004064 <HAL_DMA_Abort_IT+0x324>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d004      	beq.n	8003d68 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2280      	movs	r2, #128	; 0x80
 8003d62:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e17d      	b.n	8004064 <HAL_DMA_Abort_IT+0x324>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a8c      	ldr	r2, [pc, #560]	; (8003fa0 <HAL_DMA_Abort_IT+0x260>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d04a      	beq.n	8003e08 <HAL_DMA_Abort_IT+0xc8>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a8b      	ldr	r2, [pc, #556]	; (8003fa4 <HAL_DMA_Abort_IT+0x264>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d045      	beq.n	8003e08 <HAL_DMA_Abort_IT+0xc8>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a89      	ldr	r2, [pc, #548]	; (8003fa8 <HAL_DMA_Abort_IT+0x268>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d040      	beq.n	8003e08 <HAL_DMA_Abort_IT+0xc8>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a88      	ldr	r2, [pc, #544]	; (8003fac <HAL_DMA_Abort_IT+0x26c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d03b      	beq.n	8003e08 <HAL_DMA_Abort_IT+0xc8>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a86      	ldr	r2, [pc, #536]	; (8003fb0 <HAL_DMA_Abort_IT+0x270>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d036      	beq.n	8003e08 <HAL_DMA_Abort_IT+0xc8>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a85      	ldr	r2, [pc, #532]	; (8003fb4 <HAL_DMA_Abort_IT+0x274>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d031      	beq.n	8003e08 <HAL_DMA_Abort_IT+0xc8>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a83      	ldr	r2, [pc, #524]	; (8003fb8 <HAL_DMA_Abort_IT+0x278>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d02c      	beq.n	8003e08 <HAL_DMA_Abort_IT+0xc8>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a82      	ldr	r2, [pc, #520]	; (8003fbc <HAL_DMA_Abort_IT+0x27c>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d027      	beq.n	8003e08 <HAL_DMA_Abort_IT+0xc8>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a80      	ldr	r2, [pc, #512]	; (8003fc0 <HAL_DMA_Abort_IT+0x280>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d022      	beq.n	8003e08 <HAL_DMA_Abort_IT+0xc8>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a7f      	ldr	r2, [pc, #508]	; (8003fc4 <HAL_DMA_Abort_IT+0x284>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d01d      	beq.n	8003e08 <HAL_DMA_Abort_IT+0xc8>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a7d      	ldr	r2, [pc, #500]	; (8003fc8 <HAL_DMA_Abort_IT+0x288>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d018      	beq.n	8003e08 <HAL_DMA_Abort_IT+0xc8>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a7c      	ldr	r2, [pc, #496]	; (8003fcc <HAL_DMA_Abort_IT+0x28c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d013      	beq.n	8003e08 <HAL_DMA_Abort_IT+0xc8>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a7a      	ldr	r2, [pc, #488]	; (8003fd0 <HAL_DMA_Abort_IT+0x290>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d00e      	beq.n	8003e08 <HAL_DMA_Abort_IT+0xc8>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a79      	ldr	r2, [pc, #484]	; (8003fd4 <HAL_DMA_Abort_IT+0x294>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d009      	beq.n	8003e08 <HAL_DMA_Abort_IT+0xc8>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a77      	ldr	r2, [pc, #476]	; (8003fd8 <HAL_DMA_Abort_IT+0x298>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d004      	beq.n	8003e08 <HAL_DMA_Abort_IT+0xc8>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a76      	ldr	r2, [pc, #472]	; (8003fdc <HAL_DMA_Abort_IT+0x29c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d101      	bne.n	8003e0c <HAL_DMA_Abort_IT+0xcc>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <HAL_DMA_Abort_IT+0xce>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d065      	beq.n	8003ede <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2204      	movs	r2, #4
 8003e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a60      	ldr	r2, [pc, #384]	; (8003fa0 <HAL_DMA_Abort_IT+0x260>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d04a      	beq.n	8003eba <HAL_DMA_Abort_IT+0x17a>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a5e      	ldr	r2, [pc, #376]	; (8003fa4 <HAL_DMA_Abort_IT+0x264>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d045      	beq.n	8003eba <HAL_DMA_Abort_IT+0x17a>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a5d      	ldr	r2, [pc, #372]	; (8003fa8 <HAL_DMA_Abort_IT+0x268>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d040      	beq.n	8003eba <HAL_DMA_Abort_IT+0x17a>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a5b      	ldr	r2, [pc, #364]	; (8003fac <HAL_DMA_Abort_IT+0x26c>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d03b      	beq.n	8003eba <HAL_DMA_Abort_IT+0x17a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a5a      	ldr	r2, [pc, #360]	; (8003fb0 <HAL_DMA_Abort_IT+0x270>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d036      	beq.n	8003eba <HAL_DMA_Abort_IT+0x17a>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a58      	ldr	r2, [pc, #352]	; (8003fb4 <HAL_DMA_Abort_IT+0x274>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d031      	beq.n	8003eba <HAL_DMA_Abort_IT+0x17a>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a57      	ldr	r2, [pc, #348]	; (8003fb8 <HAL_DMA_Abort_IT+0x278>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d02c      	beq.n	8003eba <HAL_DMA_Abort_IT+0x17a>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a55      	ldr	r2, [pc, #340]	; (8003fbc <HAL_DMA_Abort_IT+0x27c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d027      	beq.n	8003eba <HAL_DMA_Abort_IT+0x17a>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a54      	ldr	r2, [pc, #336]	; (8003fc0 <HAL_DMA_Abort_IT+0x280>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d022      	beq.n	8003eba <HAL_DMA_Abort_IT+0x17a>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a52      	ldr	r2, [pc, #328]	; (8003fc4 <HAL_DMA_Abort_IT+0x284>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d01d      	beq.n	8003eba <HAL_DMA_Abort_IT+0x17a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a51      	ldr	r2, [pc, #324]	; (8003fc8 <HAL_DMA_Abort_IT+0x288>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d018      	beq.n	8003eba <HAL_DMA_Abort_IT+0x17a>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a4f      	ldr	r2, [pc, #316]	; (8003fcc <HAL_DMA_Abort_IT+0x28c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d013      	beq.n	8003eba <HAL_DMA_Abort_IT+0x17a>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a4e      	ldr	r2, [pc, #312]	; (8003fd0 <HAL_DMA_Abort_IT+0x290>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00e      	beq.n	8003eba <HAL_DMA_Abort_IT+0x17a>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a4c      	ldr	r2, [pc, #304]	; (8003fd4 <HAL_DMA_Abort_IT+0x294>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d009      	beq.n	8003eba <HAL_DMA_Abort_IT+0x17a>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a4b      	ldr	r2, [pc, #300]	; (8003fd8 <HAL_DMA_Abort_IT+0x298>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d004      	beq.n	8003eba <HAL_DMA_Abort_IT+0x17a>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a49      	ldr	r2, [pc, #292]	; (8003fdc <HAL_DMA_Abort_IT+0x29c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d108      	bne.n	8003ecc <HAL_DMA_Abort_IT+0x18c>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0201 	bic.w	r2, r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	e0ca      	b.n	8004062 <HAL_DMA_Abort_IT+0x322>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0201 	bic.w	r2, r2, #1
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	e0c1      	b.n	8004062 <HAL_DMA_Abort_IT+0x322>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 020e 	bic.w	r2, r2, #14
 8003eec:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a2b      	ldr	r2, [pc, #172]	; (8003fa0 <HAL_DMA_Abort_IT+0x260>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d04a      	beq.n	8003f8e <HAL_DMA_Abort_IT+0x24e>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a29      	ldr	r2, [pc, #164]	; (8003fa4 <HAL_DMA_Abort_IT+0x264>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d045      	beq.n	8003f8e <HAL_DMA_Abort_IT+0x24e>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a28      	ldr	r2, [pc, #160]	; (8003fa8 <HAL_DMA_Abort_IT+0x268>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d040      	beq.n	8003f8e <HAL_DMA_Abort_IT+0x24e>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a26      	ldr	r2, [pc, #152]	; (8003fac <HAL_DMA_Abort_IT+0x26c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d03b      	beq.n	8003f8e <HAL_DMA_Abort_IT+0x24e>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a25      	ldr	r2, [pc, #148]	; (8003fb0 <HAL_DMA_Abort_IT+0x270>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d036      	beq.n	8003f8e <HAL_DMA_Abort_IT+0x24e>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a23      	ldr	r2, [pc, #140]	; (8003fb4 <HAL_DMA_Abort_IT+0x274>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d031      	beq.n	8003f8e <HAL_DMA_Abort_IT+0x24e>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a22      	ldr	r2, [pc, #136]	; (8003fb8 <HAL_DMA_Abort_IT+0x278>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d02c      	beq.n	8003f8e <HAL_DMA_Abort_IT+0x24e>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a20      	ldr	r2, [pc, #128]	; (8003fbc <HAL_DMA_Abort_IT+0x27c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d027      	beq.n	8003f8e <HAL_DMA_Abort_IT+0x24e>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a1f      	ldr	r2, [pc, #124]	; (8003fc0 <HAL_DMA_Abort_IT+0x280>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d022      	beq.n	8003f8e <HAL_DMA_Abort_IT+0x24e>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a1d      	ldr	r2, [pc, #116]	; (8003fc4 <HAL_DMA_Abort_IT+0x284>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d01d      	beq.n	8003f8e <HAL_DMA_Abort_IT+0x24e>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a1c      	ldr	r2, [pc, #112]	; (8003fc8 <HAL_DMA_Abort_IT+0x288>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d018      	beq.n	8003f8e <HAL_DMA_Abort_IT+0x24e>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a1a      	ldr	r2, [pc, #104]	; (8003fcc <HAL_DMA_Abort_IT+0x28c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d013      	beq.n	8003f8e <HAL_DMA_Abort_IT+0x24e>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a19      	ldr	r2, [pc, #100]	; (8003fd0 <HAL_DMA_Abort_IT+0x290>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00e      	beq.n	8003f8e <HAL_DMA_Abort_IT+0x24e>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a17      	ldr	r2, [pc, #92]	; (8003fd4 <HAL_DMA_Abort_IT+0x294>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d009      	beq.n	8003f8e <HAL_DMA_Abort_IT+0x24e>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a16      	ldr	r2, [pc, #88]	; (8003fd8 <HAL_DMA_Abort_IT+0x298>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d004      	beq.n	8003f8e <HAL_DMA_Abort_IT+0x24e>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a14      	ldr	r2, [pc, #80]	; (8003fdc <HAL_DMA_Abort_IT+0x29c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d128      	bne.n	8003fe0 <HAL_DMA_Abort_IT+0x2a0>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0201 	bic.w	r2, r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	e027      	b.n	8003ff0 <HAL_DMA_Abort_IT+0x2b0>
 8003fa0:	40020010 	.word	0x40020010
 8003fa4:	40020028 	.word	0x40020028
 8003fa8:	40020040 	.word	0x40020040
 8003fac:	40020058 	.word	0x40020058
 8003fb0:	40020070 	.word	0x40020070
 8003fb4:	40020088 	.word	0x40020088
 8003fb8:	400200a0 	.word	0x400200a0
 8003fbc:	400200b8 	.word	0x400200b8
 8003fc0:	40020410 	.word	0x40020410
 8003fc4:	40020428 	.word	0x40020428
 8003fc8:	40020440 	.word	0x40020440
 8003fcc:	40020458 	.word	0x40020458
 8003fd0:	40020470 	.word	0x40020470
 8003fd4:	40020488 	.word	0x40020488
 8003fd8:	400204a0 	.word	0x400204a0
 8003fdc:	400204b8 	.word	0x400204b8
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 0201 	bic.w	r2, r2, #1
 8003fee:	601a      	str	r2, [r3, #0]

      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ffa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ffe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004004:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400a:	f003 031f 	and.w	r3, r3, #31
 800400e:	2201      	movs	r2, #1
 8004010:	409a      	lsls	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	605a      	str	r2, [r3, #4]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800401e:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00c      	beq.n	8004042 <HAL_DMA_Abort_IT+0x302>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004032:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004036:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004040:	605a      	str	r2, [r3, #4]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_DMA_Abort_IT+0x322>
      {
        hdma->XferAbortCallback(hdma);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b098      	sub	sp, #96	; 0x60
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004074:	4a84      	ldr	r2, [pc, #528]	; (8004288 <HAL_FDCAN_Init+0x21c>)
 8004076:	f107 030c 	add.w	r3, r7, #12
 800407a:	4611      	mov	r1, r2
 800407c:	224c      	movs	r2, #76	; 0x4c
 800407e:	4618      	mov	r0, r3
 8004080:	f008 f810 	bl	800c0a4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e1ca      	b.n	8004424 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a7e      	ldr	r2, [pc, #504]	; (800428c <HAL_FDCAN_Init+0x220>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d106      	bne.n	80040a6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80040a0:	461a      	mov	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d106      	bne.n	80040c0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7fd ff36 	bl	8001f2c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699a      	ldr	r2, [r3, #24]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f022 0210 	bic.w	r2, r2, #16
 80040ce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040d0:	f7fe fb1e 	bl	8002710 <HAL_GetTick>
 80040d4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80040d6:	e014      	b.n	8004102 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80040d8:	f7fe fb1a 	bl	8002710 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b0a      	cmp	r3, #10
 80040e4:	d90d      	bls.n	8004102 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040ec:	f043 0201 	orr.w	r2, r3, #1
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2203      	movs	r2, #3
 80040fa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e190      	b.n	8004424 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	f003 0308 	and.w	r3, r3, #8
 800410c:	2b08      	cmp	r3, #8
 800410e:	d0e3      	beq.n	80040d8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699a      	ldr	r2, [r3, #24]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0201 	orr.w	r2, r2, #1
 800411e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004120:	f7fe faf6 	bl	8002710 <HAL_GetTick>
 8004124:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004126:	e014      	b.n	8004152 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004128:	f7fe faf2 	bl	8002710 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b0a      	cmp	r3, #10
 8004134:	d90d      	bls.n	8004152 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800413c:	f043 0201 	orr.w	r2, r3, #1
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2203      	movs	r2, #3
 800414a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e168      	b.n	8004424 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0e3      	beq.n	8004128 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699a      	ldr	r2, [r3, #24]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0202 	orr.w	r2, r2, #2
 800416e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	7c1b      	ldrb	r3, [r3, #16]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d108      	bne.n	800418a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699a      	ldr	r2, [r3, #24]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004186:	619a      	str	r2, [r3, #24]
 8004188:	e007      	b.n	800419a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	699a      	ldr	r2, [r3, #24]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004198:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	7c5b      	ldrb	r3, [r3, #17]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d108      	bne.n	80041b4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	699a      	ldr	r2, [r3, #24]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041b0:	619a      	str	r2, [r3, #24]
 80041b2:	e007      	b.n	80041c4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699a      	ldr	r2, [r3, #24]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041c2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	7c9b      	ldrb	r3, [r3, #18]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d108      	bne.n	80041de <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699a      	ldr	r2, [r3, #24]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041da:	619a      	str	r2, [r3, #24]
 80041dc:	e007      	b.n	80041ee <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	699a      	ldr	r2, [r3, #24]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041ec:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699a      	ldr	r2, [r3, #24]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004212:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691a      	ldr	r2, [r3, #16]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 0210 	bic.w	r2, r2, #16
 8004222:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d108      	bne.n	800423e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	699a      	ldr	r2, [r3, #24]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0204 	orr.w	r2, r2, #4
 800423a:	619a      	str	r2, [r3, #24]
 800423c:	e030      	b.n	80042a0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d02c      	beq.n	80042a0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	2b02      	cmp	r3, #2
 800424c:	d020      	beq.n	8004290 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	699a      	ldr	r2, [r3, #24]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800425c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f042 0210 	orr.w	r2, r2, #16
 800426c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	2b03      	cmp	r3, #3
 8004274:	d114      	bne.n	80042a0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	699a      	ldr	r2, [r3, #24]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f042 0220 	orr.w	r2, r2, #32
 8004284:	619a      	str	r2, [r3, #24]
 8004286:	e00b      	b.n	80042a0 <HAL_FDCAN_Init+0x234>
 8004288:	0800c0e4 	.word	0x0800c0e4
 800428c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699a      	ldr	r2, [r3, #24]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0220 	orr.w	r2, r2, #32
 800429e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	3b01      	subs	r3, #1
 80042a6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	3b01      	subs	r3, #1
 80042ae:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80042b0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80042b8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	3b01      	subs	r3, #1
 80042c2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80042c8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80042ca:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042d4:	d115      	bne.n	8004302 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042da:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	3b01      	subs	r3, #1
 80042e2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80042e4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ea:	3b01      	subs	r3, #1
 80042ec:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80042ee:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	3b01      	subs	r3, #1
 80042f8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80042fe:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004300:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004328:	4413      	add	r3, r2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d012      	beq.n	8004354 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004336:	f023 0107 	bic.w	r1, r3, #7
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004344:	4413      	add	r3, r2
 8004346:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	2b00      	cmp	r3, #0
 800435a:	d012      	beq.n	8004382 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004364:	f023 0107 	bic.w	r1, r3, #7
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004372:	4413      	add	r3, r2
 8004374:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	430a      	orrs	r2, r1
 800437e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004386:	2b00      	cmp	r3, #0
 8004388:	d013      	beq.n	80043b2 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004392:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80043a0:	4413      	add	r3, r2
 80043a2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80043a6:	011a      	lsls	r2, r3, #4
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d013      	beq.n	80043e2 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80043c2:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80043d0:	4413      	add	r3, r2
 80043d2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80043d6:	021a      	lsls	r2, r3, #8
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a11      	ldr	r2, [pc, #68]	; (800442c <HAL_FDCAN_Init+0x3c0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d107      	bne.n	80043fc <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	689a      	ldr	r2, [r3, #8]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f022 0203 	bic.w	r2, r2, #3
 80043fa:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f80b 	bl	8004430 <FDCAN_CalcultateRamBlockAddresses>
 800441a:	4603      	mov	r3, r0
 800441c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004420:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004424:	4618      	mov	r0, r3
 8004426:	3760      	adds	r7, #96	; 0x60
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	4000a000 	.word	0x4000a000

08004430 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800443c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004446:	4ba7      	ldr	r3, [pc, #668]	; (80046e4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004448:	4013      	ands	r3, r2
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	0091      	lsls	r1, r2, #2
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6812      	ldr	r2, [r2, #0]
 8004452:	430b      	orrs	r3, r1
 8004454:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004460:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004468:	041a      	lsls	r2, r3, #16
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	4413      	add	r3, r2
 800447c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004486:	4b97      	ldr	r3, [pc, #604]	; (80046e4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004488:	4013      	ands	r3, r2
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	0091      	lsls	r1, r2, #2
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6812      	ldr	r2, [r2, #0]
 8004492:	430b      	orrs	r3, r1
 8004494:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a8:	041a      	lsls	r2, r3, #16
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	4413      	add	r3, r2
 80044be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80044c8:	4b86      	ldr	r3, [pc, #536]	; (80046e4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80044ca:	4013      	ands	r3, r2
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	0091      	lsls	r1, r2, #2
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6812      	ldr	r2, [r2, #0]
 80044d4:	430b      	orrs	r3, r1
 80044d6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80044e2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	041a      	lsls	r2, r3, #16
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80044fe:	fb02 f303 	mul.w	r3, r2, r3
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	4413      	add	r3, r2
 8004506:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004510:	4b74      	ldr	r3, [pc, #464]	; (80046e4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004512:	4013      	ands	r3, r2
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	0091      	lsls	r1, r2, #2
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	6812      	ldr	r2, [r2, #0]
 800451c:	430b      	orrs	r3, r1
 800451e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800452a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004532:	041a      	lsls	r2, r3, #16
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	430a      	orrs	r2, r1
 800453a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004546:	fb02 f303 	mul.w	r3, r2, r3
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	4413      	add	r3, r2
 800454e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004558:	4b62      	ldr	r3, [pc, #392]	; (80046e4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800455a:	4013      	ands	r3, r2
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	0091      	lsls	r1, r2, #2
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6812      	ldr	r2, [r2, #0]
 8004564:	430b      	orrs	r3, r1
 8004566:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004572:	fb02 f303 	mul.w	r3, r2, r3
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	4413      	add	r3, r2
 800457a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004584:	4b57      	ldr	r3, [pc, #348]	; (80046e4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004586:	4013      	ands	r3, r2
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	0091      	lsls	r1, r2, #2
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6812      	ldr	r2, [r2, #0]
 8004590:	430b      	orrs	r3, r1
 8004592:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800459e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a6:	041a      	lsls	r2, r3, #16
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	4413      	add	r3, r2
 80045bc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80045c6:	4b47      	ldr	r3, [pc, #284]	; (80046e4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	0091      	lsls	r1, r2, #2
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6812      	ldr	r2, [r2, #0]
 80045d2:	430b      	orrs	r3, r1
 80045d4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80045e0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e8:	041a      	lsls	r2, r3, #16
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80045fc:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004604:	061a      	lsls	r2, r3, #24
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004614:	4b34      	ldr	r3, [pc, #208]	; (80046e8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8004616:	4413      	add	r3, r2
 8004618:	009a      	lsls	r2, r3, #2
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	441a      	add	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	441a      	add	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800464a:	fb01 f303 	mul.w	r3, r1, r3
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	441a      	add	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004662:	fb01 f303 	mul.w	r3, r1, r3
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	441a      	add	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800467a:	fb01 f303 	mul.w	r3, r1, r3
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	441a      	add	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	441a      	add	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a6:	6879      	ldr	r1, [r7, #4]
 80046a8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80046aa:	fb01 f303 	mul.w	r3, r1, r3
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	441a      	add	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80046c6:	fb01 f303 	mul.w	r3, r1, r3
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	441a      	add	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046da:	4a04      	ldr	r2, [pc, #16]	; (80046ec <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d915      	bls.n	800470c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80046e0:	e006      	b.n	80046f0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80046e2:	bf00      	nop
 80046e4:	ffff0003 	.word	0xffff0003
 80046e8:	10002b00 	.word	0x10002b00
 80046ec:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046f6:	f043 0220 	orr.w	r2, r3, #32
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2203      	movs	r2, #3
 8004704:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e010      	b.n	800472e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004710:	60fb      	str	r3, [r7, #12]
 8004712:	e005      	b.n	8004720 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	3304      	adds	r3, #4
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	429a      	cmp	r2, r3
 800472a:	d3f3      	bcc.n	8004714 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop

0800473c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800473c:	b480      	push	{r7}
 800473e:	b089      	sub	sp, #36	; 0x24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004746:	2300      	movs	r3, #0
 8004748:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800474a:	4b89      	ldr	r3, [pc, #548]	; (8004970 <HAL_GPIO_Init+0x234>)
 800474c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800474e:	e194      	b.n	8004a7a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	2101      	movs	r1, #1
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	fa01 f303 	lsl.w	r3, r1, r3
 800475c:	4013      	ands	r3, r2
 800475e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 8186 	beq.w	8004a74 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	2b02      	cmp	r3, #2
 800476e:	d003      	beq.n	8004778 <HAL_GPIO_Init+0x3c>
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2b12      	cmp	r3, #18
 8004776:	d123      	bne.n	80047c0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	08da      	lsrs	r2, r3, #3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3208      	adds	r2, #8
 8004780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004784:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	f003 0307 	and.w	r3, r3, #7
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	220f      	movs	r2, #15
 8004790:	fa02 f303 	lsl.w	r3, r2, r3
 8004794:	43db      	mvns	r3, r3
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	4013      	ands	r3, r2
 800479a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	691a      	ldr	r2, [r3, #16]
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	08da      	lsrs	r2, r3, #3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	3208      	adds	r2, #8
 80047ba:	69b9      	ldr	r1, [r7, #24]
 80047bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	2203      	movs	r2, #3
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	43db      	mvns	r3, r3
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	4013      	ands	r3, r2
 80047d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f003 0203 	and.w	r2, r3, #3
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	005b      	lsls	r3, r3, #1
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d00b      	beq.n	8004814 <HAL_GPIO_Init+0xd8>
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	2b02      	cmp	r3, #2
 8004802:	d007      	beq.n	8004814 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004808:	2b11      	cmp	r3, #17
 800480a:	d003      	beq.n	8004814 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	2b12      	cmp	r3, #18
 8004812:	d130      	bne.n	8004876 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	2203      	movs	r2, #3
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	43db      	mvns	r3, r3
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	4013      	ands	r3, r2
 800482a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	4313      	orrs	r3, r2
 800483c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800484a:	2201      	movs	r2, #1
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	43db      	mvns	r3, r3
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	4013      	ands	r3, r2
 8004858:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	091b      	lsrs	r3, r3, #4
 8004860:	f003 0201 	and.w	r2, r3, #1
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	4313      	orrs	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	2203      	movs	r2, #3
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	43db      	mvns	r3, r3
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	4013      	ands	r3, r2
 800488c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	689a      	ldr	r2, [r3, #8]
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	4313      	orrs	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 80e0 	beq.w	8004a74 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048b4:	4b2f      	ldr	r3, [pc, #188]	; (8004974 <HAL_GPIO_Init+0x238>)
 80048b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048ba:	4a2e      	ldr	r2, [pc, #184]	; (8004974 <HAL_GPIO_Init+0x238>)
 80048bc:	f043 0302 	orr.w	r3, r3, #2
 80048c0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80048c4:	4b2b      	ldr	r3, [pc, #172]	; (8004974 <HAL_GPIO_Init+0x238>)
 80048c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048d2:	4a29      	ldr	r2, [pc, #164]	; (8004978 <HAL_GPIO_Init+0x23c>)
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	089b      	lsrs	r3, r3, #2
 80048d8:	3302      	adds	r3, #2
 80048da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	220f      	movs	r2, #15
 80048ea:	fa02 f303 	lsl.w	r3, r2, r3
 80048ee:	43db      	mvns	r3, r3
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	4013      	ands	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a20      	ldr	r2, [pc, #128]	; (800497c <HAL_GPIO_Init+0x240>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d052      	beq.n	80049a4 <HAL_GPIO_Init+0x268>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a1f      	ldr	r2, [pc, #124]	; (8004980 <HAL_GPIO_Init+0x244>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d031      	beq.n	800496a <HAL_GPIO_Init+0x22e>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a1e      	ldr	r2, [pc, #120]	; (8004984 <HAL_GPIO_Init+0x248>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d02b      	beq.n	8004966 <HAL_GPIO_Init+0x22a>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a1d      	ldr	r2, [pc, #116]	; (8004988 <HAL_GPIO_Init+0x24c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d025      	beq.n	8004962 <HAL_GPIO_Init+0x226>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a1c      	ldr	r2, [pc, #112]	; (800498c <HAL_GPIO_Init+0x250>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d01f      	beq.n	800495e <HAL_GPIO_Init+0x222>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a1b      	ldr	r2, [pc, #108]	; (8004990 <HAL_GPIO_Init+0x254>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d019      	beq.n	800495a <HAL_GPIO_Init+0x21e>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a1a      	ldr	r2, [pc, #104]	; (8004994 <HAL_GPIO_Init+0x258>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d013      	beq.n	8004956 <HAL_GPIO_Init+0x21a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a19      	ldr	r2, [pc, #100]	; (8004998 <HAL_GPIO_Init+0x25c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d00d      	beq.n	8004952 <HAL_GPIO_Init+0x216>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a18      	ldr	r2, [pc, #96]	; (800499c <HAL_GPIO_Init+0x260>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d007      	beq.n	800494e <HAL_GPIO_Init+0x212>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a17      	ldr	r2, [pc, #92]	; (80049a0 <HAL_GPIO_Init+0x264>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d101      	bne.n	800494a <HAL_GPIO_Init+0x20e>
 8004946:	2309      	movs	r3, #9
 8004948:	e02d      	b.n	80049a6 <HAL_GPIO_Init+0x26a>
 800494a:	230a      	movs	r3, #10
 800494c:	e02b      	b.n	80049a6 <HAL_GPIO_Init+0x26a>
 800494e:	2308      	movs	r3, #8
 8004950:	e029      	b.n	80049a6 <HAL_GPIO_Init+0x26a>
 8004952:	2307      	movs	r3, #7
 8004954:	e027      	b.n	80049a6 <HAL_GPIO_Init+0x26a>
 8004956:	2306      	movs	r3, #6
 8004958:	e025      	b.n	80049a6 <HAL_GPIO_Init+0x26a>
 800495a:	2305      	movs	r3, #5
 800495c:	e023      	b.n	80049a6 <HAL_GPIO_Init+0x26a>
 800495e:	2304      	movs	r3, #4
 8004960:	e021      	b.n	80049a6 <HAL_GPIO_Init+0x26a>
 8004962:	2303      	movs	r3, #3
 8004964:	e01f      	b.n	80049a6 <HAL_GPIO_Init+0x26a>
 8004966:	2302      	movs	r3, #2
 8004968:	e01d      	b.n	80049a6 <HAL_GPIO_Init+0x26a>
 800496a:	2301      	movs	r3, #1
 800496c:	e01b      	b.n	80049a6 <HAL_GPIO_Init+0x26a>
 800496e:	bf00      	nop
 8004970:	58000080 	.word	0x58000080
 8004974:	58024400 	.word	0x58024400
 8004978:	58000400 	.word	0x58000400
 800497c:	58020000 	.word	0x58020000
 8004980:	58020400 	.word	0x58020400
 8004984:	58020800 	.word	0x58020800
 8004988:	58020c00 	.word	0x58020c00
 800498c:	58021000 	.word	0x58021000
 8004990:	58021400 	.word	0x58021400
 8004994:	58021800 	.word	0x58021800
 8004998:	58021c00 	.word	0x58021c00
 800499c:	58022000 	.word	0x58022000
 80049a0:	58022400 	.word	0x58022400
 80049a4:	2300      	movs	r3, #0
 80049a6:	69fa      	ldr	r2, [r7, #28]
 80049a8:	f002 0203 	and.w	r2, r2, #3
 80049ac:	0092      	lsls	r2, r2, #2
 80049ae:	4093      	lsls	r3, r2
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049b6:	4938      	ldr	r1, [pc, #224]	; (8004a98 <HAL_GPIO_Init+0x35c>)
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	089b      	lsrs	r3, r3, #2
 80049bc:	3302      	adds	r3, #2
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	43db      	mvns	r3, r3
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	4013      	ands	r3, r2
 80049d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d003      	beq.n	80049e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	43db      	mvns	r3, r3
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	4013      	ands	r3, r2
 80049fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	43db      	mvns	r3, r3
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	4013      	ands	r3, r2
 8004a28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004a3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	43db      	mvns	r3, r3
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	4013      	ands	r3, r2
 8004a56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004a6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	3301      	adds	r3, #1
 8004a78:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	fa22 f303 	lsr.w	r3, r2, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f47f ae63 	bne.w	8004750 <HAL_GPIO_Init+0x14>
  }
}
 8004a8a:	bf00      	nop
 8004a8c:	3724      	adds	r7, #36	; 0x24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	58000400 	.word	0x58000400

08004a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	807b      	strh	r3, [r7, #2]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004aac:	787b      	ldrb	r3, [r7, #1]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ab2:	887a      	ldrh	r2, [r7, #2]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004ab8:	e003      	b.n	8004ac2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004aba:	887b      	ldrh	r3, [r7, #2]
 8004abc:	041a      	lsls	r2, r3, #16
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	619a      	str	r2, [r3, #24]
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	695a      	ldr	r2, [r3, #20]
 8004ade:	887b      	ldrh	r3, [r7, #2]
 8004ae0:	401a      	ands	r2, r3
 8004ae2:	887b      	ldrh	r3, [r7, #2]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d104      	bne.n	8004af2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004ae8:	887b      	ldrh	r3, [r7, #2]
 8004aea:	041a      	lsls	r2, r3, #16
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004af0:	e002      	b.n	8004af8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004af2:	887a      	ldrh	r2, [r7, #2]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	619a      	str	r2, [r3, #24]
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e07f      	b.n	8004c16 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d106      	bne.n	8004b30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7fd fa48 	bl	8001fc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2224      	movs	r2, #36	; 0x24
 8004b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0201 	bic.w	r2, r2, #1
 8004b46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d107      	bne.n	8004b7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689a      	ldr	r2, [r3, #8]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b7a:	609a      	str	r2, [r3, #8]
 8004b7c:	e006      	b.n	8004b8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689a      	ldr	r2, [r3, #8]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004b8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d104      	bne.n	8004b9e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6859      	ldr	r1, [r3, #4]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	4b1d      	ldr	r3, [pc, #116]	; (8004c20 <HAL_I2C_Init+0x11c>)
 8004baa:	430b      	orrs	r3, r1
 8004bac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68da      	ldr	r2, [r3, #12]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bbc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	691a      	ldr	r2, [r3, #16]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	ea42 0103 	orr.w	r1, r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	021a      	lsls	r2, r3, #8
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	69d9      	ldr	r1, [r3, #28]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a1a      	ldr	r2, [r3, #32]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0201 	orr.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2220      	movs	r2, #32
 8004c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	02008000 	.word	0x02008000

08004c24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b20      	cmp	r3, #32
 8004c38:	d138      	bne.n	8004cac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d101      	bne.n	8004c48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c44:	2302      	movs	r3, #2
 8004c46:	e032      	b.n	8004cae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2224      	movs	r2, #36	; 0x24
 8004c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 0201 	bic.w	r2, r2, #1
 8004c66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6819      	ldr	r1, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	430a      	orrs	r2, r1
 8004c86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0201 	orr.w	r2, r2, #1
 8004c96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	e000      	b.n	8004cae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004cac:	2302      	movs	r3, #2
  }
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b085      	sub	sp, #20
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
 8004cc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	d139      	bne.n	8004d44 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d101      	bne.n	8004cde <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	e033      	b.n	8004d46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2224      	movs	r2, #36	; 0x24
 8004cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0201 	bic.w	r2, r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d0c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	021b      	lsls	r3, r3, #8
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f042 0201 	orr.w	r2, r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d40:	2300      	movs	r3, #0
 8004d42:	e000      	b.n	8004d46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004d44:	2302      	movs	r3, #2
  }
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
	...

08004d54 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8004d5c:	4b18      	ldr	r3, [pc, #96]	; (8004dc0 <HAL_PWREx_ConfigSupply+0x6c>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	d008      	beq.n	8004d7a <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004d68:	4b15      	ldr	r3, [pc, #84]	; (8004dc0 <HAL_PWREx_ConfigSupply+0x6c>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d001      	beq.n	8004d7a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e01d      	b.n	8004db6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004d7a:	4b11      	ldr	r3, [pc, #68]	; (8004dc0 <HAL_PWREx_ConfigSupply+0x6c>)
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f023 0207 	bic.w	r2, r3, #7
 8004d82:	490f      	ldr	r1, [pc, #60]	; (8004dc0 <HAL_PWREx_ConfigSupply+0x6c>)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d8a:	f7fd fcc1 	bl	8002710 <HAL_GetTick>
 8004d8e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8004d90:	e009      	b.n	8004da6 <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8004d92:	f7fd fcbd 	bl	8002710 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004da0:	d901      	bls.n	8004da6 <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e007      	b.n	8004db6 <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8004da6:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <HAL_PWREx_ConfigSupply+0x6c>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004db2:	d1ee      	bne.n	8004d92 <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	58024800 	.word	0x58024800

08004dc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b08a      	sub	sp, #40	; 0x28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e3a4      	b.n	8005520 <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 8087 	beq.w	8004ef2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004de4:	4b9a      	ldr	r3, [pc, #616]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dec:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004dee:	4b98      	ldr	r3, [pc, #608]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8004df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df2:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df6:	2b10      	cmp	r3, #16
 8004df8:	d007      	beq.n	8004e0a <HAL_RCC_OscConfig+0x46>
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	2b18      	cmp	r3, #24
 8004dfe:	d110      	bne.n	8004e22 <HAL_RCC_OscConfig+0x5e>
 8004e00:	6a3b      	ldr	r3, [r7, #32]
 8004e02:	f003 0303 	and.w	r3, r3, #3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d10b      	bne.n	8004e22 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e0a:	4b91      	ldr	r3, [pc, #580]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d06c      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x12c>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d168      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e37e      	b.n	8005520 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e2a:	d106      	bne.n	8004e3a <HAL_RCC_OscConfig+0x76>
 8004e2c:	4b88      	ldr	r3, [pc, #544]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a87      	ldr	r2, [pc, #540]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8004e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e36:	6013      	str	r3, [r2, #0]
 8004e38:	e02e      	b.n	8004e98 <HAL_RCC_OscConfig+0xd4>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10c      	bne.n	8004e5c <HAL_RCC_OscConfig+0x98>
 8004e42:	4b83      	ldr	r3, [pc, #524]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a82      	ldr	r2, [pc, #520]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8004e48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e4c:	6013      	str	r3, [r2, #0]
 8004e4e:	4b80      	ldr	r3, [pc, #512]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a7f      	ldr	r2, [pc, #508]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8004e54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e58:	6013      	str	r3, [r2, #0]
 8004e5a:	e01d      	b.n	8004e98 <HAL_RCC_OscConfig+0xd4>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e64:	d10c      	bne.n	8004e80 <HAL_RCC_OscConfig+0xbc>
 8004e66:	4b7a      	ldr	r3, [pc, #488]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a79      	ldr	r2, [pc, #484]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8004e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	4b77      	ldr	r3, [pc, #476]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a76      	ldr	r2, [pc, #472]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8004e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e7c:	6013      	str	r3, [r2, #0]
 8004e7e:	e00b      	b.n	8004e98 <HAL_RCC_OscConfig+0xd4>
 8004e80:	4b73      	ldr	r3, [pc, #460]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a72      	ldr	r2, [pc, #456]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8004e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	4b70      	ldr	r3, [pc, #448]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a6f      	ldr	r2, [pc, #444]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8004e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d013      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea0:	f7fd fc36 	bl	8002710 <HAL_GetTick>
 8004ea4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ea8:	f7fd fc32 	bl	8002710 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b64      	cmp	r3, #100	; 0x64
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e332      	b.n	8005520 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004eba:	4b65      	ldr	r3, [pc, #404]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0f0      	beq.n	8004ea8 <HAL_RCC_OscConfig+0xe4>
 8004ec6:	e014      	b.n	8004ef2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec8:	f7fd fc22 	bl	8002710 <HAL_GetTick>
 8004ecc:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ed0:	f7fd fc1e 	bl	8002710 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b64      	cmp	r3, #100	; 0x64
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e31e      	b.n	8005520 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ee2:	4b5b      	ldr	r3, [pc, #364]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1f0      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x10c>
 8004eee:	e000      	b.n	8004ef2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 80b0 	beq.w	8005060 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f00:	4b53      	ldr	r3, [pc, #332]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f08:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f0a:	4b51      	ldr	r3, [pc, #324]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8004f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d007      	beq.n	8004f26 <HAL_RCC_OscConfig+0x162>
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	2b18      	cmp	r3, #24
 8004f1a:	d149      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x1ec>
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d144      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f26:	4b4a      	ldr	r3, [pc, #296]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0304 	and.w	r3, r3, #4
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d005      	beq.n	8004f3e <HAL_RCC_OscConfig+0x17a>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e2f0      	b.n	8005520 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004f3e:	4b44      	ldr	r3, [pc, #272]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f023 0219 	bic.w	r2, r3, #25
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	4941      	ldr	r1, [pc, #260]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f50:	f7fd fbde 	bl	8002710 <HAL_GetTick>
 8004f54:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f58:	f7fd fbda 	bl	8002710 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e2da      	b.n	8005520 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f6a:	4b39      	ldr	r3, [pc, #228]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0304 	and.w	r3, r3, #4
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0f0      	beq.n	8004f58 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f76:	f7fd fbf9 	bl	800276c <HAL_GetREVID>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	f241 0303 	movw	r3, #4099	; 0x1003
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d80a      	bhi.n	8004f9a <HAL_RCC_OscConfig+0x1d6>
 8004f84:	4b32      	ldr	r3, [pc, #200]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	031b      	lsls	r3, r3, #12
 8004f92:	492f      	ldr	r1, [pc, #188]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f98:	e062      	b.n	8005060 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f9a:	4b2d      	ldr	r3, [pc, #180]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	061b      	lsls	r3, r3, #24
 8004fa8:	4929      	ldr	r1, [pc, #164]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fae:	e057      	b.n	8005060 <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d038      	beq.n	800502a <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004fb8:	4b25      	ldr	r3, [pc, #148]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f023 0219 	bic.w	r2, r3, #25
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	4922      	ldr	r1, [pc, #136]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fca:	f7fd fba1 	bl	8002710 <HAL_GetTick>
 8004fce:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fd2:	f7fd fb9d 	bl	8002710 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e29d      	b.n	8005520 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fe4:	4b1a      	ldr	r3, [pc, #104]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0f0      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ff0:	f7fd fbbc 	bl	800276c <HAL_GetREVID>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	f241 0303 	movw	r3, #4099	; 0x1003
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d80a      	bhi.n	8005014 <HAL_RCC_OscConfig+0x250>
 8004ffe:	4b14      	ldr	r3, [pc, #80]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	031b      	lsls	r3, r3, #12
 800500c:	4910      	ldr	r1, [pc, #64]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 800500e:	4313      	orrs	r3, r2
 8005010:	604b      	str	r3, [r1, #4]
 8005012:	e025      	b.n	8005060 <HAL_RCC_OscConfig+0x29c>
 8005014:	4b0e      	ldr	r3, [pc, #56]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	061b      	lsls	r3, r3, #24
 8005022:	490b      	ldr	r1, [pc, #44]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8005024:	4313      	orrs	r3, r2
 8005026:	604b      	str	r3, [r1, #4]
 8005028:	e01a      	b.n	8005060 <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800502a:	4b09      	ldr	r3, [pc, #36]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a08      	ldr	r2, [pc, #32]	; (8005050 <HAL_RCC_OscConfig+0x28c>)
 8005030:	f023 0301 	bic.w	r3, r3, #1
 8005034:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005036:	f7fd fb6b 	bl	8002710 <HAL_GetTick>
 800503a:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800503c:	e00a      	b.n	8005054 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800503e:	f7fd fb67 	bl	8002710 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	2b02      	cmp	r3, #2
 800504a:	d903      	bls.n	8005054 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e267      	b.n	8005520 <HAL_RCC_OscConfig+0x75c>
 8005050:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005054:	4ba0      	ldr	r3, [pc, #640]	; (80052d8 <HAL_RCC_OscConfig+0x514>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1ee      	bne.n	800503e <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0310 	and.w	r3, r3, #16
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 808f 	beq.w	800518c <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800506e:	4b9a      	ldr	r3, [pc, #616]	; (80052d8 <HAL_RCC_OscConfig+0x514>)
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005076:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005078:	4b97      	ldr	r3, [pc, #604]	; (80052d8 <HAL_RCC_OscConfig+0x514>)
 800507a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507c:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	2b08      	cmp	r3, #8
 8005082:	d007      	beq.n	8005094 <HAL_RCC_OscConfig+0x2d0>
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	2b18      	cmp	r3, #24
 8005088:	d12d      	bne.n	80050e6 <HAL_RCC_OscConfig+0x322>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f003 0303 	and.w	r3, r3, #3
 8005090:	2b01      	cmp	r3, #1
 8005092:	d128      	bne.n	80050e6 <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005094:	4b90      	ldr	r3, [pc, #576]	; (80052d8 <HAL_RCC_OscConfig+0x514>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509c:	2b00      	cmp	r3, #0
 800509e:	d005      	beq.n	80050ac <HAL_RCC_OscConfig+0x2e8>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	69db      	ldr	r3, [r3, #28]
 80050a4:	2b80      	cmp	r3, #128	; 0x80
 80050a6:	d001      	beq.n	80050ac <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e239      	b.n	8005520 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80050ac:	f7fd fb5e 	bl	800276c <HAL_GetREVID>
 80050b0:	4602      	mov	r2, r0
 80050b2:	f241 0303 	movw	r3, #4099	; 0x1003
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d80a      	bhi.n	80050d0 <HAL_RCC_OscConfig+0x30c>
 80050ba:	4b87      	ldr	r3, [pc, #540]	; (80052d8 <HAL_RCC_OscConfig+0x514>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	069b      	lsls	r3, r3, #26
 80050c8:	4983      	ldr	r1, [pc, #524]	; (80052d8 <HAL_RCC_OscConfig+0x514>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80050ce:	e05d      	b.n	800518c <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80050d0:	4b81      	ldr	r3, [pc, #516]	; (80052d8 <HAL_RCC_OscConfig+0x514>)
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	061b      	lsls	r3, r3, #24
 80050de:	497e      	ldr	r1, [pc, #504]	; (80052d8 <HAL_RCC_OscConfig+0x514>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80050e4:	e052      	b.n	800518c <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d035      	beq.n	800515a <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80050ee:	4b7a      	ldr	r3, [pc, #488]	; (80052d8 <HAL_RCC_OscConfig+0x514>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a79      	ldr	r2, [pc, #484]	; (80052d8 <HAL_RCC_OscConfig+0x514>)
 80050f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050fa:	f7fd fb09 	bl	8002710 <HAL_GetTick>
 80050fe:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005100:	e008      	b.n	8005114 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005102:	f7fd fb05 	bl	8002710 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e205      	b.n	8005520 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005114:	4b70      	ldr	r3, [pc, #448]	; (80052d8 <HAL_RCC_OscConfig+0x514>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0f0      	beq.n	8005102 <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005120:	f7fd fb24 	bl	800276c <HAL_GetREVID>
 8005124:	4602      	mov	r2, r0
 8005126:	f241 0303 	movw	r3, #4099	; 0x1003
 800512a:	429a      	cmp	r2, r3
 800512c:	d80a      	bhi.n	8005144 <HAL_RCC_OscConfig+0x380>
 800512e:	4b6a      	ldr	r3, [pc, #424]	; (80052d8 <HAL_RCC_OscConfig+0x514>)
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	069b      	lsls	r3, r3, #26
 800513c:	4966      	ldr	r1, [pc, #408]	; (80052d8 <HAL_RCC_OscConfig+0x514>)
 800513e:	4313      	orrs	r3, r2
 8005140:	604b      	str	r3, [r1, #4]
 8005142:	e023      	b.n	800518c <HAL_RCC_OscConfig+0x3c8>
 8005144:	4b64      	ldr	r3, [pc, #400]	; (80052d8 <HAL_RCC_OscConfig+0x514>)
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	061b      	lsls	r3, r3, #24
 8005152:	4961      	ldr	r1, [pc, #388]	; (80052d8 <HAL_RCC_OscConfig+0x514>)
 8005154:	4313      	orrs	r3, r2
 8005156:	60cb      	str	r3, [r1, #12]
 8005158:	e018      	b.n	800518c <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800515a:	4b5f      	ldr	r3, [pc, #380]	; (80052d8 <HAL_RCC_OscConfig+0x514>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a5e      	ldr	r2, [pc, #376]	; (80052d8 <HAL_RCC_OscConfig+0x514>)
 8005160:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005166:	f7fd fad3 	bl	8002710 <HAL_GetTick>
 800516a:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800516c:	e008      	b.n	8005180 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800516e:	f7fd facf 	bl	8002710 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d901      	bls.n	8005180 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e1cf      	b.n	8005520 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005180:	4b55      	ldr	r3, [pc, #340]	; (80052d8 <HAL_RCC_OscConfig+0x514>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1f0      	bne.n	800516e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0308 	and.w	r3, r3, #8
 8005194:	2b00      	cmp	r3, #0
 8005196:	d036      	beq.n	8005206 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d019      	beq.n	80051d4 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051a0:	4b4d      	ldr	r3, [pc, #308]	; (80052d8 <HAL_RCC_OscConfig+0x514>)
 80051a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051a4:	4a4c      	ldr	r2, [pc, #304]	; (80052d8 <HAL_RCC_OscConfig+0x514>)
 80051a6:	f043 0301 	orr.w	r3, r3, #1
 80051aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ac:	f7fd fab0 	bl	8002710 <HAL_GetTick>
 80051b0:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051b4:	f7fd faac 	bl	8002710 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e1ac      	b.n	8005520 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80051c6:	4b44      	ldr	r3, [pc, #272]	; (80052d8 <HAL_RCC_OscConfig+0x514>)
 80051c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0f0      	beq.n	80051b4 <HAL_RCC_OscConfig+0x3f0>
 80051d2:	e018      	b.n	8005206 <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051d4:	4b40      	ldr	r3, [pc, #256]	; (80052d8 <HAL_RCC_OscConfig+0x514>)
 80051d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051d8:	4a3f      	ldr	r2, [pc, #252]	; (80052d8 <HAL_RCC_OscConfig+0x514>)
 80051da:	f023 0301 	bic.w	r3, r3, #1
 80051de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051e0:	f7fd fa96 	bl	8002710 <HAL_GetTick>
 80051e4:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80051e6:	e008      	b.n	80051fa <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051e8:	f7fd fa92 	bl	8002710 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e192      	b.n	8005520 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80051fa:	4b37      	ldr	r3, [pc, #220]	; (80052d8 <HAL_RCC_OscConfig+0x514>)
 80051fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1f0      	bne.n	80051e8 <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0320 	and.w	r3, r3, #32
 800520e:	2b00      	cmp	r3, #0
 8005210:	d036      	beq.n	8005280 <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d019      	beq.n	800524e <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800521a:	4b2f      	ldr	r3, [pc, #188]	; (80052d8 <HAL_RCC_OscConfig+0x514>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a2e      	ldr	r2, [pc, #184]	; (80052d8 <HAL_RCC_OscConfig+0x514>)
 8005220:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005224:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005226:	f7fd fa73 	bl	8002710 <HAL_GetTick>
 800522a:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800522c:	e008      	b.n	8005240 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800522e:	f7fd fa6f 	bl	8002710 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d901      	bls.n	8005240 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e16f      	b.n	8005520 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005240:	4b25      	ldr	r3, [pc, #148]	; (80052d8 <HAL_RCC_OscConfig+0x514>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d0f0      	beq.n	800522e <HAL_RCC_OscConfig+0x46a>
 800524c:	e018      	b.n	8005280 <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800524e:	4b22      	ldr	r3, [pc, #136]	; (80052d8 <HAL_RCC_OscConfig+0x514>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a21      	ldr	r2, [pc, #132]	; (80052d8 <HAL_RCC_OscConfig+0x514>)
 8005254:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005258:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800525a:	f7fd fa59 	bl	8002710 <HAL_GetTick>
 800525e:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005260:	e008      	b.n	8005274 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005262:	f7fd fa55 	bl	8002710 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d901      	bls.n	8005274 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e155      	b.n	8005520 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005274:	4b18      	ldr	r3, [pc, #96]	; (80052d8 <HAL_RCC_OscConfig+0x514>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1f0      	bne.n	8005262 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 8086 	beq.w	800539a <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800528e:	4b13      	ldr	r3, [pc, #76]	; (80052dc <HAL_RCC_OscConfig+0x518>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a12      	ldr	r2, [pc, #72]	; (80052dc <HAL_RCC_OscConfig+0x518>)
 8005294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005298:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800529a:	f7fd fa39 	bl	8002710 <HAL_GetTick>
 800529e:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052a0:	e008      	b.n	80052b4 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80052a2:	f7fd fa35 	bl	8002710 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	2b64      	cmp	r3, #100	; 0x64
 80052ae:	d901      	bls.n	80052b4 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e135      	b.n	8005520 <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052b4:	4b09      	ldr	r3, [pc, #36]	; (80052dc <HAL_RCC_OscConfig+0x518>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d0f0      	beq.n	80052a2 <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d10b      	bne.n	80052e0 <HAL_RCC_OscConfig+0x51c>
 80052c8:	4b03      	ldr	r3, [pc, #12]	; (80052d8 <HAL_RCC_OscConfig+0x514>)
 80052ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052cc:	4a02      	ldr	r2, [pc, #8]	; (80052d8 <HAL_RCC_OscConfig+0x514>)
 80052ce:	f043 0301 	orr.w	r3, r3, #1
 80052d2:	6713      	str	r3, [r2, #112]	; 0x70
 80052d4:	e032      	b.n	800533c <HAL_RCC_OscConfig+0x578>
 80052d6:	bf00      	nop
 80052d8:	58024400 	.word	0x58024400
 80052dc:	58024800 	.word	0x58024800
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10c      	bne.n	8005302 <HAL_RCC_OscConfig+0x53e>
 80052e8:	4b8f      	ldr	r3, [pc, #572]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 80052ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ec:	4a8e      	ldr	r2, [pc, #568]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 80052ee:	f023 0301 	bic.w	r3, r3, #1
 80052f2:	6713      	str	r3, [r2, #112]	; 0x70
 80052f4:	4b8c      	ldr	r3, [pc, #560]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 80052f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f8:	4a8b      	ldr	r2, [pc, #556]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 80052fa:	f023 0304 	bic.w	r3, r3, #4
 80052fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005300:	e01c      	b.n	800533c <HAL_RCC_OscConfig+0x578>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	2b05      	cmp	r3, #5
 8005308:	d10c      	bne.n	8005324 <HAL_RCC_OscConfig+0x560>
 800530a:	4b87      	ldr	r3, [pc, #540]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 800530c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530e:	4a86      	ldr	r2, [pc, #536]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 8005310:	f043 0304 	orr.w	r3, r3, #4
 8005314:	6713      	str	r3, [r2, #112]	; 0x70
 8005316:	4b84      	ldr	r3, [pc, #528]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 8005318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531a:	4a83      	ldr	r2, [pc, #524]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 800531c:	f043 0301 	orr.w	r3, r3, #1
 8005320:	6713      	str	r3, [r2, #112]	; 0x70
 8005322:	e00b      	b.n	800533c <HAL_RCC_OscConfig+0x578>
 8005324:	4b80      	ldr	r3, [pc, #512]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 8005326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005328:	4a7f      	ldr	r2, [pc, #508]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 800532a:	f023 0301 	bic.w	r3, r3, #1
 800532e:	6713      	str	r3, [r2, #112]	; 0x70
 8005330:	4b7d      	ldr	r3, [pc, #500]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 8005332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005334:	4a7c      	ldr	r2, [pc, #496]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 8005336:	f023 0304 	bic.w	r3, r3, #4
 800533a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d015      	beq.n	8005370 <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005344:	f7fd f9e4 	bl	8002710 <HAL_GetTick>
 8005348:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800534a:	e00a      	b.n	8005362 <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800534c:	f7fd f9e0 	bl	8002710 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	f241 3288 	movw	r2, #5000	; 0x1388
 800535a:	4293      	cmp	r3, r2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e0de      	b.n	8005520 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005362:	4b71      	ldr	r3, [pc, #452]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 8005364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0ee      	beq.n	800534c <HAL_RCC_OscConfig+0x588>
 800536e:	e014      	b.n	800539a <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005370:	f7fd f9ce 	bl	8002710 <HAL_GetTick>
 8005374:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005376:	e00a      	b.n	800538e <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005378:	f7fd f9ca 	bl	8002710 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	f241 3288 	movw	r2, #5000	; 0x1388
 8005386:	4293      	cmp	r3, r2
 8005388:	d901      	bls.n	800538e <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e0c8      	b.n	8005520 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800538e:	4b66      	ldr	r3, [pc, #408]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 8005390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1ee      	bne.n	8005378 <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f000 80bd 	beq.w	800551e <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80053a4:	4b60      	ldr	r3, [pc, #384]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053ac:	2b18      	cmp	r3, #24
 80053ae:	f000 80b4 	beq.w	800551a <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	f040 8095 	bne.w	80054e6 <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053bc:	4b5a      	ldr	r3, [pc, #360]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a59      	ldr	r2, [pc, #356]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 80053c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c8:	f7fd f9a2 	bl	8002710 <HAL_GetTick>
 80053cc:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053d0:	f7fd f99e 	bl	8002710 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e09e      	b.n	8005520 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80053e2:	4b51      	ldr	r3, [pc, #324]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1f0      	bne.n	80053d0 <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053ee:	4b4e      	ldr	r3, [pc, #312]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 80053f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053f2:	4b4e      	ldr	r3, [pc, #312]	; (800552c <HAL_RCC_OscConfig+0x768>)
 80053f4:	4013      	ands	r3, r2
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80053fe:	0112      	lsls	r2, r2, #4
 8005400:	430a      	orrs	r2, r1
 8005402:	4949      	ldr	r1, [pc, #292]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 8005404:	4313      	orrs	r3, r2
 8005406:	628b      	str	r3, [r1, #40]	; 0x28
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540c:	3b01      	subs	r3, #1
 800540e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005416:	3b01      	subs	r3, #1
 8005418:	025b      	lsls	r3, r3, #9
 800541a:	b29b      	uxth	r3, r3
 800541c:	431a      	orrs	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005422:	3b01      	subs	r3, #1
 8005424:	041b      	lsls	r3, r3, #16
 8005426:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800542a:	431a      	orrs	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005430:	3b01      	subs	r3, #1
 8005432:	061b      	lsls	r3, r3, #24
 8005434:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005438:	493b      	ldr	r1, [pc, #236]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 800543a:	4313      	orrs	r3, r2
 800543c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800543e:	4b3a      	ldr	r3, [pc, #232]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 8005440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005442:	4a39      	ldr	r2, [pc, #228]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 8005444:	f023 0301 	bic.w	r3, r3, #1
 8005448:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800544a:	4b37      	ldr	r3, [pc, #220]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 800544c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800544e:	4b38      	ldr	r3, [pc, #224]	; (8005530 <HAL_RCC_OscConfig+0x76c>)
 8005450:	4013      	ands	r3, r2
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005456:	00d2      	lsls	r2, r2, #3
 8005458:	4933      	ldr	r1, [pc, #204]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 800545a:	4313      	orrs	r3, r2
 800545c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800545e:	4b32      	ldr	r3, [pc, #200]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 8005460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005462:	f023 020c 	bic.w	r2, r3, #12
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	492f      	ldr	r1, [pc, #188]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 800546c:	4313      	orrs	r3, r2
 800546e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005470:	4b2d      	ldr	r3, [pc, #180]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 8005472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005474:	f023 0202 	bic.w	r2, r3, #2
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547c:	492a      	ldr	r1, [pc, #168]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 800547e:	4313      	orrs	r3, r2
 8005480:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005482:	4b29      	ldr	r3, [pc, #164]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 8005484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005486:	4a28      	ldr	r2, [pc, #160]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 8005488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800548c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800548e:	4b26      	ldr	r3, [pc, #152]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 8005490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005492:	4a25      	ldr	r2, [pc, #148]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 8005494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005498:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800549a:	4b23      	ldr	r3, [pc, #140]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 800549c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549e:	4a22      	ldr	r2, [pc, #136]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 80054a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80054a6:	4b20      	ldr	r3, [pc, #128]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 80054a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054aa:	4a1f      	ldr	r2, [pc, #124]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 80054ac:	f043 0301 	orr.w	r3, r3, #1
 80054b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054b2:	4b1d      	ldr	r3, [pc, #116]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a1c      	ldr	r2, [pc, #112]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 80054b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054be:	f7fd f927 	bl	8002710 <HAL_GetTick>
 80054c2:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054c4:	e008      	b.n	80054d8 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054c6:	f7fd f923 	bl	8002710 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d901      	bls.n	80054d8 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e023      	b.n	8005520 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80054d8:	4b13      	ldr	r3, [pc, #76]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d0f0      	beq.n	80054c6 <HAL_RCC_OscConfig+0x702>
 80054e4:	e01b      	b.n	800551e <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054e6:	4b10      	ldr	r3, [pc, #64]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a0f      	ldr	r2, [pc, #60]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 80054ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f2:	f7fd f90d 	bl	8002710 <HAL_GetTick>
 80054f6:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80054f8:	e008      	b.n	800550c <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054fa:	f7fd f909 	bl	8002710 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d901      	bls.n	800550c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e009      	b.n	8005520 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800550c:	4b06      	ldr	r3, [pc, #24]	; (8005528 <HAL_RCC_OscConfig+0x764>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1f0      	bne.n	80054fa <HAL_RCC_OscConfig+0x736>
 8005518:	e001      	b.n	800551e <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e000      	b.n	8005520 <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3728      	adds	r7, #40	; 0x28
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	58024400 	.word	0x58024400
 800552c:	fffffc0c 	.word	0xfffffc0c
 8005530:	ffff0007 	.word	0xffff0007

08005534 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d101      	bne.n	8005548 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e18d      	b.n	8005864 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005548:	4b8a      	ldr	r3, [pc, #552]	; (8005774 <HAL_RCC_ClockConfig+0x240>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 030f 	and.w	r3, r3, #15
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d910      	bls.n	8005578 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005556:	4b87      	ldr	r3, [pc, #540]	; (8005774 <HAL_RCC_ClockConfig+0x240>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f023 020f 	bic.w	r2, r3, #15
 800555e:	4985      	ldr	r1, [pc, #532]	; (8005774 <HAL_RCC_ClockConfig+0x240>)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	4313      	orrs	r3, r2
 8005564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005566:	4b83      	ldr	r3, [pc, #524]	; (8005774 <HAL_RCC_ClockConfig+0x240>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	429a      	cmp	r2, r3
 8005572:	d001      	beq.n	8005578 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e175      	b.n	8005864 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b00      	cmp	r3, #0
 8005582:	d010      	beq.n	80055a6 <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	691a      	ldr	r2, [r3, #16]
 8005588:	4b7b      	ldr	r3, [pc, #492]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005590:	429a      	cmp	r2, r3
 8005592:	d908      	bls.n	80055a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005594:	4b78      	ldr	r3, [pc, #480]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	4975      	ldr	r1, [pc, #468]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0308 	and.w	r3, r3, #8
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d010      	beq.n	80055d4 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	695a      	ldr	r2, [r3, #20]
 80055b6:	4b70      	ldr	r3, [pc, #448]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055be:	429a      	cmp	r2, r3
 80055c0:	d908      	bls.n	80055d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80055c2:	4b6d      	ldr	r3, [pc, #436]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	496a      	ldr	r1, [pc, #424]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0310 	and.w	r3, r3, #16
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d010      	beq.n	8005602 <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	699a      	ldr	r2, [r3, #24]
 80055e4:	4b64      	ldr	r3, [pc, #400]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d908      	bls.n	8005602 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80055f0:	4b61      	ldr	r3, [pc, #388]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80055f2:	69db      	ldr	r3, [r3, #28]
 80055f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	495e      	ldr	r1, [pc, #376]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0320 	and.w	r3, r3, #32
 800560a:	2b00      	cmp	r3, #0
 800560c:	d010      	beq.n	8005630 <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	69da      	ldr	r2, [r3, #28]
 8005612:	4b59      	ldr	r3, [pc, #356]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800561a:	429a      	cmp	r2, r3
 800561c:	d908      	bls.n	8005630 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800561e:	4b56      	ldr	r3, [pc, #344]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	4953      	ldr	r1, [pc, #332]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 800562c:	4313      	orrs	r3, r2
 800562e:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d010      	beq.n	800565e <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68da      	ldr	r2, [r3, #12]
 8005640:	4b4d      	ldr	r3, [pc, #308]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	f003 030f 	and.w	r3, r3, #15
 8005648:	429a      	cmp	r2, r3
 800564a:	d908      	bls.n	800565e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800564c:	4b4a      	ldr	r3, [pc, #296]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	f023 020f 	bic.w	r2, r3, #15
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	4947      	ldr	r1, [pc, #284]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 800565a:	4313      	orrs	r3, r2
 800565c:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d055      	beq.n	8005716 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800566a:	4b43      	ldr	r3, [pc, #268]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	4940      	ldr	r1, [pc, #256]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 8005678:	4313      	orrs	r3, r2
 800567a:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2b02      	cmp	r3, #2
 8005682:	d107      	bne.n	8005694 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005684:	4b3c      	ldr	r3, [pc, #240]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d121      	bne.n	80056d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e0e7      	b.n	8005864 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	2b03      	cmp	r3, #3
 800569a:	d107      	bne.n	80056ac <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800569c:	4b36      	ldr	r3, [pc, #216]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d115      	bne.n	80056d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e0db      	b.n	8005864 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d107      	bne.n	80056c4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056b4:	4b30      	ldr	r3, [pc, #192]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d109      	bne.n	80056d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e0cf      	b.n	8005864 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056c4:	4b2c      	ldr	r3, [pc, #176]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0304 	and.w	r3, r3, #4
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e0c7      	b.n	8005864 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80056d4:	4b28      	ldr	r3, [pc, #160]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	f023 0207 	bic.w	r2, r3, #7
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	4925      	ldr	r1, [pc, #148]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e6:	f7fd f813 	bl	8002710 <HAL_GetTick>
 80056ea:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ec:	e00a      	b.n	8005704 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056ee:	f7fd f80f 	bl	8002710 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d901      	bls.n	8005704 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e0af      	b.n	8005864 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005704:	4b1c      	ldr	r3, [pc, #112]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	429a      	cmp	r2, r3
 8005714:	d1eb      	bne.n	80056ee <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d010      	beq.n	8005744 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	4b14      	ldr	r3, [pc, #80]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	f003 030f 	and.w	r3, r3, #15
 800572e:	429a      	cmp	r2, r3
 8005730:	d208      	bcs.n	8005744 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005732:	4b11      	ldr	r3, [pc, #68]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	f023 020f 	bic.w	r2, r3, #15
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	490e      	ldr	r1, [pc, #56]	; (8005778 <HAL_RCC_ClockConfig+0x244>)
 8005740:	4313      	orrs	r3, r2
 8005742:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005744:	4b0b      	ldr	r3, [pc, #44]	; (8005774 <HAL_RCC_ClockConfig+0x240>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 030f 	and.w	r3, r3, #15
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	429a      	cmp	r2, r3
 8005750:	d214      	bcs.n	800577c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005752:	4b08      	ldr	r3, [pc, #32]	; (8005774 <HAL_RCC_ClockConfig+0x240>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f023 020f 	bic.w	r2, r3, #15
 800575a:	4906      	ldr	r1, [pc, #24]	; (8005774 <HAL_RCC_ClockConfig+0x240>)
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	4313      	orrs	r3, r2
 8005760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005762:	4b04      	ldr	r3, [pc, #16]	; (8005774 <HAL_RCC_ClockConfig+0x240>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 030f 	and.w	r3, r3, #15
 800576a:	683a      	ldr	r2, [r7, #0]
 800576c:	429a      	cmp	r2, r3
 800576e:	d005      	beq.n	800577c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e077      	b.n	8005864 <HAL_RCC_ClockConfig+0x330>
 8005774:	52002000 	.word	0x52002000
 8005778:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0304 	and.w	r3, r3, #4
 8005784:	2b00      	cmp	r3, #0
 8005786:	d010      	beq.n	80057aa <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	691a      	ldr	r2, [r3, #16]
 800578c:	4b37      	ldr	r3, [pc, #220]	; (800586c <HAL_RCC_ClockConfig+0x338>)
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005794:	429a      	cmp	r2, r3
 8005796:	d208      	bcs.n	80057aa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005798:	4b34      	ldr	r3, [pc, #208]	; (800586c <HAL_RCC_ClockConfig+0x338>)
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	4931      	ldr	r1, [pc, #196]	; (800586c <HAL_RCC_ClockConfig+0x338>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0308 	and.w	r3, r3, #8
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d010      	beq.n	80057d8 <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	695a      	ldr	r2, [r3, #20]
 80057ba:	4b2c      	ldr	r3, [pc, #176]	; (800586c <HAL_RCC_ClockConfig+0x338>)
 80057bc:	69db      	ldr	r3, [r3, #28]
 80057be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d208      	bcs.n	80057d8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80057c6:	4b29      	ldr	r3, [pc, #164]	; (800586c <HAL_RCC_ClockConfig+0x338>)
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	4926      	ldr	r1, [pc, #152]	; (800586c <HAL_RCC_ClockConfig+0x338>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0310 	and.w	r3, r3, #16
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d010      	beq.n	8005806 <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	699a      	ldr	r2, [r3, #24]
 80057e8:	4b20      	ldr	r3, [pc, #128]	; (800586c <HAL_RCC_ClockConfig+0x338>)
 80057ea:	69db      	ldr	r3, [r3, #28]
 80057ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d208      	bcs.n	8005806 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80057f4:	4b1d      	ldr	r3, [pc, #116]	; (800586c <HAL_RCC_ClockConfig+0x338>)
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	491a      	ldr	r1, [pc, #104]	; (800586c <HAL_RCC_ClockConfig+0x338>)
 8005802:	4313      	orrs	r3, r2
 8005804:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0320 	and.w	r3, r3, #32
 800580e:	2b00      	cmp	r3, #0
 8005810:	d010      	beq.n	8005834 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	69da      	ldr	r2, [r3, #28]
 8005816:	4b15      	ldr	r3, [pc, #84]	; (800586c <HAL_RCC_ClockConfig+0x338>)
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800581e:	429a      	cmp	r2, r3
 8005820:	d208      	bcs.n	8005834 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005822:	4b12      	ldr	r3, [pc, #72]	; (800586c <HAL_RCC_ClockConfig+0x338>)
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	490f      	ldr	r1, [pc, #60]	; (800586c <HAL_RCC_ClockConfig+0x338>)
 8005830:	4313      	orrs	r3, r2
 8005832:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005834:	f000 f822 	bl	800587c <HAL_RCC_GetSysClockFreq>
 8005838:	4601      	mov	r1, r0
 800583a:	4b0c      	ldr	r3, [pc, #48]	; (800586c <HAL_RCC_ClockConfig+0x338>)
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	0a1b      	lsrs	r3, r3, #8
 8005840:	f003 030f 	and.w	r3, r3, #15
 8005844:	4a0a      	ldr	r2, [pc, #40]	; (8005870 <HAL_RCC_ClockConfig+0x33c>)
 8005846:	5cd3      	ldrb	r3, [r2, r3]
 8005848:	f003 031f 	and.w	r3, r3, #31
 800584c:	fa21 f303 	lsr.w	r3, r1, r3
 8005850:	4a08      	ldr	r2, [pc, #32]	; (8005874 <HAL_RCC_ClockConfig+0x340>)
 8005852:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005854:	4b08      	ldr	r3, [pc, #32]	; (8005878 <HAL_RCC_ClockConfig+0x344>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4618      	mov	r0, r3
 800585a:	f7fc ff0f 	bl	800267c <HAL_InitTick>
 800585e:	4603      	mov	r3, r0
 8005860:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8005862:	7afb      	ldrb	r3, [r7, #11]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	58024400 	.word	0x58024400
 8005870:	0800c140 	.word	0x0800c140
 8005874:	240005a8 	.word	0x240005a8
 8005878:	240005b0 	.word	0x240005b0

0800587c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800587c:	b480      	push	{r7}
 800587e:	b089      	sub	sp, #36	; 0x24
 8005880:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005882:	4baf      	ldr	r3, [pc, #700]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800588a:	2b18      	cmp	r3, #24
 800588c:	f200 814e 	bhi.w	8005b2c <HAL_RCC_GetSysClockFreq+0x2b0>
 8005890:	a201      	add	r2, pc, #4	; (adr r2, 8005898 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005896:	bf00      	nop
 8005898:	080058fd 	.word	0x080058fd
 800589c:	08005b2d 	.word	0x08005b2d
 80058a0:	08005b2d 	.word	0x08005b2d
 80058a4:	08005b2d 	.word	0x08005b2d
 80058a8:	08005b2d 	.word	0x08005b2d
 80058ac:	08005b2d 	.word	0x08005b2d
 80058b0:	08005b2d 	.word	0x08005b2d
 80058b4:	08005b2d 	.word	0x08005b2d
 80058b8:	08005923 	.word	0x08005923
 80058bc:	08005b2d 	.word	0x08005b2d
 80058c0:	08005b2d 	.word	0x08005b2d
 80058c4:	08005b2d 	.word	0x08005b2d
 80058c8:	08005b2d 	.word	0x08005b2d
 80058cc:	08005b2d 	.word	0x08005b2d
 80058d0:	08005b2d 	.word	0x08005b2d
 80058d4:	08005b2d 	.word	0x08005b2d
 80058d8:	08005929 	.word	0x08005929
 80058dc:	08005b2d 	.word	0x08005b2d
 80058e0:	08005b2d 	.word	0x08005b2d
 80058e4:	08005b2d 	.word	0x08005b2d
 80058e8:	08005b2d 	.word	0x08005b2d
 80058ec:	08005b2d 	.word	0x08005b2d
 80058f0:	08005b2d 	.word	0x08005b2d
 80058f4:	08005b2d 	.word	0x08005b2d
 80058f8:	0800592f 	.word	0x0800592f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058fc:	4b90      	ldr	r3, [pc, #576]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0320 	and.w	r3, r3, #32
 8005904:	2b00      	cmp	r3, #0
 8005906:	d009      	beq.n	800591c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005908:	4b8d      	ldr	r3, [pc, #564]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	08db      	lsrs	r3, r3, #3
 800590e:	f003 0303 	and.w	r3, r3, #3
 8005912:	4a8c      	ldr	r2, [pc, #560]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005914:	fa22 f303 	lsr.w	r3, r2, r3
 8005918:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800591a:	e10a      	b.n	8005b32 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800591c:	4b89      	ldr	r3, [pc, #548]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800591e:	61bb      	str	r3, [r7, #24]
    break;
 8005920:	e107      	b.n	8005b32 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005922:	4b89      	ldr	r3, [pc, #548]	; (8005b48 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005924:	61bb      	str	r3, [r7, #24]
    break;
 8005926:	e104      	b.n	8005b32 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005928:	4b88      	ldr	r3, [pc, #544]	; (8005b4c <HAL_RCC_GetSysClockFreq+0x2d0>)
 800592a:	61bb      	str	r3, [r7, #24]
    break;
 800592c:	e101      	b.n	8005b32 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800592e:	4b84      	ldr	r3, [pc, #528]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005932:	f003 0303 	and.w	r3, r3, #3
 8005936:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005938:	4b81      	ldr	r3, [pc, #516]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800593a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593c:	091b      	lsrs	r3, r3, #4
 800593e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005942:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005944:	4b7e      	ldr	r3, [pc, #504]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800594e:	4b7c      	ldr	r3, [pc, #496]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005952:	08db      	lsrs	r3, r3, #3
 8005954:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	fb02 f303 	mul.w	r3, r2, r3
 800595e:	ee07 3a90 	vmov	s15, r3
 8005962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005966:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 80da 	beq.w	8005b26 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d05a      	beq.n	8005a2e <HAL_RCC_GetSysClockFreq+0x1b2>
 8005978:	2b01      	cmp	r3, #1
 800597a:	d302      	bcc.n	8005982 <HAL_RCC_GetSysClockFreq+0x106>
 800597c:	2b02      	cmp	r3, #2
 800597e:	d078      	beq.n	8005a72 <HAL_RCC_GetSysClockFreq+0x1f6>
 8005980:	e099      	b.n	8005ab6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005982:	4b6f      	ldr	r3, [pc, #444]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0320 	and.w	r3, r3, #32
 800598a:	2b00      	cmp	r3, #0
 800598c:	d02d      	beq.n	80059ea <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800598e:	4b6c      	ldr	r3, [pc, #432]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	08db      	lsrs	r3, r3, #3
 8005994:	f003 0303 	and.w	r3, r3, #3
 8005998:	4a6a      	ldr	r2, [pc, #424]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800599a:	fa22 f303 	lsr.w	r3, r2, r3
 800599e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	ee07 3a90 	vmov	s15, r3
 80059a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	ee07 3a90 	vmov	s15, r3
 80059b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059b8:	4b61      	ldr	r3, [pc, #388]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80059ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059c0:	ee07 3a90 	vmov	s15, r3
 80059c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059c8:	ed97 6a02 	vldr	s12, [r7, #8]
 80059cc:	eddf 5a60 	vldr	s11, [pc, #384]	; 8005b50 <HAL_RCC_GetSysClockFreq+0x2d4>
 80059d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059e4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80059e8:	e087      	b.n	8005afa <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	ee07 3a90 	vmov	s15, r3
 80059f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059f4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8005b54 <HAL_RCC_GetSysClockFreq+0x2d8>
 80059f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059fc:	4b50      	ldr	r3, [pc, #320]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80059fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a04:	ee07 3a90 	vmov	s15, r3
 8005a08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a10:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8005b50 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005a14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a2c:	e065      	b.n	8005afa <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	ee07 3a90 	vmov	s15, r3
 8005a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a38:	eddf 6a47 	vldr	s13, [pc, #284]	; 8005b58 <HAL_RCC_GetSysClockFreq+0x2dc>
 8005a3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a40:	4b3f      	ldr	r3, [pc, #252]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a48:	ee07 3a90 	vmov	s15, r3
 8005a4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a50:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a54:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005b50 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005a58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a70:	e043      	b.n	8005afa <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	ee07 3a90 	vmov	s15, r3
 8005a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a7c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005b5c <HAL_RCC_GetSysClockFreq+0x2e0>
 8005a80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a84:	4b2e      	ldr	r3, [pc, #184]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a8c:	ee07 3a90 	vmov	s15, r3
 8005a90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a94:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a98:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005b50 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005a9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aa0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aa4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ab0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ab4:	e021      	b.n	8005afa <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	ee07 3a90 	vmov	s15, r3
 8005abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005b58 <HAL_RCC_GetSysClockFreq+0x2dc>
 8005ac4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ac8:	4b1d      	ldr	r3, [pc, #116]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ad0:	ee07 3a90 	vmov	s15, r3
 8005ad4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ad8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005adc:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8005b50 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005ae0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ae4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ae8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005af4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005af8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005afa:	4b11      	ldr	r3, [pc, #68]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afe:	0a5b      	lsrs	r3, r3, #9
 8005b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b04:	3301      	adds	r3, #1
 8005b06:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	ee07 3a90 	vmov	s15, r3
 8005b0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b12:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b1e:	ee17 3a90 	vmov	r3, s15
 8005b22:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005b24:	e005      	b.n	8005b32 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	61bb      	str	r3, [r7, #24]
    break;
 8005b2a:	e002      	b.n	8005b32 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8005b2c:	4b06      	ldr	r3, [pc, #24]	; (8005b48 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005b2e:	61bb      	str	r3, [r7, #24]
    break;
 8005b30:	bf00      	nop
  }

  return sysclockfreq;
 8005b32:	69bb      	ldr	r3, [r7, #24]
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3724      	adds	r7, #36	; 0x24
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	58024400 	.word	0x58024400
 8005b44:	03d09000 	.word	0x03d09000
 8005b48:	003d0900 	.word	0x003d0900
 8005b4c:	01312d00 	.word	0x01312d00
 8005b50:	46000000 	.word	0x46000000
 8005b54:	4c742400 	.word	0x4c742400
 8005b58:	4a742400 	.word	0x4a742400
 8005b5c:	4b989680 	.word	0x4b989680

08005b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b64:	f001 fd64 	bl	8007630 <HAL_RCCEx_GetD1SysClockFreq>
 8005b68:	4601      	mov	r1, r0
 8005b6a:	4b08      	ldr	r3, [pc, #32]	; (8005b8c <HAL_RCC_GetHCLKFreq+0x2c>)
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	f003 030f 	and.w	r3, r3, #15
 8005b72:	4a07      	ldr	r2, [pc, #28]	; (8005b90 <HAL_RCC_GetHCLKFreq+0x30>)
 8005b74:	5cd3      	ldrb	r3, [r2, r3]
 8005b76:	f003 031f 	and.w	r3, r3, #31
 8005b7a:	fa21 f303 	lsr.w	r3, r1, r3
 8005b7e:	4a05      	ldr	r2, [pc, #20]	; (8005b94 <HAL_RCC_GetHCLKFreq+0x34>)
 8005b80:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8005b82:	4b04      	ldr	r3, [pc, #16]	; (8005b94 <HAL_RCC_GetHCLKFreq+0x34>)
 8005b84:	681b      	ldr	r3, [r3, #0]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	58024400 	.word	0x58024400
 8005b90:	0800c140 	.word	0x0800c140
 8005b94:	240005ac 	.word	0x240005ac

08005b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005b9c:	f7ff ffe0 	bl	8005b60 <HAL_RCC_GetHCLKFreq>
 8005ba0:	4601      	mov	r1, r0
 8005ba2:	4b06      	ldr	r3, [pc, #24]	; (8005bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	091b      	lsrs	r3, r3, #4
 8005ba8:	f003 0307 	and.w	r3, r3, #7
 8005bac:	4a04      	ldr	r2, [pc, #16]	; (8005bc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bae:	5cd3      	ldrb	r3, [r2, r3]
 8005bb0:	f003 031f 	and.w	r3, r3, #31
 8005bb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	58024400 	.word	0x58024400
 8005bc0:	0800c140 	.word	0x0800c140

08005bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005bc8:	f7ff ffca 	bl	8005b60 <HAL_RCC_GetHCLKFreq>
 8005bcc:	4601      	mov	r1, r0
 8005bce:	4b06      	ldr	r3, [pc, #24]	; (8005be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	0a1b      	lsrs	r3, r3, #8
 8005bd4:	f003 0307 	and.w	r3, r3, #7
 8005bd8:	4a04      	ldr	r2, [pc, #16]	; (8005bec <HAL_RCC_GetPCLK2Freq+0x28>)
 8005bda:	5cd3      	ldrb	r3, [r2, r3]
 8005bdc:	f003 031f 	and.w	r3, r3, #31
 8005be0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	58024400 	.word	0x58024400
 8005bec:	0800c140 	.word	0x0800c140

08005bf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d03d      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c14:	d013      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005c16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c1a:	d802      	bhi.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d007      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005c20:	e01f      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005c22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c26:	d013      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005c28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c2c:	d01c      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005c2e:	e018      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c30:	4baf      	ldr	r3, [pc, #700]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c34:	4aae      	ldr	r2, [pc, #696]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005c36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c3c:	e015      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	3304      	adds	r3, #4
 8005c42:	2102      	movs	r1, #2
 8005c44:	4618      	mov	r0, r3
 8005c46:	f001 fd0f 	bl	8007668 <RCCEx_PLL2_Config>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c4e:	e00c      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	3324      	adds	r3, #36	; 0x24
 8005c54:	2102      	movs	r1, #2
 8005c56:	4618      	mov	r0, r3
 8005c58:	f001 fdb8 	bl	80077cc <RCCEx_PLL3_Config>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005c60:	e003      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	75fb      	strb	r3, [r7, #23]
      break;
 8005c66:	e000      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8005c68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c6a:	7dfb      	ldrb	r3, [r7, #23]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d109      	bne.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005c70:	4b9f      	ldr	r3, [pc, #636]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c7c:	499c      	ldr	r1, [pc, #624]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	650b      	str	r3, [r1, #80]	; 0x50
 8005c82:	e001      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c84:	7dfb      	ldrb	r3, [r7, #23]
 8005c86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d03d      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c98:	2b04      	cmp	r3, #4
 8005c9a:	d826      	bhi.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8005c9c:	a201      	add	r2, pc, #4	; (adr r2, 8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8005c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca2:	bf00      	nop
 8005ca4:	08005cb9 	.word	0x08005cb9
 8005ca8:	08005cc7 	.word	0x08005cc7
 8005cac:	08005cd9 	.word	0x08005cd9
 8005cb0:	08005cf1 	.word	0x08005cf1
 8005cb4:	08005cf1 	.word	0x08005cf1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cb8:	4b8d      	ldr	r3, [pc, #564]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbc:	4a8c      	ldr	r2, [pc, #560]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005cbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005cc4:	e015      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	3304      	adds	r3, #4
 8005cca:	2100      	movs	r1, #0
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f001 fccb 	bl	8007668 <RCCEx_PLL2_Config>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005cd6:	e00c      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	3324      	adds	r3, #36	; 0x24
 8005cdc:	2100      	movs	r1, #0
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f001 fd74 	bl	80077cc <RCCEx_PLL3_Config>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ce8:	e003      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	75fb      	strb	r3, [r7, #23]
      break;
 8005cee:	e000      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8005cf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cf2:	7dfb      	ldrb	r3, [r7, #23]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d109      	bne.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005cf8:	4b7d      	ldr	r3, [pc, #500]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cfc:	f023 0207 	bic.w	r2, r3, #7
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d04:	497a      	ldr	r1, [pc, #488]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	650b      	str	r3, [r1, #80]	; 0x50
 8005d0a:	e001      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d0c:	7dfb      	ldrb	r3, [r7, #23]
 8005d0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d03e      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d20:	2b80      	cmp	r3, #128	; 0x80
 8005d22:	d01c      	beq.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005d24:	2b80      	cmp	r3, #128	; 0x80
 8005d26:	d804      	bhi.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d008      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005d2c:	2b40      	cmp	r3, #64	; 0x40
 8005d2e:	d00d      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005d30:	e01e      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8005d32:	2bc0      	cmp	r3, #192	; 0xc0
 8005d34:	d01f      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d3a:	d01e      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005d3c:	e018      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d3e:	4b6c      	ldr	r3, [pc, #432]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d42:	4a6b      	ldr	r2, [pc, #428]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005d4a:	e017      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	3304      	adds	r3, #4
 8005d50:	2100      	movs	r1, #0
 8005d52:	4618      	mov	r0, r3
 8005d54:	f001 fc88 	bl	8007668 <RCCEx_PLL2_Config>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005d5c:	e00e      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	3324      	adds	r3, #36	; 0x24
 8005d62:	2100      	movs	r1, #0
 8005d64:	4618      	mov	r0, r3
 8005d66:	f001 fd31 	bl	80077cc <RCCEx_PLL3_Config>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005d6e:	e005      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	75fb      	strb	r3, [r7, #23]
      break;
 8005d74:	e002      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8005d76:	bf00      	nop
 8005d78:	e000      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8005d7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d7c:	7dfb      	ldrb	r3, [r7, #23]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d109      	bne.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005d82:	4b5b      	ldr	r3, [pc, #364]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d86:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d8e:	4958      	ldr	r1, [pc, #352]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	650b      	str	r3, [r1, #80]	; 0x50
 8005d94:	e001      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d96:	7dfb      	ldrb	r3, [r7, #23]
 8005d98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d044      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005dac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005db0:	d01f      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005db2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005db6:	d805      	bhi.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00a      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005dbc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dc0:	d00e      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8005dc2:	e01f      	b.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8005dc4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005dc8:	d01f      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8005dca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005dce:	d01e      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005dd0:	e018      	b.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dd2:	4b47      	ldr	r3, [pc, #284]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd6:	4a46      	ldr	r2, [pc, #280]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ddc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005dde:	e017      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	3304      	adds	r3, #4
 8005de4:	2100      	movs	r1, #0
 8005de6:	4618      	mov	r0, r3
 8005de8:	f001 fc3e 	bl	8007668 <RCCEx_PLL2_Config>
 8005dec:	4603      	mov	r3, r0
 8005dee:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005df0:	e00e      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	3324      	adds	r3, #36	; 0x24
 8005df6:	2100      	movs	r1, #0
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f001 fce7 	bl	80077cc <RCCEx_PLL3_Config>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e02:	e005      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	75fb      	strb	r3, [r7, #23]
      break;
 8005e08:	e002      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005e0a:	bf00      	nop
 8005e0c:	e000      	b.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005e0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e10:	7dfb      	ldrb	r3, [r7, #23]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10a      	bne.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005e16:	4b36      	ldr	r3, [pc, #216]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e1a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e24:	4932      	ldr	r1, [pc, #200]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	658b      	str	r3, [r1, #88]	; 0x58
 8005e2a:	e001      	b.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e2c:	7dfb      	ldrb	r3, [r7, #23]
 8005e2e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d044      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005e42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e46:	d01f      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005e48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e4c:	d805      	bhi.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00a      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8005e52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e56:	d00e      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005e58:	e01f      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8005e5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005e5e:	d01f      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005e60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e64:	d01e      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005e66:	e018      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e68:	4b21      	ldr	r3, [pc, #132]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6c:	4a20      	ldr	r2, [pc, #128]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005e6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e74:	e017      	b.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	3304      	adds	r3, #4
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f001 fbf3 	bl	8007668 <RCCEx_PLL2_Config>
 8005e82:	4603      	mov	r3, r0
 8005e84:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005e86:	e00e      	b.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3324      	adds	r3, #36	; 0x24
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f001 fc9c 	bl	80077cc <RCCEx_PLL3_Config>
 8005e94:	4603      	mov	r3, r0
 8005e96:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e98:	e005      	b.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	75fb      	strb	r3, [r7, #23]
      break;
 8005e9e:	e002      	b.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005ea0:	bf00      	nop
 8005ea2:	e000      	b.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8005ea4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ea6:	7dfb      	ldrb	r3, [r7, #23]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10a      	bne.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005eac:	4b10      	ldr	r3, [pc, #64]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005eba:	490d      	ldr	r1, [pc, #52]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	658b      	str	r3, [r1, #88]	; 0x58
 8005ec0:	e001      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ec2:	7dfb      	ldrb	r3, [r7, #23]
 8005ec4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d035      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ed6:	2b10      	cmp	r3, #16
 8005ed8:	d00c      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8005eda:	2b10      	cmp	r3, #16
 8005edc:	d802      	bhi.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d01b      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8005ee2:	e017      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005ee4:	2b20      	cmp	r3, #32
 8005ee6:	d00c      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8005ee8:	2b30      	cmp	r3, #48	; 0x30
 8005eea:	d018      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005eec:	e012      	b.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005eee:	bf00      	nop
 8005ef0:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ef4:	4baf      	ldr	r3, [pc, #700]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef8:	4aae      	ldr	r2, [pc, #696]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005efa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005efe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005f00:	e00e      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	3304      	adds	r3, #4
 8005f06:	2102      	movs	r1, #2
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f001 fbad 	bl	8007668 <RCCEx_PLL2_Config>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005f12:	e005      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	75fb      	strb	r3, [r7, #23]
      break;
 8005f18:	e002      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005f1a:	bf00      	nop
 8005f1c:	e000      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005f1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f20:	7dfb      	ldrb	r3, [r7, #23]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d109      	bne.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005f26:	4ba3      	ldr	r3, [pc, #652]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f2a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f32:	49a0      	ldr	r1, [pc, #640]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005f38:	e001      	b.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f3a:	7dfb      	ldrb	r3, [r7, #23]
 8005f3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d042      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f52:	d01f      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005f54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f58:	d805      	bhi.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00a      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8005f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f62:	d00e      	beq.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8005f64:	e01f      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8005f66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f6a:	d01f      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005f6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f70:	d01e      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8005f72:	e018      	b.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f74:	4b8f      	ldr	r3, [pc, #572]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f78:	4a8e      	ldr	r2, [pc, #568]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005f7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005f80:	e017      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	3304      	adds	r3, #4
 8005f86:	2100      	movs	r1, #0
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f001 fb6d 	bl	8007668 <RCCEx_PLL2_Config>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005f92:	e00e      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	3324      	adds	r3, #36	; 0x24
 8005f98:	2100      	movs	r1, #0
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f001 fc16 	bl	80077cc <RCCEx_PLL3_Config>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005fa4:	e005      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	75fb      	strb	r3, [r7, #23]
      break;
 8005faa:	e002      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005fac:	bf00      	nop
 8005fae:	e000      	b.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005fb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fb2:	7dfb      	ldrb	r3, [r7, #23]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d109      	bne.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005fb8:	4b7e      	ldr	r3, [pc, #504]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fbc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fc4:	497b      	ldr	r1, [pc, #492]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	650b      	str	r3, [r1, #80]	; 0x50
 8005fca:	e001      	b.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fcc:	7dfb      	ldrb	r3, [r7, #23]
 8005fce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d042      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fe4:	d01b      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005fe6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fea:	d805      	bhi.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d022      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8005ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ff4:	d00a      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005ff6:	e01b      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005ff8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ffc:	d01d      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8005ffe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006002:	d01c      	beq.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8006004:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006008:	d01b      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800600a:	e011      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	3304      	adds	r3, #4
 8006010:	2101      	movs	r1, #1
 8006012:	4618      	mov	r0, r3
 8006014:	f001 fb28 	bl	8007668 <RCCEx_PLL2_Config>
 8006018:	4603      	mov	r3, r0
 800601a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800601c:	e012      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3324      	adds	r3, #36	; 0x24
 8006022:	2101      	movs	r1, #1
 8006024:	4618      	mov	r0, r3
 8006026:	f001 fbd1 	bl	80077cc <RCCEx_PLL3_Config>
 800602a:	4603      	mov	r3, r0
 800602c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800602e:	e009      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	75fb      	strb	r3, [r7, #23]
      break;
 8006034:	e006      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006036:	bf00      	nop
 8006038:	e004      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800603a:	bf00      	nop
 800603c:	e002      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800603e:	bf00      	nop
 8006040:	e000      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006042:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006044:	7dfb      	ldrb	r3, [r7, #23]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d109      	bne.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800604a:	4b5a      	ldr	r3, [pc, #360]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800604c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800604e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006056:	4957      	ldr	r1, [pc, #348]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006058:	4313      	orrs	r3, r2
 800605a:	650b      	str	r3, [r1, #80]	; 0x50
 800605c:	e001      	b.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800605e:	7dfb      	ldrb	r3, [r7, #23]
 8006060:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d044      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006074:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006078:	d01b      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800607a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800607e:	d805      	bhi.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8006080:	2b00      	cmp	r3, #0
 8006082:	d022      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006084:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006088:	d00a      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800608a:	e01b      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800608c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006090:	d01d      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006092:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006096:	d01c      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8006098:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800609c:	d01b      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800609e:	e011      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	3304      	adds	r3, #4
 80060a4:	2101      	movs	r1, #1
 80060a6:	4618      	mov	r0, r3
 80060a8:	f001 fade 	bl	8007668 <RCCEx_PLL2_Config>
 80060ac:	4603      	mov	r3, r0
 80060ae:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80060b0:	e012      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	3324      	adds	r3, #36	; 0x24
 80060b6:	2101      	movs	r1, #1
 80060b8:	4618      	mov	r0, r3
 80060ba:	f001 fb87 	bl	80077cc <RCCEx_PLL3_Config>
 80060be:	4603      	mov	r3, r0
 80060c0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80060c2:	e009      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	75fb      	strb	r3, [r7, #23]
      break;
 80060c8:	e006      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80060ca:	bf00      	nop
 80060cc:	e004      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80060ce:	bf00      	nop
 80060d0:	e002      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80060d2:	bf00      	nop
 80060d4:	e000      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80060d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060d8:	7dfb      	ldrb	r3, [r7, #23]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10a      	bne.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80060de:	4b35      	ldr	r3, [pc, #212]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80060e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80060ec:	4931      	ldr	r1, [pc, #196]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	658b      	str	r3, [r1, #88]	; 0x58
 80060f2:	e001      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f4:	7dfb      	ldrb	r3, [r7, #23]
 80060f6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d02d      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006108:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800610c:	d005      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800610e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006112:	d009      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8006114:	2b00      	cmp	r3, #0
 8006116:	d013      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006118:	e00f      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800611a:	4b26      	ldr	r3, [pc, #152]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800611c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611e:	4a25      	ldr	r2, [pc, #148]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006124:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006126:	e00c      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	3304      	adds	r3, #4
 800612c:	2101      	movs	r1, #1
 800612e:	4618      	mov	r0, r3
 8006130:	f001 fa9a 	bl	8007668 <RCCEx_PLL2_Config>
 8006134:	4603      	mov	r3, r0
 8006136:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006138:	e003      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	75fb      	strb	r3, [r7, #23]
      break;
 800613e:	e000      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8006140:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006142:	7dfb      	ldrb	r3, [r7, #23]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d109      	bne.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006148:	4b1a      	ldr	r3, [pc, #104]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800614a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800614c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006154:	4917      	ldr	r1, [pc, #92]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006156:	4313      	orrs	r3, r2
 8006158:	650b      	str	r3, [r1, #80]	; 0x50
 800615a:	e001      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800615c:	7dfb      	ldrb	r3, [r7, #23]
 800615e:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d035      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006170:	2b03      	cmp	r3, #3
 8006172:	d81b      	bhi.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006174:	a201      	add	r2, pc, #4	; (adr r2, 800617c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8006176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800617a:	bf00      	nop
 800617c:	080061b9 	.word	0x080061b9
 8006180:	0800618d 	.word	0x0800618d
 8006184:	0800619b 	.word	0x0800619b
 8006188:	080061b9 	.word	0x080061b9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800618c:	4b09      	ldr	r3, [pc, #36]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800618e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006190:	4a08      	ldr	r2, [pc, #32]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006196:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006198:	e00f      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	3304      	adds	r3, #4
 800619e:	2102      	movs	r1, #2
 80061a0:	4618      	mov	r0, r3
 80061a2:	f001 fa61 	bl	8007668 <RCCEx_PLL2_Config>
 80061a6:	4603      	mov	r3, r0
 80061a8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80061aa:	e006      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	75fb      	strb	r3, [r7, #23]
      break;
 80061b0:	e003      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80061b2:	bf00      	nop
 80061b4:	58024400 	.word	0x58024400
      break;
 80061b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061ba:	7dfb      	ldrb	r3, [r7, #23]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d109      	bne.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80061c0:	4bba      	ldr	r3, [pc, #744]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80061c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061c4:	f023 0203 	bic.w	r2, r3, #3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061cc:	49b7      	ldr	r1, [pc, #732]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	64cb      	str	r3, [r1, #76]	; 0x4c
 80061d2:	e001      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061d4:	7dfb      	ldrb	r3, [r7, #23]
 80061d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f000 8086 	beq.w	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061e6:	4bb2      	ldr	r3, [pc, #712]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4ab1      	ldr	r2, [pc, #708]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80061ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061f2:	f7fc fa8d 	bl	8002710 <HAL_GetTick>
 80061f6:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061f8:	e009      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061fa:	f7fc fa89 	bl	8002710 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	2b64      	cmp	r3, #100	; 0x64
 8006206:	d902      	bls.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	75fb      	strb	r3, [r7, #23]
        break;
 800620c:	e005      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800620e:	4ba8      	ldr	r3, [pc, #672]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0ef      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800621a:	7dfb      	ldrb	r3, [r7, #23]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d166      	bne.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006220:	4ba2      	ldr	r3, [pc, #648]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006222:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800622a:	4053      	eors	r3, r2
 800622c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006230:	2b00      	cmp	r3, #0
 8006232:	d013      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006234:	4b9d      	ldr	r3, [pc, #628]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800623c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800623e:	4b9b      	ldr	r3, [pc, #620]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006242:	4a9a      	ldr	r2, [pc, #616]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006248:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800624a:	4b98      	ldr	r3, [pc, #608]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800624c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624e:	4a97      	ldr	r2, [pc, #604]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006254:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006256:	4a95      	ldr	r2, [pc, #596]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006266:	d115      	bne.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006268:	f7fc fa52 	bl	8002710 <HAL_GetTick>
 800626c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800626e:	e00b      	b.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006270:	f7fc fa4e 	bl	8002710 <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	f241 3288 	movw	r2, #5000	; 0x1388
 800627e:	4293      	cmp	r3, r2
 8006280:	d902      	bls.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	75fb      	strb	r3, [r7, #23]
            break;
 8006286:	e005      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006288:	4b88      	ldr	r3, [pc, #544]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800628a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800628c:	f003 0302 	and.w	r3, r3, #2
 8006290:	2b00      	cmp	r3, #0
 8006292:	d0ed      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8006294:	7dfb      	ldrb	r3, [r7, #23]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d126      	bne.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062a8:	d10d      	bne.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80062aa:	4b80      	ldr	r3, [pc, #512]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062b8:	0919      	lsrs	r1, r3, #4
 80062ba:	4b7e      	ldr	r3, [pc, #504]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80062bc:	400b      	ands	r3, r1
 80062be:	497b      	ldr	r1, [pc, #492]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	610b      	str	r3, [r1, #16]
 80062c4:	e005      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80062c6:	4b79      	ldr	r3, [pc, #484]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	4a78      	ldr	r2, [pc, #480]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80062cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80062d0:	6113      	str	r3, [r2, #16]
 80062d2:	4b76      	ldr	r3, [pc, #472]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80062d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062e0:	4972      	ldr	r1, [pc, #456]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	670b      	str	r3, [r1, #112]	; 0x70
 80062e6:	e004      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062e8:	7dfb      	ldrb	r3, [r7, #23]
 80062ea:	75bb      	strb	r3, [r7, #22]
 80062ec:	e001      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ee:	7dfb      	ldrb	r3, [r7, #23]
 80062f0:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d07d      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006302:	2b28      	cmp	r3, #40	; 0x28
 8006304:	d866      	bhi.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8006306:	a201      	add	r2, pc, #4	; (adr r2, 800630c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630c:	080063db 	.word	0x080063db
 8006310:	080063d5 	.word	0x080063d5
 8006314:	080063d5 	.word	0x080063d5
 8006318:	080063d5 	.word	0x080063d5
 800631c:	080063d5 	.word	0x080063d5
 8006320:	080063d5 	.word	0x080063d5
 8006324:	080063d5 	.word	0x080063d5
 8006328:	080063d5 	.word	0x080063d5
 800632c:	080063b1 	.word	0x080063b1
 8006330:	080063d5 	.word	0x080063d5
 8006334:	080063d5 	.word	0x080063d5
 8006338:	080063d5 	.word	0x080063d5
 800633c:	080063d5 	.word	0x080063d5
 8006340:	080063d5 	.word	0x080063d5
 8006344:	080063d5 	.word	0x080063d5
 8006348:	080063d5 	.word	0x080063d5
 800634c:	080063c3 	.word	0x080063c3
 8006350:	080063d5 	.word	0x080063d5
 8006354:	080063d5 	.word	0x080063d5
 8006358:	080063d5 	.word	0x080063d5
 800635c:	080063d5 	.word	0x080063d5
 8006360:	080063d5 	.word	0x080063d5
 8006364:	080063d5 	.word	0x080063d5
 8006368:	080063d5 	.word	0x080063d5
 800636c:	080063db 	.word	0x080063db
 8006370:	080063d5 	.word	0x080063d5
 8006374:	080063d5 	.word	0x080063d5
 8006378:	080063d5 	.word	0x080063d5
 800637c:	080063d5 	.word	0x080063d5
 8006380:	080063d5 	.word	0x080063d5
 8006384:	080063d5 	.word	0x080063d5
 8006388:	080063d5 	.word	0x080063d5
 800638c:	080063db 	.word	0x080063db
 8006390:	080063d5 	.word	0x080063d5
 8006394:	080063d5 	.word	0x080063d5
 8006398:	080063d5 	.word	0x080063d5
 800639c:	080063d5 	.word	0x080063d5
 80063a0:	080063d5 	.word	0x080063d5
 80063a4:	080063d5 	.word	0x080063d5
 80063a8:	080063d5 	.word	0x080063d5
 80063ac:	080063db 	.word	0x080063db
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	3304      	adds	r3, #4
 80063b4:	2101      	movs	r1, #1
 80063b6:	4618      	mov	r0, r3
 80063b8:	f001 f956 	bl	8007668 <RCCEx_PLL2_Config>
 80063bc:	4603      	mov	r3, r0
 80063be:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80063c0:	e00c      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	3324      	adds	r3, #36	; 0x24
 80063c6:	2101      	movs	r1, #1
 80063c8:	4618      	mov	r0, r3
 80063ca:	f001 f9ff 	bl	80077cc <RCCEx_PLL3_Config>
 80063ce:	4603      	mov	r3, r0
 80063d0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80063d2:	e003      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	75fb      	strb	r3, [r7, #23]
      break;
 80063d8:	e000      	b.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80063da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063dc:	7dfb      	ldrb	r3, [r7, #23]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d109      	bne.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80063e2:	4b32      	ldr	r3, [pc, #200]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80063e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063ee:	492f      	ldr	r1, [pc, #188]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	654b      	str	r3, [r1, #84]	; 0x54
 80063f4:	e001      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063f6:	7dfb      	ldrb	r3, [r7, #23]
 80063f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0302 	and.w	r3, r3, #2
 8006402:	2b00      	cmp	r3, #0
 8006404:	d037      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800640a:	2b05      	cmp	r3, #5
 800640c:	d820      	bhi.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800640e:	a201      	add	r2, pc, #4	; (adr r2, 8006414 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8006410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006414:	08006457 	.word	0x08006457
 8006418:	0800642d 	.word	0x0800642d
 800641c:	0800643f 	.word	0x0800643f
 8006420:	08006457 	.word	0x08006457
 8006424:	08006457 	.word	0x08006457
 8006428:	08006457 	.word	0x08006457
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	3304      	adds	r3, #4
 8006430:	2101      	movs	r1, #1
 8006432:	4618      	mov	r0, r3
 8006434:	f001 f918 	bl	8007668 <RCCEx_PLL2_Config>
 8006438:	4603      	mov	r3, r0
 800643a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800643c:	e00c      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	3324      	adds	r3, #36	; 0x24
 8006442:	2101      	movs	r1, #1
 8006444:	4618      	mov	r0, r3
 8006446:	f001 f9c1 	bl	80077cc <RCCEx_PLL3_Config>
 800644a:	4603      	mov	r3, r0
 800644c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800644e:	e003      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	75fb      	strb	r3, [r7, #23]
      break;
 8006454:	e000      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8006456:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006458:	7dfb      	ldrb	r3, [r7, #23]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d109      	bne.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800645e:	4b13      	ldr	r3, [pc, #76]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006462:	f023 0207 	bic.w	r2, r3, #7
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800646a:	4910      	ldr	r1, [pc, #64]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800646c:	4313      	orrs	r3, r2
 800646e:	654b      	str	r3, [r1, #84]	; 0x54
 8006470:	e001      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006472:	7dfb      	ldrb	r3, [r7, #23]
 8006474:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0304 	and.w	r3, r3, #4
 800647e:	2b00      	cmp	r3, #0
 8006480:	d040      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006488:	2b05      	cmp	r3, #5
 800648a:	d827      	bhi.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800648c:	a201      	add	r2, pc, #4	; (adr r2, 8006494 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800648e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006492:	bf00      	nop
 8006494:	080064e3 	.word	0x080064e3
 8006498:	080064b9 	.word	0x080064b9
 800649c:	080064cb 	.word	0x080064cb
 80064a0:	080064e3 	.word	0x080064e3
 80064a4:	080064e3 	.word	0x080064e3
 80064a8:	080064e3 	.word	0x080064e3
 80064ac:	58024400 	.word	0x58024400
 80064b0:	58024800 	.word	0x58024800
 80064b4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	3304      	adds	r3, #4
 80064bc:	2101      	movs	r1, #1
 80064be:	4618      	mov	r0, r3
 80064c0:	f001 f8d2 	bl	8007668 <RCCEx_PLL2_Config>
 80064c4:	4603      	mov	r3, r0
 80064c6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80064c8:	e00c      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	3324      	adds	r3, #36	; 0x24
 80064ce:	2101      	movs	r1, #1
 80064d0:	4618      	mov	r0, r3
 80064d2:	f001 f97b 	bl	80077cc <RCCEx_PLL3_Config>
 80064d6:	4603      	mov	r3, r0
 80064d8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80064da:	e003      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	75fb      	strb	r3, [r7, #23]
      break;
 80064e0:	e000      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80064e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064e4:	7dfb      	ldrb	r3, [r7, #23]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10a      	bne.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064ea:	4bb3      	ldr	r3, [pc, #716]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80064ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ee:	f023 0207 	bic.w	r2, r3, #7
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f8:	49af      	ldr	r1, [pc, #700]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	658b      	str	r3, [r1, #88]	; 0x58
 80064fe:	e001      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006500:	7dfb      	ldrb	r3, [r7, #23]
 8006502:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0320 	and.w	r3, r3, #32
 800650c:	2b00      	cmp	r3, #0
 800650e:	d044      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006516:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800651a:	d01b      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800651c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006520:	d805      	bhi.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8006522:	2b00      	cmp	r3, #0
 8006524:	d022      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8006526:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800652a:	d00a      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800652c:	e01b      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800652e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006532:	d01d      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8006534:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006538:	d01c      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800653a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800653e:	d01b      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006540:	e011      	b.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	3304      	adds	r3, #4
 8006546:	2100      	movs	r1, #0
 8006548:	4618      	mov	r0, r3
 800654a:	f001 f88d 	bl	8007668 <RCCEx_PLL2_Config>
 800654e:	4603      	mov	r3, r0
 8006550:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006552:	e012      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	3324      	adds	r3, #36	; 0x24
 8006558:	2102      	movs	r1, #2
 800655a:	4618      	mov	r0, r3
 800655c:	f001 f936 	bl	80077cc <RCCEx_PLL3_Config>
 8006560:	4603      	mov	r3, r0
 8006562:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006564:	e009      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	75fb      	strb	r3, [r7, #23]
      break;
 800656a:	e006      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800656c:	bf00      	nop
 800656e:	e004      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006570:	bf00      	nop
 8006572:	e002      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006574:	bf00      	nop
 8006576:	e000      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006578:	bf00      	nop
    }

    if(ret == HAL_OK)
 800657a:	7dfb      	ldrb	r3, [r7, #23]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10a      	bne.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006580:	4b8d      	ldr	r3, [pc, #564]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006584:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800658e:	498a      	ldr	r1, [pc, #552]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006590:	4313      	orrs	r3, r2
 8006592:	654b      	str	r3, [r1, #84]	; 0x54
 8006594:	e001      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006596:	7dfb      	ldrb	r3, [r7, #23]
 8006598:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d044      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065b0:	d01b      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80065b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065b6:	d805      	bhi.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d022      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80065bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065c0:	d00a      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80065c2:	e01b      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80065c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c8:	d01d      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80065ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80065ce:	d01c      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80065d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065d4:	d01b      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80065d6:	e011      	b.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	3304      	adds	r3, #4
 80065dc:	2100      	movs	r1, #0
 80065de:	4618      	mov	r0, r3
 80065e0:	f001 f842 	bl	8007668 <RCCEx_PLL2_Config>
 80065e4:	4603      	mov	r3, r0
 80065e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80065e8:	e012      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	3324      	adds	r3, #36	; 0x24
 80065ee:	2102      	movs	r1, #2
 80065f0:	4618      	mov	r0, r3
 80065f2:	f001 f8eb 	bl	80077cc <RCCEx_PLL3_Config>
 80065f6:	4603      	mov	r3, r0
 80065f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80065fa:	e009      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006600:	e006      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006602:	bf00      	nop
 8006604:	e004      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006606:	bf00      	nop
 8006608:	e002      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800660a:	bf00      	nop
 800660c:	e000      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800660e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006610:	7dfb      	ldrb	r3, [r7, #23]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10a      	bne.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006616:	4b68      	ldr	r3, [pc, #416]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800661a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006624:	4964      	ldr	r1, [pc, #400]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006626:	4313      	orrs	r3, r2
 8006628:	658b      	str	r3, [r1, #88]	; 0x58
 800662a:	e001      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800662c:	7dfb      	ldrb	r3, [r7, #23]
 800662e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006638:	2b00      	cmp	r3, #0
 800663a:	d044      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006642:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006646:	d01b      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006648:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800664c:	d805      	bhi.n	800665a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800664e:	2b00      	cmp	r3, #0
 8006650:	d022      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006656:	d00a      	beq.n	800666e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006658:	e01b      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800665a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800665e:	d01d      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006660:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006664:	d01c      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8006666:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800666a:	d01b      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800666c:	e011      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	3304      	adds	r3, #4
 8006672:	2100      	movs	r1, #0
 8006674:	4618      	mov	r0, r3
 8006676:	f000 fff7 	bl	8007668 <RCCEx_PLL2_Config>
 800667a:	4603      	mov	r3, r0
 800667c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800667e:	e012      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	3324      	adds	r3, #36	; 0x24
 8006684:	2102      	movs	r1, #2
 8006686:	4618      	mov	r0, r3
 8006688:	f001 f8a0 	bl	80077cc <RCCEx_PLL3_Config>
 800668c:	4603      	mov	r3, r0
 800668e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006690:	e009      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	75fb      	strb	r3, [r7, #23]
      break;
 8006696:	e006      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006698:	bf00      	nop
 800669a:	e004      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800669c:	bf00      	nop
 800669e:	e002      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80066a0:	bf00      	nop
 80066a2:	e000      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80066a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066a6:	7dfb      	ldrb	r3, [r7, #23]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10a      	bne.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80066ac:	4b42      	ldr	r3, [pc, #264]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80066ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066ba:	493f      	ldr	r1, [pc, #252]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	658b      	str	r3, [r1, #88]	; 0x58
 80066c0:	e001      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c2:	7dfb      	ldrb	r3, [r7, #23]
 80066c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0308 	and.w	r3, r3, #8
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d01b      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066dc:	d10b      	bne.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	3324      	adds	r3, #36	; 0x24
 80066e2:	2102      	movs	r1, #2
 80066e4:	4618      	mov	r0, r3
 80066e6:	f001 f871 	bl	80077cc <RCCEx_PLL3_Config>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00c      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	75bb      	strb	r3, [r7, #22]
 80066f4:	e009      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80066f6:	4b30      	ldr	r3, [pc, #192]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80066f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006704:	492c      	ldr	r1, [pc, #176]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8006706:	4313      	orrs	r3, r2
 8006708:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 0310 	and.w	r3, r3, #16
 8006712:	2b00      	cmp	r3, #0
 8006714:	d01b      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800671c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006720:	d10b      	bne.n	800673a <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	3324      	adds	r3, #36	; 0x24
 8006726:	2102      	movs	r1, #2
 8006728:	4618      	mov	r0, r3
 800672a:	f001 f84f 	bl	80077cc <RCCEx_PLL3_Config>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00c      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	75bb      	strb	r3, [r7, #22]
 8006738:	e009      	b.n	800674e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800673a:	4b1f      	ldr	r3, [pc, #124]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800673c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800673e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006748:	491b      	ldr	r1, [pc, #108]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800674a:	4313      	orrs	r3, r2
 800674c:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d032      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006764:	d00d      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0xb92>
 8006766:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800676a:	d016      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800676c:	2b00      	cmp	r3, #0
 800676e:	d111      	bne.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	3304      	adds	r3, #4
 8006774:	2100      	movs	r1, #0
 8006776:	4618      	mov	r0, r3
 8006778:	f000 ff76 	bl	8007668 <RCCEx_PLL2_Config>
 800677c:	4603      	mov	r3, r0
 800677e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006780:	e00c      	b.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	3324      	adds	r3, #36	; 0x24
 8006786:	2102      	movs	r1, #2
 8006788:	4618      	mov	r0, r3
 800678a:	f001 f81f 	bl	80077cc <RCCEx_PLL3_Config>
 800678e:	4603      	mov	r3, r0
 8006790:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006792:	e003      	b.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	75fb      	strb	r3, [r7, #23]
      break;
 8006798:	e000      	b.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 800679a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800679c:	7dfb      	ldrb	r3, [r7, #23]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10c      	bne.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067a2:	4b05      	ldr	r3, [pc, #20]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80067a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80067b0:	4901      	ldr	r1, [pc, #4]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	658b      	str	r3, [r1, #88]	; 0x58
 80067b6:	e003      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80067b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067bc:	7dfb      	ldrb	r3, [r7, #23]
 80067be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d02f      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067d6:	d00c      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80067d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80067dc:	d015      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80067de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067e2:	d10f      	bne.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067e4:	4b79      	ldr	r3, [pc, #484]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80067e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e8:	4a78      	ldr	r2, [pc, #480]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80067ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80067f0:	e00c      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	3324      	adds	r3, #36	; 0x24
 80067f6:	2101      	movs	r1, #1
 80067f8:	4618      	mov	r0, r3
 80067fa:	f000 ffe7 	bl	80077cc <RCCEx_PLL3_Config>
 80067fe:	4603      	mov	r3, r0
 8006800:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006802:	e003      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	75fb      	strb	r3, [r7, #23]
      break;
 8006808:	e000      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 800680a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800680c:	7dfb      	ldrb	r3, [r7, #23]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10a      	bne.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006812:	4b6e      	ldr	r3, [pc, #440]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006816:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006820:	496a      	ldr	r1, [pc, #424]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006822:	4313      	orrs	r3, r2
 8006824:	654b      	str	r3, [r1, #84]	; 0x54
 8006826:	e001      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006828:	7dfb      	ldrb	r3, [r7, #23]
 800682a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006834:	2b00      	cmp	r3, #0
 8006836:	d029      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800683c:	2b00      	cmp	r3, #0
 800683e:	d003      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 8006840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006844:	d007      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8006846:	e00f      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006848:	4b60      	ldr	r3, [pc, #384]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800684a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684c:	4a5f      	ldr	r2, [pc, #380]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800684e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006852:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006854:	e00b      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	3304      	adds	r3, #4
 800685a:	2102      	movs	r1, #2
 800685c:	4618      	mov	r0, r3
 800685e:	f000 ff03 	bl	8007668 <RCCEx_PLL2_Config>
 8006862:	4603      	mov	r3, r0
 8006864:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006866:	e002      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	75fb      	strb	r3, [r7, #23]
      break;
 800686c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800686e:	7dfb      	ldrb	r3, [r7, #23]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d109      	bne.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006874:	4b55      	ldr	r3, [pc, #340]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006878:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006880:	4952      	ldr	r1, [pc, #328]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006882:	4313      	orrs	r3, r2
 8006884:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006886:	e001      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006888:	7dfb      	ldrb	r3, [r7, #23]
 800688a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00a      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	3324      	adds	r3, #36	; 0x24
 800689c:	2102      	movs	r1, #2
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 ff94 	bl	80077cc <RCCEx_PLL3_Config>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d02f      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068c2:	d00c      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0xcee>
 80068c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068c8:	d802      	bhi.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0xce0>
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d011      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80068ce:	e00d      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 80068d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068d4:	d00f      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80068d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068da:	d00e      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 80068dc:	e006      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068de:	4b3b      	ldr	r3, [pc, #236]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80068e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e2:	4a3a      	ldr	r2, [pc, #232]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80068e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80068ea:	e007      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	75fb      	strb	r3, [r7, #23]
      break;
 80068f0:	e004      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 80068f2:	bf00      	nop
 80068f4:	e002      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 80068f6:	bf00      	nop
 80068f8:	e000      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 80068fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068fc:	7dfb      	ldrb	r3, [r7, #23]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d109      	bne.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006902:	4b32      	ldr	r3, [pc, #200]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006906:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800690e:	492f      	ldr	r1, [pc, #188]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006910:	4313      	orrs	r3, r2
 8006912:	654b      	str	r3, [r1, #84]	; 0x54
 8006914:	e001      	b.n	800691a <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006916:	7dfb      	ldrb	r3, [r7, #23]
 8006918:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d008      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006926:	4b29      	ldr	r3, [pc, #164]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800692a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006932:	4926      	ldr	r1, [pc, #152]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006934:	4313      	orrs	r3, r2
 8006936:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d009      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006944:	4b21      	ldr	r3, [pc, #132]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006952:	491e      	ldr	r1, [pc, #120]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006954:	4313      	orrs	r3, r2
 8006956:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d008      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006964:	4b19      	ldr	r3, [pc, #100]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006968:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006970:	4916      	ldr	r1, [pc, #88]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006972:	4313      	orrs	r3, r2
 8006974:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00d      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006982:	4b12      	ldr	r3, [pc, #72]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	4a11      	ldr	r2, [pc, #68]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006988:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800698c:	6113      	str	r3, [r2, #16]
 800698e:	4b0f      	ldr	r3, [pc, #60]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8006990:	691a      	ldr	r2, [r3, #16]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006998:	490c      	ldr	r1, [pc, #48]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800699a:	4313      	orrs	r3, r2
 800699c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	da08      	bge.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80069a6:	4b09      	ldr	r3, [pc, #36]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80069a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069b2:	4906      	ldr	r1, [pc, #24]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80069b8:	7dbb      	ldrb	r3, [r7, #22]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 80069be:	2300      	movs	r3, #0
 80069c0:	e000      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3718      	adds	r7, #24
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	58024400 	.word	0x58024400

080069d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI4B : SAI4B peripheral clock
  *            @arg RCC_PERIPHCLK_SPI123: SPI1/2/3 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b090      	sub	sp, #64	; 0x40
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069de:	d150      	bne.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80069e0:	4ba1      	ldr	r3, [pc, #644]	; (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80069e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069e4:	f003 0307 	and.w	r3, r3, #7
 80069e8:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80069ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ec:	2b04      	cmp	r3, #4
 80069ee:	d844      	bhi.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80069f0:	a201      	add	r2, pc, #4	; (adr r2, 80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80069f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f6:	bf00      	nop
 80069f8:	08006a0d 	.word	0x08006a0d
 80069fc:	08006a1d 	.word	0x08006a1d
 8006a00:	08006a2d 	.word	0x08006a2d
 8006a04:	08006a75 	.word	0x08006a75
 8006a08:	08006a3d 	.word	0x08006a3d
      {
      case 0: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a10:	4618      	mov	r0, r3
 8006a12:	f000 fcc1 	bl	8007398 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a1a:	e200      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SAI1SEL_0: /* PLLI2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a1c:	f107 0318 	add.w	r3, r7, #24
 8006a20:	4618      	mov	r0, r3
 8006a22:	f000 fa21 	bl	8006e68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a2a:	e1f8      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI1SEL_1: /* PLLI3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a2c:	f107 030c 	add.w	r3, r7, #12
 8006a30:	4618      	mov	r0, r3
 8006a32:	f000 fb65 	bl	8007100 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a3a:	e1f0      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI1SEL_2: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006a3c:	4b8a      	ldr	r3, [pc, #552]	; (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a44:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8006a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d102      	bne.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006a4c:	4b87      	ldr	r3, [pc, #540]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006a50:	e1e5      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8006a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a58:	d102      	bne.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8006a5a:	4b85      	ldr	r3, [pc, #532]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a5e:	e1de      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8006a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a66:	d102      	bne.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8006a68:	4b82      	ldr	r3, [pc, #520]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a6c:	e1d7      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a72:	e1d4      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SAI1SEL_0 | RCC_D2CCIP1R_SAI1SEL_1 ): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006a74:	4b80      	ldr	r3, [pc, #512]	; (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006a76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a78:	e1d1      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a7e:	bf00      	nop
 8006a80:	e1cd      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a88:	d14f      	bne.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8006a8a:	4b77      	ldr	r3, [pc, #476]	; (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a8e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006a92:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a96:	2b80      	cmp	r3, #128	; 0x80
 8006a98:	d01c      	beq.n	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8006a9a:	2b80      	cmp	r3, #128	; 0x80
 8006a9c:	d804      	bhi.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d008      	beq.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8006aa2:	2b40      	cmp	r3, #64	; 0x40
 8006aa4:	d00e      	beq.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006aa6:	e03c      	b.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8006aa8:	2bc0      	cmp	r3, #192	; 0xc0
 8006aaa:	d037      	beq.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8006aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ab0:	d018      	beq.n	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8006ab2:	e036      	b.n	8006b22 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f000 fc6d 	bl	8007398 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ac2:	e1ac      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SAI23SEL_0: /* PLLI2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ac4:	f107 0318 	add.w	r3, r7, #24
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f000 f9cd 	bl	8006e68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ad2:	e1a4      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI23SEL_1: /* PLLI3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ad4:	f107 030c 	add.w	r3, r7, #12
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 fb11 	bl	8007100 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ae2:	e19c      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SAI23SEL_2: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006ae4:	4b60      	ldr	r3, [pc, #384]	; (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ae8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006aec:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8006aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d102      	bne.n	8006afa <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006af4:	4b5d      	ldr	r3, [pc, #372]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006af6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006af8:	e191      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8006afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006afc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b00:	d102      	bne.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8006b02:	4b5b      	ldr	r3, [pc, #364]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006b04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b06:	e18a      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8006b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b0e:	d102      	bne.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8006b10:	4b58      	ldr	r3, [pc, #352]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006b12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b14:	e183      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8006b16:	2300      	movs	r3, #0
 8006b18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b1a:	e180      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SAI23SEL_0 | RCC_D2CCIP1R_SAI23SEL_1 ): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006b1c:	4b56      	ldr	r3, [pc, #344]	; (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b20:	e17d      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 8006b22:	2300      	movs	r3, #0
 8006b24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b26:	bf00      	nop
 8006b28:	e179      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b30:	d153      	bne.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8006b32:	4b4d      	ldr	r3, [pc, #308]	; (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b36:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006b3a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b42:	d01f      	beq.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8006b44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b48:	d805      	bhi.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00a      	beq.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8006b4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b52:	d00f      	beq.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8006b54:	e03d      	b.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8006b56:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006b5a:	d037      	beq.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8006b5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b60:	d018      	beq.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8006b62:	e036      	b.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f000 fc15 	bl	8007398 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b72:	e154      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b74:	f107 0318 	add.w	r3, r7, #24
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f000 f975 	bl	8006e68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b82:	e14c      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b84:	f107 030c 	add.w	r3, r7, #12
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f000 fab9 	bl	8007100 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b92:	e144      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006b94:	4b34      	ldr	r3, [pc, #208]	; (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b9c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8006b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d102      	bne.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006ba4:	4b31      	ldr	r3, [pc, #196]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006ba8:	e139      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8006baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bb0:	d102      	bne.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8006bb2:	4b2f      	ldr	r3, [pc, #188]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bb6:	e132      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8006bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bbe:	d102      	bne.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8006bc0:	4b2c      	ldr	r3, [pc, #176]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bc4:	e12b      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bca:	e128      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006bcc:	4b2a      	ldr	r3, [pc, #168]	; (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006bce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bd0:	e125      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bd6:	bf00      	nop
 8006bd8:	e121      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006be0:	d15d      	bne.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006be2:	4b21      	ldr	r3, [pc, #132]	; (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006bea:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bf2:	d01f      	beq.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006bf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bf8:	d805      	bhi.n	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00a      	beq.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006bfe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c02:	d00f      	beq.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8006c04:	e047      	b.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8006c06:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006c0a:	d041      	beq.n	8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8006c0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c10:	d018      	beq.n	8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8006c12:	e040      	b.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f000 fbbd 	bl	8007398 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c22:	e0fc      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c24:	f107 0318 	add.w	r3, r7, #24
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 f91d 	bl	8006e68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c32:	e0f4      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c34:	f107 030c 	add.w	r3, r7, #12
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f000 fa61 	bl	8007100 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c42:	e0ec      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006c44:	4b08      	ldr	r3, [pc, #32]	; (8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c4c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== 0U)
 8006c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d102      	bne.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006c54:	4b05      	ldr	r3, [pc, #20]	; (8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006c56:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006c58:	e0e1      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_D1CCIPR_CKPERSEL_0)
 8006c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c60:	d10c      	bne.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8006c62:	4b03      	ldr	r3, [pc, #12]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006c64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c66:	e0da      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006c68:	58024400 	.word	0x58024400
 8006c6c:	03d09000 	.word	0x03d09000
 8006c70:	003d0900 	.word	0x003d0900
 8006c74:	01312d00 	.word	0x01312d00
 8006c78:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_D1CCIPR_CKPERSEL_1)
 8006c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c82:	d102      	bne.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8006c84:	4b68      	ldr	r3, [pc, #416]	; (8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 8006c86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c88:	e0c9      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c8e:	e0c6      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006c90:	4b66      	ldr	r3, [pc, #408]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x45c>)
 8006c92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c94:	e0c3      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 8006c96:	2300      	movs	r3, #0
 8006c98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c9a:	bf00      	nop
 8006c9c:	e0bf      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ca4:	d153      	bne.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006ca6:	4b62      	ldr	r3, [pc, #392]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8006ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006caa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006cae:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cb6:	d01f      	beq.n	8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8006cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cbc:	d805      	bhi.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00a      	beq.n	8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8006cc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cc6:	d00f      	beq.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8006cc8:	e03d      	b.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8006cca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006cce:	d037      	beq.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8006cd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cd4:	d018      	beq.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006cd6:	e036      	b.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case 0: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f000 fb5b 	bl	8007398 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ce6:	e09a      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_D2CCIP1R_SPI123SEL_0: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ce8:	f107 0318 	add.w	r3, r7, #24
 8006cec:	4618      	mov	r0, r3
 8006cee:	f000 f8bb 	bl	8006e68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cf6:	e092      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SPI123SEL_1: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cf8:	f107 030c 	add.w	r3, r7, #12
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f000 f9ff 	bl	8007100 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d06:	e08a      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_D2CCIP1R_SPI123SEL_2: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006d08:	4b49      	ldr	r3, [pc, #292]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8006d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d10:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d102      	bne.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006d18:	4b46      	ldr	r3, [pc, #280]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x464>)
 8006d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006d1c:	e07f      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d24:	d102      	bne.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8006d26:	4b44      	ldr	r3, [pc, #272]	; (8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x468>)
 8006d28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d2a:	e078      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d32:	d102      	bne.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8006d34:	4b3c      	ldr	r3, [pc, #240]	; (8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 8006d36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d38:	e071      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d3e:	e06e      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case (RCC_D2CCIP1R_SPI123SEL_0 | RCC_D2CCIP1R_SPI123SEL_1): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006d40:	4b3a      	ldr	r3, [pc, #232]	; (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x45c>)
 8006d42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d44:	e06b      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      default :
        {
          frequency = 0;
 8006d46:	2300      	movs	r3, #0
 8006d48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d4a:	bf00      	nop
 8006d4c:	e067      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006d54:	d13d      	bne.n	8006dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006d56:	4b36      	ldr	r3, [pc, #216]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8006d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d5e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d66:	d00c      	beq.n	8006d82 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006d68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d6c:	d011      	beq.n	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d12b      	bne.n	8006dca <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d72:	f107 0318 	add.w	r3, r7, #24
 8006d76:	4618      	mov	r0, r3
 8006d78:	f000 f876 	bl	8006e68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d80:	e04d      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d82:	f107 030c 	add.w	r3, r7, #12
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 f9ba 	bl	8007100 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d90:	e045      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006d92:	4b27      	ldr	r3, [pc, #156]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8006d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d9a:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d102      	bne.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006da2:	4b24      	ldr	r3, [pc, #144]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x464>)
 8006da4:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006da6:	e03a      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006daa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dae:	d102      	bne.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8006db0:	4b21      	ldr	r3, [pc, #132]	; (8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x468>)
 8006db2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006db4:	e033      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dbc:	d102      	bne.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8006dbe:	4b1a      	ldr	r3, [pc, #104]	; (8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x458>)
 8006dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006dc2:	e02c      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
            frequency = 0;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006dc8:	e029      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006dce:	bf00      	nop
 8006dd0:	e025      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dd8:	d11f      	bne.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006dda:	4b15      	ldr	r3, [pc, #84]	; (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x460>)
 8006ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006de2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d003      	beq.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dee:	d008      	beq.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8006df0:	e00f      	b.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 face 	bl	8007398 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e00:	e00d      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e02:	f107 0318 	add.w	r3, r7, #24
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 f82e 	bl	8006e68 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e10:	e005      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }

      default :
        {
          frequency = 0;
 8006e12:	2300      	movs	r3, #0
 8006e14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e16:	bf00      	nop
 8006e18:	e001      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
        }
      }
    }
  else
    {
      frequency = 0;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3740      	adds	r7, #64	; 0x40
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	01312d00 	.word	0x01312d00
 8006e2c:	00bb8000 	.word	0x00bb8000
 8006e30:	58024400 	.word	0x58024400
 8006e34:	03d09000 	.word	0x03d09000
 8006e38:	003d0900 	.word	0x003d0900

08006e3c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006e40:	f7fe fe8e 	bl	8005b60 <HAL_RCC_GetHCLKFreq>
 8006e44:	4601      	mov	r1, r0
 8006e46:	4b06      	ldr	r3, [pc, #24]	; (8006e60 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	091b      	lsrs	r3, r3, #4
 8006e4c:	f003 0307 	and.w	r3, r3, #7
 8006e50:	4a04      	ldr	r2, [pc, #16]	; (8006e64 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006e52:	5cd3      	ldrb	r3, [r2, r3]
 8006e54:	f003 031f 	and.w	r3, r3, #31
 8006e58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	58024400 	.word	0x58024400
 8006e64:	0800c140 	.word	0x0800c140

08006e68 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b089      	sub	sp, #36	; 0x24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e70:	4b9d      	ldr	r3, [pc, #628]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e74:	f003 0303 	and.w	r3, r3, #3
 8006e78:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8006e7a:	4b9b      	ldr	r3, [pc, #620]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e7e:	0b1b      	lsrs	r3, r3, #12
 8006e80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e84:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8006e86:	4b98      	ldr	r3, [pc, #608]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8a:	f003 0310 	and.w	r3, r3, #16
 8006e8e:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006e90:	4b95      	ldr	r3, [pc, #596]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e94:	08db      	lsrs	r3, r3, #3
 8006e96:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	fb02 f303 	mul.w	r3, r2, r3
 8006ea0:	ee07 3a90 	vmov	s15, r3
 8006ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ea8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 810a 	beq.w	80070c8 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d05a      	beq.n	8006f70 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d302      	bcc.n	8006ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d078      	beq.n	8006fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8006ec2:	e099      	b.n	8006ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ec4:	4b88      	ldr	r3, [pc, #544]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0320 	and.w	r3, r3, #32
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d02d      	beq.n	8006f2c <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ed0:	4b85      	ldr	r3, [pc, #532]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	08db      	lsrs	r3, r3, #3
 8006ed6:	f003 0303 	and.w	r3, r3, #3
 8006eda:	4a84      	ldr	r2, [pc, #528]	; (80070ec <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8006edc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ee0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	ee07 3a90 	vmov	s15, r3
 8006ee8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	ee07 3a90 	vmov	s15, r3
 8006ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006efa:	4b7b      	ldr	r3, [pc, #492]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f02:	ee07 3a90 	vmov	s15, r3
 8006f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f26:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006f2a:	e087      	b.n	800703c <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	ee07 3a90 	vmov	s15, r3
 8006f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80070f4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8006f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f3e:	4b6a      	ldr	r3, [pc, #424]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f46:	ee07 3a90 	vmov	s15, r3
 8006f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f52:	eddf 5a67 	vldr	s11, [pc, #412]	; 80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f6e:	e065      	b.n	800703c <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	ee07 3a90 	vmov	s15, r3
 8006f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f82:	4b59      	ldr	r3, [pc, #356]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f96:	eddf 5a56 	vldr	s11, [pc, #344]	; 80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fb2:	e043      	b.n	800703c <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	ee07 3a90 	vmov	s15, r3
 8006fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fbe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80070fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8006fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fc6:	4b48      	ldr	r3, [pc, #288]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fce:	ee07 3a90 	vmov	s15, r3
 8006fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fda:	eddf 5a45 	vldr	s11, [pc, #276]	; 80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ff2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ff6:	e021      	b.n	800703c <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	ee07 3a90 	vmov	s15, r3
 8006ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007002:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80070f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800700a:	4b37      	ldr	r3, [pc, #220]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800700c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007012:	ee07 3a90 	vmov	s15, r3
 8007016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800701a:	ed97 6a03 	vldr	s12, [r7, #12]
 800701e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800702a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800702e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007036:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800703a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800703c:	4b2a      	ldr	r3, [pc, #168]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800703e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007040:	0a5b      	lsrs	r3, r3, #9
 8007042:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007046:	ee07 3a90 	vmov	s15, r3
 800704a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800704e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007052:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007056:	edd7 6a07 	vldr	s13, [r7, #28]
 800705a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800705e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007062:	ee17 2a90 	vmov	r2, s15
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800706a:	4b1f      	ldr	r3, [pc, #124]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800706c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706e:	0c1b      	lsrs	r3, r3, #16
 8007070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007074:	ee07 3a90 	vmov	s15, r3
 8007078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007080:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007084:	edd7 6a07 	vldr	s13, [r7, #28]
 8007088:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800708c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007090:	ee17 2a90 	vmov	r2, s15
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007098:	4b13      	ldr	r3, [pc, #76]	; (80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800709a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709c:	0e1b      	lsrs	r3, r3, #24
 800709e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070a2:	ee07 3a90 	vmov	s15, r3
 80070a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80070b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070be:	ee17 2a90 	vmov	r2, s15
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80070c6:	e008      	b.n	80070da <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	609a      	str	r2, [r3, #8]
}
 80070da:	bf00      	nop
 80070dc:	3724      	adds	r7, #36	; 0x24
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	58024400 	.word	0x58024400
 80070ec:	03d09000 	.word	0x03d09000
 80070f0:	46000000 	.word	0x46000000
 80070f4:	4c742400 	.word	0x4c742400
 80070f8:	4a742400 	.word	0x4a742400
 80070fc:	4b989680 	.word	0x4b989680

08007100 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007100:	b480      	push	{r7}
 8007102:	b089      	sub	sp, #36	; 0x24
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007108:	4b9d      	ldr	r3, [pc, #628]	; (8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800710a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710c:	f003 0303 	and.w	r3, r3, #3
 8007110:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007112:	4b9b      	ldr	r3, [pc, #620]	; (8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007116:	0d1b      	lsrs	r3, r3, #20
 8007118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800711c:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 800711e:	4b98      	ldr	r3, [pc, #608]	; (8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007126:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007128:	4b95      	ldr	r3, [pc, #596]	; (8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800712a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800712c:	08db      	lsrs	r3, r3, #3
 800712e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007132:	693a      	ldr	r2, [r7, #16]
 8007134:	fb02 f303 	mul.w	r3, r2, r3
 8007138:	ee07 3a90 	vmov	s15, r3
 800713c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007140:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	2b00      	cmp	r3, #0
 8007148:	f000 810a 	beq.w	8007360 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d05a      	beq.n	8007208 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8007152:	2b01      	cmp	r3, #1
 8007154:	d302      	bcc.n	800715c <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8007156:	2b02      	cmp	r3, #2
 8007158:	d078      	beq.n	800724c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800715a:	e099      	b.n	8007290 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800715c:	4b88      	ldr	r3, [pc, #544]	; (8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0320 	and.w	r3, r3, #32
 8007164:	2b00      	cmp	r3, #0
 8007166:	d02d      	beq.n	80071c4 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007168:	4b85      	ldr	r3, [pc, #532]	; (8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	08db      	lsrs	r3, r3, #3
 800716e:	f003 0303 	and.w	r3, r3, #3
 8007172:	4a84      	ldr	r2, [pc, #528]	; (8007384 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007174:	fa22 f303 	lsr.w	r3, r2, r3
 8007178:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	ee07 3a90 	vmov	s15, r3
 8007180:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	ee07 3a90 	vmov	s15, r3
 800718a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007192:	4b7b      	ldr	r3, [pc, #492]	; (8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80071aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071be:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80071c2:	e087      	b.n	80072d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	ee07 3a90 	vmov	s15, r3
 80071ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800738c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80071d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071d6:	4b6a      	ldr	r3, [pc, #424]	; (8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80071d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071de:	ee07 3a90 	vmov	s15, r3
 80071e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80071ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007202:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007206:	e065      	b.n	80072d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	ee07 3a90 	vmov	s15, r3
 800720e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007212:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800721a:	4b59      	ldr	r3, [pc, #356]	; (8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800721c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007222:	ee07 3a90 	vmov	s15, r3
 8007226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800722a:	ed97 6a03 	vldr	s12, [r7, #12]
 800722e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800723a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800723e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007246:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800724a:	e043      	b.n	80072d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	ee07 3a90 	vmov	s15, r3
 8007252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007256:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007394 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800725a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800725e:	4b48      	ldr	r3, [pc, #288]	; (8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007266:	ee07 3a90 	vmov	s15, r3
 800726a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800726e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007272:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800727a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800727e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800728a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800728e:	e021      	b.n	80072d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	ee07 3a90 	vmov	s15, r3
 8007296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800729a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800729e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072a2:	4b37      	ldr	r3, [pc, #220]	; (8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80072a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072aa:	ee07 3a90 	vmov	s15, r3
 80072ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80072ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80072d4:	4b2a      	ldr	r3, [pc, #168]	; (8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80072d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d8:	0a5b      	lsrs	r3, r3, #9
 80072da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072de:	ee07 3a90 	vmov	s15, r3
 80072e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80072f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072fa:	ee17 2a90 	vmov	r2, s15
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007302:	4b1f      	ldr	r3, [pc, #124]	; (8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007306:	0c1b      	lsrs	r3, r3, #16
 8007308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800730c:	ee07 3a90 	vmov	s15, r3
 8007310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007314:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007318:	ee37 7a87 	vadd.f32	s14, s15, s14
 800731c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007320:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007324:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007328:	ee17 2a90 	vmov	r2, s15
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007330:	4b13      	ldr	r3, [pc, #76]	; (8007380 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007334:	0e1b      	lsrs	r3, r3, #24
 8007336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800733a:	ee07 3a90 	vmov	s15, r3
 800733e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007342:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007346:	ee37 7a87 	vadd.f32	s14, s15, s14
 800734a:	edd7 6a07 	vldr	s13, [r7, #28]
 800734e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007352:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007356:	ee17 2a90 	vmov	r2, s15
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800735e:	e008      	b.n	8007372 <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	609a      	str	r2, [r3, #8]
}
 8007372:	bf00      	nop
 8007374:	3724      	adds	r7, #36	; 0x24
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	58024400 	.word	0x58024400
 8007384:	03d09000 	.word	0x03d09000
 8007388:	46000000 	.word	0x46000000
 800738c:	4c742400 	.word	0x4c742400
 8007390:	4a742400 	.word	0x4a742400
 8007394:	4b989680 	.word	0x4b989680

08007398 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007398:	b480      	push	{r7}
 800739a:	b089      	sub	sp, #36	; 0x24
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073a0:	4b9d      	ldr	r3, [pc, #628]	; (8007618 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80073a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a4:	f003 0303 	and.w	r3, r3, #3
 80073a8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80073aa:	4b9b      	ldr	r3, [pc, #620]	; (8007618 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80073ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ae:	091b      	lsrs	r3, r3, #4
 80073b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073b4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80073b6:	4b98      	ldr	r3, [pc, #608]	; (8007618 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80073b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80073c0:	4b95      	ldr	r3, [pc, #596]	; (8007618 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80073c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c4:	08db      	lsrs	r3, r3, #3
 80073c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	fb02 f303 	mul.w	r3, r2, r3
 80073d0:	ee07 3a90 	vmov	s15, r3
 80073d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f000 810a 	beq.w	80075f8 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d05a      	beq.n	80074a0 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d302      	bcc.n	80073f4 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	d078      	beq.n	80074e4 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80073f2:	e099      	b.n	8007528 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073f4:	4b88      	ldr	r3, [pc, #544]	; (8007618 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0320 	and.w	r3, r3, #32
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d02d      	beq.n	800745c <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007400:	4b85      	ldr	r3, [pc, #532]	; (8007618 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	08db      	lsrs	r3, r3, #3
 8007406:	f003 0303 	and.w	r3, r3, #3
 800740a:	4a84      	ldr	r2, [pc, #528]	; (800761c <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800740c:	fa22 f303 	lsr.w	r3, r2, r3
 8007410:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	ee07 3a90 	vmov	s15, r3
 8007418:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	ee07 3a90 	vmov	s15, r3
 8007422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800742a:	4b7b      	ldr	r3, [pc, #492]	; (8007618 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800742c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007432:	ee07 3a90 	vmov	s15, r3
 8007436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800743a:	ed97 6a03 	vldr	s12, [r7, #12]
 800743e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007620 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800744a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800744e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007456:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800745a:	e087      	b.n	800756c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	ee07 3a90 	vmov	s15, r3
 8007462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007466:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007624 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800746a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800746e:	4b6a      	ldr	r3, [pc, #424]	; (8007618 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007476:	ee07 3a90 	vmov	s15, r3
 800747a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800747e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007482:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007620 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800748a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800748e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800749a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800749e:	e065      	b.n	800756c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	ee07 3a90 	vmov	s15, r3
 80074a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074aa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007628 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80074ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074b2:	4b59      	ldr	r3, [pc, #356]	; (8007618 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80074b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ba:	ee07 3a90 	vmov	s15, r3
 80074be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80074c6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007620 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80074ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074e2:	e043      	b.n	800756c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	ee07 3a90 	vmov	s15, r3
 80074ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800762c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80074f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074f6:	4b48      	ldr	r3, [pc, #288]	; (8007618 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80074f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074fe:	ee07 3a90 	vmov	s15, r3
 8007502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007506:	ed97 6a03 	vldr	s12, [r7, #12]
 800750a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007620 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800750e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800751a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800751e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007522:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007526:	e021      	b.n	800756c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	ee07 3a90 	vmov	s15, r3
 800752e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007532:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007628 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800753a:	4b37      	ldr	r3, [pc, #220]	; (8007618 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800753c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007542:	ee07 3a90 	vmov	s15, r3
 8007546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800754a:	ed97 6a03 	vldr	s12, [r7, #12]
 800754e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007620 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800755a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800755e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007566:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800756a:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800756c:	4b2a      	ldr	r3, [pc, #168]	; (8007618 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800756e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007570:	0a5b      	lsrs	r3, r3, #9
 8007572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007576:	ee07 3a90 	vmov	s15, r3
 800757a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800757e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007582:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007586:	edd7 6a07 	vldr	s13, [r7, #28]
 800758a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800758e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007592:	ee17 2a90 	vmov	r2, s15
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800759a:	4b1f      	ldr	r3, [pc, #124]	; (8007618 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800759c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800759e:	0c1b      	lsrs	r3, r3, #16
 80075a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075a4:	ee07 3a90 	vmov	s15, r3
 80075a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80075b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075c0:	ee17 2a90 	vmov	r2, s15
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80075c8:	4b13      	ldr	r3, [pc, #76]	; (8007618 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80075ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075cc:	0e1b      	lsrs	r3, r3, #24
 80075ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075d2:	ee07 3a90 	vmov	s15, r3
 80075d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80075e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ee:	ee17 2a90 	vmov	r2, s15
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80075f6:	e008      	b.n	800760a <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	609a      	str	r2, [r3, #8]
}
 800760a:	bf00      	nop
 800760c:	3724      	adds	r7, #36	; 0x24
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	58024400 	.word	0x58024400
 800761c:	03d09000 	.word	0x03d09000
 8007620:	46000000 	.word	0x46000000
 8007624:	4c742400 	.word	0x4c742400
 8007628:	4a742400 	.word	0x4a742400
 800762c:	4b989680 	.word	0x4b989680

08007630 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007634:	f7fe f922 	bl	800587c <HAL_RCC_GetSysClockFreq>
 8007638:	4601      	mov	r1, r0
 800763a:	4b08      	ldr	r3, [pc, #32]	; (800765c <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	0a1b      	lsrs	r3, r3, #8
 8007640:	f003 030f 	and.w	r3, r3, #15
 8007644:	4a06      	ldr	r2, [pc, #24]	; (8007660 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8007646:	5cd3      	ldrb	r3, [r2, r3]
 8007648:	f003 031f 	and.w	r3, r3, #31
 800764c:	fa21 f303 	lsr.w	r3, r1, r3
 8007650:	4a04      	ldr	r2, [pc, #16]	; (8007664 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8007652:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8007654:	4b03      	ldr	r3, [pc, #12]	; (8007664 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8007656:	681b      	ldr	r3, [r3, #0]
}
 8007658:	4618      	mov	r0, r3
 800765a:	bd80      	pop	{r7, pc}
 800765c:	58024400 	.word	0x58024400
 8007660:	0800c140 	.word	0x0800c140
 8007664:	240005a8 	.word	0x240005a8

08007668 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007676:	4b53      	ldr	r3, [pc, #332]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 8007678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767a:	f003 0303 	and.w	r3, r3, #3
 800767e:	2b03      	cmp	r3, #3
 8007680:	d101      	bne.n	8007686 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e099      	b.n	80077ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007686:	4b4f      	ldr	r3, [pc, #316]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a4e      	ldr	r2, [pc, #312]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 800768c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007690:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007692:	f7fb f83d 	bl	8002710 <HAL_GetTick>
 8007696:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007698:	e008      	b.n	80076ac <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800769a:	f7fb f839 	bl	8002710 <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d901      	bls.n	80076ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e086      	b.n	80077ba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076ac:	4b45      	ldr	r3, [pc, #276]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1f0      	bne.n	800769a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80076b8:	4b42      	ldr	r3, [pc, #264]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 80076ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	031b      	lsls	r3, r3, #12
 80076c6:	493f      	ldr	r1, [pc, #252]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	628b      	str	r3, [r1, #40]	; 0x28
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	3b01      	subs	r3, #1
 80076d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	3b01      	subs	r3, #1
 80076dc:	025b      	lsls	r3, r3, #9
 80076de:	b29b      	uxth	r3, r3
 80076e0:	431a      	orrs	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	3b01      	subs	r3, #1
 80076e8:	041b      	lsls	r3, r3, #16
 80076ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80076ee:	431a      	orrs	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	3b01      	subs	r3, #1
 80076f6:	061b      	lsls	r3, r3, #24
 80076f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80076fc:	4931      	ldr	r1, [pc, #196]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 80076fe:	4313      	orrs	r3, r2
 8007700:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007702:	4b30      	ldr	r3, [pc, #192]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 8007704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007706:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	492d      	ldr	r1, [pc, #180]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 8007710:	4313      	orrs	r3, r2
 8007712:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007714:	4b2b      	ldr	r3, [pc, #172]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 8007716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007718:	f023 0220 	bic.w	r2, r3, #32
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	4928      	ldr	r1, [pc, #160]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 8007722:	4313      	orrs	r3, r2
 8007724:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007726:	4b27      	ldr	r3, [pc, #156]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 8007728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772a:	4a26      	ldr	r2, [pc, #152]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 800772c:	f023 0310 	bic.w	r3, r3, #16
 8007730:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007732:	4b24      	ldr	r3, [pc, #144]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 8007734:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007736:	4b24      	ldr	r3, [pc, #144]	; (80077c8 <RCCEx_PLL2_Config+0x160>)
 8007738:	4013      	ands	r3, r2
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	69d2      	ldr	r2, [r2, #28]
 800773e:	00d2      	lsls	r2, r2, #3
 8007740:	4920      	ldr	r1, [pc, #128]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 8007742:	4313      	orrs	r3, r2
 8007744:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007746:	4b1f      	ldr	r3, [pc, #124]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 8007748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774a:	4a1e      	ldr	r2, [pc, #120]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 800774c:	f043 0310 	orr.w	r3, r3, #16
 8007750:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d106      	bne.n	8007766 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007758:	4b1a      	ldr	r3, [pc, #104]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 800775a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775c:	4a19      	ldr	r2, [pc, #100]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 800775e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007762:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007764:	e00f      	b.n	8007786 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d106      	bne.n	800777a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800776c:	4b15      	ldr	r3, [pc, #84]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 800776e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007770:	4a14      	ldr	r2, [pc, #80]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 8007772:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007776:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007778:	e005      	b.n	8007786 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800777a:	4b12      	ldr	r3, [pc, #72]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 800777c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777e:	4a11      	ldr	r2, [pc, #68]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 8007780:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007784:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007786:	4b0f      	ldr	r3, [pc, #60]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a0e      	ldr	r2, [pc, #56]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 800778c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007790:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007792:	f7fa ffbd 	bl	8002710 <HAL_GetTick>
 8007796:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007798:	e008      	b.n	80077ac <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800779a:	f7fa ffb9 	bl	8002710 <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d901      	bls.n	80077ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e006      	b.n	80077ba <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80077ac:	4b05      	ldr	r3, [pc, #20]	; (80077c4 <RCCEx_PLL2_Config+0x15c>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d0f0      	beq.n	800779a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80077b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	58024400 	.word	0x58024400
 80077c8:	ffff0007 	.word	0xffff0007

080077cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077d6:	2300      	movs	r3, #0
 80077d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077da:	4b53      	ldr	r3, [pc, #332]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 80077dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077de:	f003 0303 	and.w	r3, r3, #3
 80077e2:	2b03      	cmp	r3, #3
 80077e4:	d101      	bne.n	80077ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e099      	b.n	800791e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80077ea:	4b4f      	ldr	r3, [pc, #316]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a4e      	ldr	r2, [pc, #312]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 80077f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077f6:	f7fa ff8b 	bl	8002710 <HAL_GetTick>
 80077fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077fc:	e008      	b.n	8007810 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80077fe:	f7fa ff87 	bl	8002710 <HAL_GetTick>
 8007802:	4602      	mov	r2, r0
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	2b02      	cmp	r3, #2
 800780a:	d901      	bls.n	8007810 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800780c:	2303      	movs	r3, #3
 800780e:	e086      	b.n	800791e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007810:	4b45      	ldr	r3, [pc, #276]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1f0      	bne.n	80077fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800781c:	4b42      	ldr	r3, [pc, #264]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 800781e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007820:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	051b      	lsls	r3, r3, #20
 800782a:	493f      	ldr	r1, [pc, #252]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 800782c:	4313      	orrs	r3, r2
 800782e:	628b      	str	r3, [r1, #40]	; 0x28
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	3b01      	subs	r3, #1
 8007836:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	3b01      	subs	r3, #1
 8007840:	025b      	lsls	r3, r3, #9
 8007842:	b29b      	uxth	r3, r3
 8007844:	431a      	orrs	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	3b01      	subs	r3, #1
 800784c:	041b      	lsls	r3, r3, #16
 800784e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007852:	431a      	orrs	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	3b01      	subs	r3, #1
 800785a:	061b      	lsls	r3, r3, #24
 800785c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007860:	4931      	ldr	r1, [pc, #196]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 8007862:	4313      	orrs	r3, r2
 8007864:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007866:	4b30      	ldr	r3, [pc, #192]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 8007868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	492d      	ldr	r1, [pc, #180]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 8007874:	4313      	orrs	r3, r2
 8007876:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007878:	4b2b      	ldr	r3, [pc, #172]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 800787a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	4928      	ldr	r1, [pc, #160]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 8007886:	4313      	orrs	r3, r2
 8007888:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800788a:	4b27      	ldr	r3, [pc, #156]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 800788c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788e:	4a26      	ldr	r2, [pc, #152]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 8007890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007894:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007896:	4b24      	ldr	r3, [pc, #144]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 8007898:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800789a:	4b24      	ldr	r3, [pc, #144]	; (800792c <RCCEx_PLL3_Config+0x160>)
 800789c:	4013      	ands	r3, r2
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	69d2      	ldr	r2, [r2, #28]
 80078a2:	00d2      	lsls	r2, r2, #3
 80078a4:	4920      	ldr	r1, [pc, #128]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 80078a6:	4313      	orrs	r3, r2
 80078a8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80078aa:	4b1f      	ldr	r3, [pc, #124]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 80078ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ae:	4a1e      	ldr	r2, [pc, #120]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 80078b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d106      	bne.n	80078ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80078bc:	4b1a      	ldr	r3, [pc, #104]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 80078be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c0:	4a19      	ldr	r2, [pc, #100]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 80078c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80078c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078c8:	e00f      	b.n	80078ea <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d106      	bne.n	80078de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80078d0:	4b15      	ldr	r3, [pc, #84]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 80078d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d4:	4a14      	ldr	r2, [pc, #80]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 80078d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80078da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078dc:	e005      	b.n	80078ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80078de:	4b12      	ldr	r3, [pc, #72]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 80078e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e2:	4a11      	ldr	r2, [pc, #68]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 80078e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80078ea:	4b0f      	ldr	r3, [pc, #60]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a0e      	ldr	r2, [pc, #56]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 80078f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078f6:	f7fa ff0b 	bl	8002710 <HAL_GetTick>
 80078fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078fc:	e008      	b.n	8007910 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80078fe:	f7fa ff07 	bl	8002710 <HAL_GetTick>
 8007902:	4602      	mov	r2, r0
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	2b02      	cmp	r3, #2
 800790a:	d901      	bls.n	8007910 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e006      	b.n	800791e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007910:	4b05      	ldr	r3, [pc, #20]	; (8007928 <RCCEx_PLL3_Config+0x15c>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d0f0      	beq.n	80078fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800791c:	7bfb      	ldrb	r3, [r7, #15]
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	58024400 	.word	0x58024400
 800792c:	ffff0007 	.word	0xffff0007

08007930 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8007938:	2300      	movs	r3, #0
 800793a:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d101      	bne.n	8007946 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e0e2      	b.n	8007b0c <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a70      	ldr	r2, [pc, #448]	; (8007b14 <HAL_SPI_Init+0x1e4>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d00f      	beq.n	8007976 <HAL_SPI_Init+0x46>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a6f      	ldr	r2, [pc, #444]	; (8007b18 <HAL_SPI_Init+0x1e8>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d00a      	beq.n	8007976 <HAL_SPI_Init+0x46>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a6d      	ldr	r2, [pc, #436]	; (8007b1c <HAL_SPI_Init+0x1ec>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d005      	beq.n	8007976 <HAL_SPI_Init+0x46>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	2b0f      	cmp	r3, #15
 8007970:	d901      	bls.n	8007976 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e0ca      	b.n	8007b0c <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fd68 	bl	800844c <SPI_GetPacketSize>
 800797c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a64      	ldr	r2, [pc, #400]	; (8007b14 <HAL_SPI_Init+0x1e4>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d00c      	beq.n	80079a2 <HAL_SPI_Init+0x72>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a62      	ldr	r2, [pc, #392]	; (8007b18 <HAL_SPI_Init+0x1e8>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d007      	beq.n	80079a2 <HAL_SPI_Init+0x72>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a61      	ldr	r2, [pc, #388]	; (8007b1c <HAL_SPI_Init+0x1ec>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d002      	beq.n	80079a2 <HAL_SPI_Init+0x72>
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	2b08      	cmp	r3, #8
 80079a0:	d811      	bhi.n	80079c6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80079a6:	4a5b      	ldr	r2, [pc, #364]	; (8007b14 <HAL_SPI_Init+0x1e4>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d009      	beq.n	80079c0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a59      	ldr	r2, [pc, #356]	; (8007b18 <HAL_SPI_Init+0x1e8>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d004      	beq.n	80079c0 <HAL_SPI_Init+0x90>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a58      	ldr	r2, [pc, #352]	; (8007b1c <HAL_SPI_Init+0x1ec>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d104      	bne.n	80079ca <HAL_SPI_Init+0x9a>
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	2b10      	cmp	r3, #16
 80079c4:	d901      	bls.n	80079ca <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e0a0      	b.n	8007b0c <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d106      	bne.n	80079e4 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7fa fb38 	bl	8002054 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2202      	movs	r2, #2
 80079e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f022 0201 	bic.w	r2, r2, #1
 80079fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	699b      	ldr	r3, [r3, #24]
 8007a00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a04:	d110      	bne.n	8007a28 <HAL_SPI_Init+0xf8>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a0e:	d10b      	bne.n	8007a28 <HAL_SPI_Init+0xf8>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d107      	bne.n	8007a28 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a26:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	69da      	ldr	r2, [r3, #28]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a30:	431a      	orrs	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	431a      	orrs	r2, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a3a:	ea42 0103 	orr.w	r1, r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	68da      	ldr	r2, [r3, #12]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	430a      	orrs	r2, r1
 8007a48:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a52:	431a      	orrs	r2, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a58:	431a      	orrs	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	431a      	orrs	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	431a      	orrs	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	431a      	orrs	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a1b      	ldr	r3, [r3, #32]
 8007a70:	431a      	orrs	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	431a      	orrs	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a7c:	431a      	orrs	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	431a      	orrs	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a88:	ea42 0103 	orr.w	r1, r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	430a      	orrs	r2, r1
 8007a96:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d113      	bne.n	8007ac8 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ab2:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ac6:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f022 0201 	bic.w	r2, r2, #1
 8007ad6:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00a      	beq.n	8007afa <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	430a      	orrs	r2, r1
 8007af8:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	40013000 	.word	0x40013000
 8007b18:	40003800 	.word	0x40003800
 8007b1c:	40003c00 	.word	0x40003c00

08007b20 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData: pointer to reception data buffer
  * @param  Size   : amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b087      	sub	sp, #28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
 8007b2c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef  tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d101      	bne.n	8007b40 <HAL_SPI_TransmitReceive_IT+0x20>
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	e09e      	b.n	8007c7e <HAL_SPI_TransmitReceive_IT+0x15e>
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state  = hspi->State;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007b4e:	75bb      	strb	r3, [r7, #22]
  tmp_mode   = hspi->Init.Mode;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007b56:	7dbb      	ldrb	r3, [r7, #22]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d012      	beq.n	8007b82 <HAL_SPI_TransmitReceive_IT+0x62>
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b62:	d106      	bne.n	8007b72 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d102      	bne.n	8007b72 <HAL_SPI_TransmitReceive_IT+0x52>
 8007b6c:	7dbb      	ldrb	r3, [r7, #22]
 8007b6e:	2b04      	cmp	r3, #4
 8007b70:	d007      	beq.n	8007b82 <HAL_SPI_TransmitReceive_IT+0x62>
  {
    errorcode = HAL_BUSY;
 8007b72:	2302      	movs	r3, #2
 8007b74:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007b7e:	7dfb      	ldrb	r3, [r7, #23]
 8007b80:	e07d      	b.n	8007c7e <HAL_SPI_TransmitReceive_IT+0x15e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d005      	beq.n	8007b94 <HAL_SPI_TransmitReceive_IT+0x74>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d002      	beq.n	8007b94 <HAL_SPI_TransmitReceive_IT+0x74>
 8007b8e:	887b      	ldrh	r3, [r7, #2]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d107      	bne.n	8007ba4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    errorcode = HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007ba0:	7dfb      	ldrb	r3, [r7, #23]
 8007ba2:	e06c      	b.n	8007c7e <HAL_SPI_TransmitReceive_IT+0x15e>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	2b04      	cmp	r3, #4
 8007bae:	d003      	beq.n	8007bb8 <HAL_SPI_TransmitReceive_IT+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2205      	movs	r2, #5
 8007bb4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	887a      	ldrh	r2, [r7, #2]
 8007bca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	887a      	ldrh	r2, [r7, #2]
 8007bd2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	887a      	ldrh	r2, [r7, #2]
 8007be0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	887a      	ldrh	r2, [r7, #2]
 8007be8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	2b0f      	cmp	r3, #15
 8007bf2:	d906      	bls.n	8007c02 <HAL_SPI_TransmitReceive_IT+0xe2>
  {
    hspi->TxISR     = SPI_TxISR_32BIT;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	4a25      	ldr	r2, [pc, #148]	; (8007c8c <HAL_SPI_TransmitReceive_IT+0x16c>)
 8007bf8:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->RxISR     = SPI_RxISR_32BIT;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	4a24      	ldr	r2, [pc, #144]	; (8007c90 <HAL_SPI_TransmitReceive_IT+0x170>)
 8007bfe:	671a      	str	r2, [r3, #112]	; 0x70
 8007c00:	e010      	b.n	8007c24 <HAL_SPI_TransmitReceive_IT+0x104>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	2b07      	cmp	r3, #7
 8007c08:	d906      	bls.n	8007c18 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    hspi->RxISR     = SPI_RxISR_16BIT;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	4a21      	ldr	r2, [pc, #132]	; (8007c94 <HAL_SPI_TransmitReceive_IT+0x174>)
 8007c0e:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->TxISR     = SPI_TxISR_16BIT;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	4a21      	ldr	r2, [pc, #132]	; (8007c98 <HAL_SPI_TransmitReceive_IT+0x178>)
 8007c14:	675a      	str	r2, [r3, #116]	; 0x74
 8007c16:	e005      	b.n	8007c24 <HAL_SPI_TransmitReceive_IT+0x104>
  }
  else
  {
    hspi->RxISR     = SPI_RxISR_8BIT;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	4a20      	ldr	r2, [pc, #128]	; (8007c9c <HAL_SPI_TransmitReceive_IT+0x17c>)
 8007c1c:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->TxISR     = SPI_TxISR_8BIT;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	4a1f      	ldr	r2, [pc, #124]	; (8007ca0 <HAL_SPI_TransmitReceive_IT+0x180>)
 8007c22:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	4b1e      	ldr	r3, [pc, #120]	; (8007ca4 <HAL_SPI_TransmitReceive_IT+0x184>)
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	8879      	ldrh	r1, [r7, #2]
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	6812      	ldr	r2, [r2, #0]
 8007c34:	430b      	orrs	r3, r1
 8007c36:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f042 0201 	orr.w	r2, r2, #1
 8007c46:	601a      	str	r2, [r3, #0]

  /* Enable EOT, RXP, TXP, DXP, UDR, OVR, FRE, MODF and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	6919      	ldr	r1, [r3, #16]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	f240 736f 	movw	r3, #1903	; 0x76f
 8007c56:	430b      	orrs	r3, r1
 8007c58:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c62:	d107      	bne.n	8007c74 <HAL_SPI_TransmitReceive_IT+0x154>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c72:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8007c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	371c      	adds	r7, #28
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	080082b5 	.word	0x080082b5
 8007c90:	080081a9 	.word	0x080081a9
 8007c94:	0800814b 	.word	0x0800814b
 8007c98:	0800825b 	.word	0x0800825b
 8007c9c:	080080ed 	.word	0x080080ed
 8007ca0:	08008201 	.word	0x08008201
 8007ca4:	ffff0000 	.word	0xffff0000

08007ca8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b088      	sub	sp, #32
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	61bb      	str	r3, [r7, #24]
  uint32_t itflag   = hspi->Instance->SR;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	617b      	str	r3, [r7, #20]
  uint32_t trigger  = itsource & itflag;
 8007cc0:	69ba      	ldr	r2, [r7, #24]
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	613b      	str	r3, [r7, #16]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	60fb      	str	r3, [r7, #12]
  uint32_t handled  = 0UL;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	61fb      	str	r3, [r7, #28]

  HAL_SPI_StateTypeDef State = hspi->State;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007cda:	72fb      	strb	r3, [r7, #11]


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d113      	bne.n	8007d0e <HAL_SPI_IRQHandler+0x66>
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	f003 0320 	and.w	r3, r3, #32
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d10e      	bne.n	8007d0e <HAL_SPI_IRQHandler+0x66>
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	f003 0304 	and.w	r3, r3, #4
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d009      	beq.n	8007d0e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	4798      	blx	r3
    handled = 1UL;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	61fb      	str	r3, [r7, #28]
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d10f      	bne.n	8007d38 <HAL_SPI_IRQHandler+0x90>
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00a      	beq.n	8007d38 <HAL_SPI_IRQHandler+0x90>
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	f003 0304 	and.w	r3, r3, #4
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d105      	bne.n	8007d38 <HAL_SPI_IRQHandler+0x90>
  {
    hspi->RxISR(hspi);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	4798      	blx	r3
    handled = 1UL;
 8007d34:	2301      	movs	r3, #1
 8007d36:	61fb      	str	r3, [r7, #28]
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	f003 0320 	and.w	r3, r3, #32
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d10f      	bne.n	8007d62 <HAL_SPI_IRQHandler+0xba>
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	f003 0302 	and.w	r3, r3, #2
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00a      	beq.n	8007d62 <HAL_SPI_IRQHandler+0xba>
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	f003 0304 	and.w	r3, r3, #4
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d105      	bne.n	8007d62 <HAL_SPI_IRQHandler+0xba>
  {
    hspi->TxISR(hspi);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	4798      	blx	r3
    handled = 1UL;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	61fb      	str	r3, [r7, #28]
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f040 8173 	bne.w	8008050 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	f003 0308 	and.w	r3, r3, #8
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f000 80a3 	beq.w	8007ebc <HAL_SPI_IRQHandler+0x214>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	699a      	ldr	r2, [r3, #24]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f042 0208 	orr.w	r2, r2, #8
 8007d84:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	699a      	ldr	r2, [r3, #24]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f042 0210 	orr.w	r2, r2, #16
 8007d94:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	699a      	ldr	r2, [r3, #24]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007da4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	691a      	ldr	r2, [r3, #16]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f022 0208 	bic.w	r2, r2, #8
 8007db4:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00f      	beq.n	8007de0 <HAL_SPI_IRQHandler+0x138>
 8007dc0:	7afb      	ldrb	r3, [r7, #11]
 8007dc2:	2b04      	cmp	r3, #4
 8007dc4:	d004      	beq.n	8007dd0 <HAL_SPI_IRQHandler+0x128>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dca:	69db      	ldr	r3, [r3, #28]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d007      	beq.n	8007de0 <HAL_SPI_IRQHandler+0x138>
 8007dd0:	7afb      	ldrb	r3, [r7, #11]
 8007dd2:	2b03      	cmp	r3, #3
 8007dd4:	d05c      	beq.n	8007e90 <HAL_SPI_IRQHandler+0x1e8>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dda:	69db      	ldr	r3, [r3, #28]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d157      	bne.n	8007e90 <HAL_SPI_IRQHandler+0x1e8>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d140      	bne.n	8007e70 <HAL_SPI_IRQHandler+0x1c8>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 8007dee:	e039      	b.n	8007e64 <HAL_SPI_IRQHandler+0x1bc>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	2b0f      	cmp	r3, #15
 8007df6:	d90b      	bls.n	8007e10 <HAL_SPI_IRQHandler+0x168>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e00:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007e02:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e08:	1d1a      	adds	r2, r3, #4
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	665a      	str	r2, [r3, #100]	; 0x64
 8007e0e:	e020      	b.n	8007e52 <HAL_SPI_IRQHandler+0x1aa>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	2b07      	cmp	r3, #7
 8007e16:	d90e      	bls.n	8007e36 <HAL_SPI_IRQHandler+0x18e>
          {
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e24:	8812      	ldrh	r2, [r2, #0]
 8007e26:	b292      	uxth	r2, r2
 8007e28:	801a      	strh	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e2e:	1c9a      	adds	r2, r3, #2
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	665a      	str	r2, [r3, #100]	; 0x64
 8007e34:	e00d      	b.n	8007e52 <HAL_SPI_IRQHandler+0x1aa>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e42:	7812      	ldrb	r2, [r2, #0]
 8007e44:	b2d2      	uxtb	r2, r2
 8007e46:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e4c:	1c5a      	adds	r2, r3, #1
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1bf      	bne.n	8007df0 <HAL_SPI_IRQHandler+0x148>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fa4b 	bl	800830c <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d003      	beq.n	8007e90 <HAL_SPI_IRQHandler+0x1e8>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 f90b 	bl	80080a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 8007e8e:	e0e4      	b.n	800805a <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8007e90:	7afb      	ldrb	r3, [r7, #11]
 8007e92:	2b05      	cmp	r3, #5
 8007e94:	d103      	bne.n	8007e9e <HAL_SPI_IRQHandler+0x1f6>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f8fa 	bl	8008090 <HAL_SPI_TxRxCpltCallback>
    {
      /* end of the appropriate call */
    }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

    return;
 8007e9c:	e0da      	b.n	8008054 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8007e9e:	7afb      	ldrb	r3, [r7, #11]
 8007ea0:	2b04      	cmp	r3, #4
 8007ea2:	d103      	bne.n	8007eac <HAL_SPI_IRQHandler+0x204>
      HAL_SPI_RxCpltCallback(hspi);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 f8e9 	bl	800807c <HAL_SPI_RxCpltCallback>
    return;
 8007eaa:	e0d3      	b.n	8008054 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8007eac:	7afb      	ldrb	r3, [r7, #11]
 8007eae:	2b03      	cmp	r3, #3
 8007eb0:	f040 80d0 	bne.w	8008054 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f8d7 	bl	8008068 <HAL_SPI_TxCpltCallback>
    return;
 8007eba:	e0cb      	b.n	8008054 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00d      	beq.n	8007ee2 <HAL_SPI_IRQHandler+0x23a>
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	f003 0308 	and.w	r3, r3, #8
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d008      	beq.n	8007ee2 <HAL_SPI_IRQHandler+0x23a>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	699a      	ldr	r2, [r3, #24]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ede:	619a      	str	r2, [r3, #24]

    return;
 8007ee0:	e0bb      	b.n	800805a <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f000 80b6 	beq.w	800805a <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d00f      	beq.n	8007f18 <HAL_SPI_IRQHandler+0x270>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007efe:	f043 0204 	orr.w	r2, r3, #4
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	699a      	ldr	r2, [r3, #24]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f16:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00f      	beq.n	8007f42 <HAL_SPI_IRQHandler+0x29a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f28:	f043 0201 	orr.w	r2, r3, #1
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	699a      	ldr	r2, [r3, #24]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f40:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00f      	beq.n	8007f6c <HAL_SPI_IRQHandler+0x2c4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f52:	f043 0208 	orr.w	r2, r3, #8
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	699a      	ldr	r2, [r3, #24]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f6a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	f003 0320 	and.w	r3, r3, #32
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00f      	beq.n	8007f96 <HAL_SPI_IRQHandler+0x2ee>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	699a      	ldr	r2, [r3, #24]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f042 0220 	orr.w	r2, r2, #32
 8007f94:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d05b      	beq.n	8008058 <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f022 0201 	bic.w	r2, r2, #1
 8007fae:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6919      	ldr	r1, [r3, #16]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	4b29      	ldr	r3, [pc, #164]	; (8008060 <HAL_SPI_IRQHandler+0x3b8>)
 8007fbc:	400b      	ands	r3, r1
 8007fbe:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007fc6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007fca:	d138      	bne.n	800803e <HAL_SPI_IRQHandler+0x396>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	689a      	ldr	r2, [r3, #8]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007fda:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d013      	beq.n	800800c <HAL_SPI_IRQHandler+0x364>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fe8:	4a1e      	ldr	r2, [pc, #120]	; (8008064 <HAL_SPI_IRQHandler+0x3bc>)
 8007fea:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7fb fea5 	bl	8003d40 <HAL_DMA_Abort_IT>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d007      	beq.n	800800c <HAL_SPI_IRQHandler+0x364>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008002:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008010:	2b00      	cmp	r3, #0
 8008012:	d021      	beq.n	8008058 <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008018:	4a12      	ldr	r2, [pc, #72]	; (8008064 <HAL_SPI_IRQHandler+0x3bc>)
 800801a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008020:	4618      	mov	r0, r3
 8008022:	f7fb fe8d 	bl	8003d40 <HAL_DMA_Abort_IT>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d015      	beq.n	8008058 <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008032:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800803c:	e00c      	b.n	8008058 <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 f82c 	bl	80080a4 <HAL_SPI_ErrorCallback>
    return;
 800804c:	bf00      	nop
 800804e:	e003      	b.n	8008058 <HAL_SPI_IRQHandler+0x3b0>
    return;
 8008050:	bf00      	nop
 8008052:	e002      	b.n	800805a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8008054:	bf00      	nop
 8008056:	e000      	b.n	800805a <HAL_SPI_IRQHandler+0x3b2>
    return;
 8008058:	bf00      	nop
  }
}
 800805a:	3720      	adds	r7, #32
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	fffffc94 	.word	0xfffffc94
 8008064:	080080b9 	.word	0x080080b9

08008068 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008098:	bf00      	nop
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80080ac:	bf00      	nop
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2201      	movs	r2, #1
 80080da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f7ff ffe0 	bl	80080a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80080e4:	bf00      	nop
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008100:	7812      	ldrb	r2, [r2, #0]
 8008102:	b2d2      	uxtb	r2, r2
 8008104:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800810a:	1c5a      	adds	r2, r3, #1
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount--;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008116:	b29b      	uxth	r3, r3
 8008118:	3b01      	subs	r3, #1
 800811a:	b29a      	uxth	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008128:	b29b      	uxth	r3, r3
 800812a:	2b00      	cmp	r3, #0
 800812c:	d107      	bne.n	800813e <SPI_RxISR_8BIT+0x52>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else 
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	691a      	ldr	r2, [r3, #16]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f022 0201 	bic.w	r2, r2, #1
 800813c:	611a      	str	r2, [r3, #16]
#endif /* USE_HSPI_RELOAD_TRANSFER */
  }
}
 800813e:	bf00      	nop
 8008140:	370c      	adds	r7, #12
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <SPI_RxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 800814a:	b480      	push	{r7}
 800814c:	b083      	sub	sp, #12
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800815e:	8812      	ldrh	r2, [r2, #0]
 8008160:	b292      	uxth	r2, r2
 8008162:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008168:	1c9a      	adds	r2, r3, #2
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount--;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008174:	b29b      	uxth	r3, r3
 8008176:	3b01      	subs	r3, #1
 8008178:	b29a      	uxth	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008186:	b29b      	uxth	r3, r3
 8008188:	2b00      	cmp	r3, #0
 800818a:	d107      	bne.n	800819c <SPI_RxISR_16BIT+0x52>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else 
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	691a      	ldr	r2, [r3, #16]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f022 0201 	bic.w	r2, r2, #1
 800819a:	611a      	str	r2, [r3, #16]
#endif /* USE_HSPI_RELOAD_TRANSFER */
  }
}
 800819c:	bf00      	nop
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <SPI_RxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80081ba:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081c0:	1d1a      	adds	r2, r3, #4
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount--;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	3b01      	subs	r3, #1
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80081de:	b29b      	uxth	r3, r3
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d107      	bne.n	80081f4 <SPI_RxISR_32BIT+0x4c>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else 
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	691a      	ldr	r2, [r3, #16]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f022 0201 	bic.w	r2, r2, #1
 80081f2:	611a      	str	r2, [r3, #16]
#endif /* USE_HSPI_RELOAD_TRANSFER */
  }
}
 80081f4:	bf00      	nop
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((uint8_t *)hspi->pTxBuffPtr);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	3320      	adds	r3, #32
 8008212:	7812      	ldrb	r2, [r2, #0]
 8008214:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800821a:	1c5a      	adds	r2, r3, #1
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008226:	b29b      	uxth	r3, r3
 8008228:	3b01      	subs	r3, #1
 800822a:	b29a      	uxth	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008238:	b29b      	uxth	r3, r3
 800823a:	2b00      	cmp	r3, #0
 800823c:	d107      	bne.n	800824e <SPI_TxISR_8BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else 
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	691a      	ldr	r2, [r3, #16]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f022 0202 	bic.w	r2, r2, #2
 800824c:	611a      	str	r2, [r3, #16]
#endif /* USE_HSPI_RELOAD_TRANSFER */
  }
}
 800824e:	bf00      	nop
 8008250:	370c      	adds	r7, #12
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr

0800825a <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 800825a:	b480      	push	{r7}
 800825c:	b083      	sub	sp, #12
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	3320      	adds	r3, #32
 800826c:	8812      	ldrh	r2, [r2, #0]
 800826e:	801a      	strh	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008274:	1c9a      	adds	r2, r3, #2
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008280:	b29b      	uxth	r3, r3
 8008282:	3b01      	subs	r3, #1
 8008284:	b29a      	uxth	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008292:	b29b      	uxth	r3, r3
 8008294:	2b00      	cmp	r3, #0
 8008296:	d107      	bne.n	80082a8 <SPI_TxISR_16BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else 
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	691a      	ldr	r2, [r3, #16]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f022 0202 	bic.w	r2, r2, #2
 80082a6:	611a      	str	r2, [r3, #16]
#endif /* USE_HSPI_RELOAD_TRANSFER */
  }
}
 80082a8:	bf00      	nop
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <SPI_TxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	6812      	ldr	r2, [r2, #0]
 80082c6:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082cc:	1d1a      	adds	r2, r3, #4
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80082d8:	b29b      	uxth	r3, r3
 80082da:	3b01      	subs	r3, #1
 80082dc:	b29a      	uxth	r2, r3
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d107      	bne.n	8008300 <SPI_TxISR_32BIT+0x4c>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else 
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	691a      	ldr	r2, [r3, #16]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f022 0202 	bic.w	r2, r2, #2
 80082fe:	611a      	str	r2, [r3, #16]
#endif /* USE_HSPI_RELOAD_TRANSFER */
  }
}
 8008300:	bf00      	nop
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800830c:	b480      	push	{r7}
 800830e:	b085      	sub	sp, #20
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	695b      	ldr	r3, [r3, #20]
 800831a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	699a      	ldr	r2, [r3, #24]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f042 0208 	orr.w	r2, r2, #8
 800832a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	699a      	ldr	r2, [r3, #24]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f042 0210 	orr.w	r2, r2, #16
 800833a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f022 0201 	bic.w	r2, r2, #1
 800834a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6919      	ldr	r1, [r3, #16]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	4b3c      	ldr	r3, [pc, #240]	; (8008448 <SPI_CloseTransfer+0x13c>)
 8008358:	400b      	ands	r3, r1
 800835a:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	689a      	ldr	r2, [r3, #8]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800836a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b04      	cmp	r3, #4
 8008376:	d014      	beq.n	80083a2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f003 0320 	and.w	r3, r3, #32
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00f      	beq.n	80083a2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008388:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	699a      	ldr	r2, [r3, #24]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f042 0220 	orr.w	r2, r2, #32
 80083a0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	2b03      	cmp	r3, #3
 80083ac:	d014      	beq.n	80083d8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00f      	beq.n	80083d8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083be:	f043 0204 	orr.w	r2, r3, #4
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	699a      	ldr	r2, [r3, #24]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083d6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00f      	beq.n	8008402 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083e8:	f043 0201 	orr.w	r2, r3, #1
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	699a      	ldr	r2, [r3, #24]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008400:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00f      	beq.n	800842c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008412:	f043 0208 	orr.w	r2, r3, #8
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	699a      	ldr	r2, [r3, #24]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800842a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800843c:	bf00      	nop
 800843e:	3714      	adds	r7, #20
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr
 8008448:	fffffc90 	.word	0xfffffc90

0800844c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800844c:	b480      	push	{r7}
 800844e:	b085      	sub	sp, #20
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008458:	095b      	lsrs	r3, r3, #5
 800845a:	3301      	adds	r3, #1
 800845c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	3301      	adds	r3, #1
 8008464:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	3307      	adds	r3, #7
 800846a:	08db      	lsrs	r3, r3, #3
 800846c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	fb02 f303 	mul.w	r3, r2, r3
}
 8008476:	4618      	mov	r0, r3
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b082      	sub	sp, #8
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d101      	bne.n	8008494 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e01d      	b.n	80084d0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800849a:	b2db      	uxtb	r3, r3
 800849c:	2b00      	cmp	r3, #0
 800849e:	d106      	bne.n	80084ae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f7f9 fed7 	bl	800225c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2202      	movs	r2, #2
 80084b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	3304      	adds	r3, #4
 80084be:	4619      	mov	r1, r3
 80084c0:	4610      	mov	r0, r2
 80084c2:	f000 fbfb 	bl	8008cbc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2201      	movs	r2, #1
 80084ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80084d8:	b480      	push	{r7}
 80084da:	b085      	sub	sp, #20
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	68da      	ldr	r2, [r3, #12]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f042 0201 	orr.w	r2, r2, #1
 80084ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	689a      	ldr	r2, [r3, #8]
 80084f6:	4b0c      	ldr	r3, [pc, #48]	; (8008528 <HAL_TIM_Base_Start_IT+0x50>)
 80084f8:	4013      	ands	r3, r2
 80084fa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2b06      	cmp	r3, #6
 8008500:	d00b      	beq.n	800851a <HAL_TIM_Base_Start_IT+0x42>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008508:	d007      	beq.n	800851a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f042 0201 	orr.w	r2, r2, #1
 8008518:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	3714      	adds	r7, #20
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr
 8008528:	00010007 	.word	0x00010007

0800852c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d101      	bne.n	800853e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e01d      	b.n	800857a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b00      	cmp	r3, #0
 8008548:	d106      	bne.n	8008558 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f815 	bl	8008582 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2202      	movs	r2, #2
 800855c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	3304      	adds	r3, #4
 8008568:	4619      	mov	r1, r3
 800856a:	4610      	mov	r0, r2
 800856c:	f000 fba6 	bl	8008cbc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3708      	adds	r7, #8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008582:	b480      	push	{r7}
 8008584:	b083      	sub	sp, #12
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800858a:	bf00      	nop
 800858c:	370c      	adds	r7, #12
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
	...

08008598 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2201      	movs	r2, #1
 80085a8:	6839      	ldr	r1, [r7, #0]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 ff8c 	bl	80094c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a1e      	ldr	r2, [pc, #120]	; (8008630 <HAL_TIM_PWM_Start+0x98>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d013      	beq.n	80085e2 <HAL_TIM_PWM_Start+0x4a>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a1d      	ldr	r2, [pc, #116]	; (8008634 <HAL_TIM_PWM_Start+0x9c>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d00e      	beq.n	80085e2 <HAL_TIM_PWM_Start+0x4a>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a1b      	ldr	r2, [pc, #108]	; (8008638 <HAL_TIM_PWM_Start+0xa0>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d009      	beq.n	80085e2 <HAL_TIM_PWM_Start+0x4a>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a1a      	ldr	r2, [pc, #104]	; (800863c <HAL_TIM_PWM_Start+0xa4>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d004      	beq.n	80085e2 <HAL_TIM_PWM_Start+0x4a>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a18      	ldr	r2, [pc, #96]	; (8008640 <HAL_TIM_PWM_Start+0xa8>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d101      	bne.n	80085e6 <HAL_TIM_PWM_Start+0x4e>
 80085e2:	2301      	movs	r3, #1
 80085e4:	e000      	b.n	80085e8 <HAL_TIM_PWM_Start+0x50>
 80085e6:	2300      	movs	r3, #0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d007      	beq.n	80085fc <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	689a      	ldr	r2, [r3, #8]
 8008602:	4b10      	ldr	r3, [pc, #64]	; (8008644 <HAL_TIM_PWM_Start+0xac>)
 8008604:	4013      	ands	r3, r2
 8008606:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2b06      	cmp	r3, #6
 800860c:	d00b      	beq.n	8008626 <HAL_TIM_PWM_Start+0x8e>
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008614:	d007      	beq.n	8008626 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f042 0201 	orr.w	r2, r2, #1
 8008624:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	40010000 	.word	0x40010000
 8008634:	40010400 	.word	0x40010400
 8008638:	40014000 	.word	0x40014000
 800863c:	40014400 	.word	0x40014400
 8008640:	40014800 	.word	0x40014800
 8008644:	00010007 	.word	0x00010007

08008648 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	f003 0302 	and.w	r3, r3, #2
 800865a:	2b02      	cmp	r3, #2
 800865c:	d122      	bne.n	80086a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	f003 0302 	and.w	r3, r3, #2
 8008668:	2b02      	cmp	r3, #2
 800866a:	d11b      	bne.n	80086a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f06f 0202 	mvn.w	r2, #2
 8008674:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2201      	movs	r2, #1
 800867a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	f003 0303 	and.w	r3, r3, #3
 8008686:	2b00      	cmp	r3, #0
 8008688:	d003      	beq.n	8008692 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 faf8 	bl	8008c80 <HAL_TIM_IC_CaptureCallback>
 8008690:	e005      	b.n	800869e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 faea 	bl	8008c6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fafb 	bl	8008c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	f003 0304 	and.w	r3, r3, #4
 80086ae:	2b04      	cmp	r3, #4
 80086b0:	d122      	bne.n	80086f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	f003 0304 	and.w	r3, r3, #4
 80086bc:	2b04      	cmp	r3, #4
 80086be:	d11b      	bne.n	80086f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f06f 0204 	mvn.w	r2, #4
 80086c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2202      	movs	r2, #2
 80086ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	699b      	ldr	r3, [r3, #24]
 80086d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d003      	beq.n	80086e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 face 	bl	8008c80 <HAL_TIM_IC_CaptureCallback>
 80086e4:	e005      	b.n	80086f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fac0 	bl	8008c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 fad1 	bl	8008c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	f003 0308 	and.w	r3, r3, #8
 8008702:	2b08      	cmp	r3, #8
 8008704:	d122      	bne.n	800874c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	f003 0308 	and.w	r3, r3, #8
 8008710:	2b08      	cmp	r3, #8
 8008712:	d11b      	bne.n	800874c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f06f 0208 	mvn.w	r2, #8
 800871c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2204      	movs	r2, #4
 8008722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	69db      	ldr	r3, [r3, #28]
 800872a:	f003 0303 	and.w	r3, r3, #3
 800872e:	2b00      	cmp	r3, #0
 8008730:	d003      	beq.n	800873a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 faa4 	bl	8008c80 <HAL_TIM_IC_CaptureCallback>
 8008738:	e005      	b.n	8008746 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 fa96 	bl	8008c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 faa7 	bl	8008c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	f003 0310 	and.w	r3, r3, #16
 8008756:	2b10      	cmp	r3, #16
 8008758:	d122      	bne.n	80087a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	f003 0310 	and.w	r3, r3, #16
 8008764:	2b10      	cmp	r3, #16
 8008766:	d11b      	bne.n	80087a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f06f 0210 	mvn.w	r2, #16
 8008770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2208      	movs	r2, #8
 8008776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	69db      	ldr	r3, [r3, #28]
 800877e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008782:	2b00      	cmp	r3, #0
 8008784:	d003      	beq.n	800878e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 fa7a 	bl	8008c80 <HAL_TIM_IC_CaptureCallback>
 800878c:	e005      	b.n	800879a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 fa6c 	bl	8008c6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 fa7d 	bl	8008c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	f003 0301 	and.w	r3, r3, #1
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d10e      	bne.n	80087cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	f003 0301 	and.w	r3, r3, #1
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d107      	bne.n	80087cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f06f 0201 	mvn.w	r2, #1
 80087c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 fa46 	bl	8008c58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087d6:	2b80      	cmp	r3, #128	; 0x80
 80087d8:	d10e      	bne.n	80087f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087e4:	2b80      	cmp	r3, #128	; 0x80
 80087e6:	d107      	bne.n	80087f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80087f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 ffa2 	bl	800973c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008806:	d10e      	bne.n	8008826 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008812:	2b80      	cmp	r3, #128	; 0x80
 8008814:	d107      	bne.n	8008826 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800881e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 ff95 	bl	8009750 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	691b      	ldr	r3, [r3, #16]
 800882c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008830:	2b40      	cmp	r3, #64	; 0x40
 8008832:	d10e      	bne.n	8008852 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800883e:	2b40      	cmp	r3, #64	; 0x40
 8008840:	d107      	bne.n	8008852 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800884a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 fa2b 	bl	8008ca8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	691b      	ldr	r3, [r3, #16]
 8008858:	f003 0320 	and.w	r3, r3, #32
 800885c:	2b20      	cmp	r3, #32
 800885e:	d10e      	bne.n	800887e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68db      	ldr	r3, [r3, #12]
 8008866:	f003 0320 	and.w	r3, r3, #32
 800886a:	2b20      	cmp	r3, #32
 800886c:	d107      	bne.n	800887e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f06f 0220 	mvn.w	r2, #32
 8008876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 ff55 	bl	8009728 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800887e:	bf00      	nop
 8008880:	3708      	adds	r7, #8
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
	...

08008888 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800889a:	2b01      	cmp	r3, #1
 800889c:	d101      	bne.n	80088a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800889e:	2302      	movs	r3, #2
 80088a0:	e105      	b.n	8008aae <HAL_TIM_PWM_ConfigChannel+0x226>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2201      	movs	r2, #1
 80088a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2202      	movs	r2, #2
 80088ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2b14      	cmp	r3, #20
 80088b6:	f200 80f0 	bhi.w	8008a9a <HAL_TIM_PWM_ConfigChannel+0x212>
 80088ba:	a201      	add	r2, pc, #4	; (adr r2, 80088c0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80088bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c0:	08008915 	.word	0x08008915
 80088c4:	08008a9b 	.word	0x08008a9b
 80088c8:	08008a9b 	.word	0x08008a9b
 80088cc:	08008a9b 	.word	0x08008a9b
 80088d0:	08008955 	.word	0x08008955
 80088d4:	08008a9b 	.word	0x08008a9b
 80088d8:	08008a9b 	.word	0x08008a9b
 80088dc:	08008a9b 	.word	0x08008a9b
 80088e0:	08008997 	.word	0x08008997
 80088e4:	08008a9b 	.word	0x08008a9b
 80088e8:	08008a9b 	.word	0x08008a9b
 80088ec:	08008a9b 	.word	0x08008a9b
 80088f0:	080089d7 	.word	0x080089d7
 80088f4:	08008a9b 	.word	0x08008a9b
 80088f8:	08008a9b 	.word	0x08008a9b
 80088fc:	08008a9b 	.word	0x08008a9b
 8008900:	08008a19 	.word	0x08008a19
 8008904:	08008a9b 	.word	0x08008a9b
 8008908:	08008a9b 	.word	0x08008a9b
 800890c:	08008a9b 	.word	0x08008a9b
 8008910:	08008a59 	.word	0x08008a59
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68b9      	ldr	r1, [r7, #8]
 800891a:	4618      	mov	r0, r3
 800891c:	f000 fa68 	bl	8008df0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	699a      	ldr	r2, [r3, #24]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f042 0208 	orr.w	r2, r2, #8
 800892e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	699a      	ldr	r2, [r3, #24]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f022 0204 	bic.w	r2, r2, #4
 800893e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	6999      	ldr	r1, [r3, #24]
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	691a      	ldr	r2, [r3, #16]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	430a      	orrs	r2, r1
 8008950:	619a      	str	r2, [r3, #24]
      break;
 8008952:	e0a3      	b.n	8008a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68b9      	ldr	r1, [r7, #8]
 800895a:	4618      	mov	r0, r3
 800895c:	f000 fad8 	bl	8008f10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	699a      	ldr	r2, [r3, #24]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800896e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	699a      	ldr	r2, [r3, #24]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800897e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	6999      	ldr	r1, [r3, #24]
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	021a      	lsls	r2, r3, #8
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	430a      	orrs	r2, r1
 8008992:	619a      	str	r2, [r3, #24]
      break;
 8008994:	e082      	b.n	8008a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	68b9      	ldr	r1, [r7, #8]
 800899c:	4618      	mov	r0, r3
 800899e:	f000 fb41 	bl	8009024 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	69da      	ldr	r2, [r3, #28]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f042 0208 	orr.w	r2, r2, #8
 80089b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	69da      	ldr	r2, [r3, #28]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f022 0204 	bic.w	r2, r2, #4
 80089c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	69d9      	ldr	r1, [r3, #28]
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	691a      	ldr	r2, [r3, #16]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	430a      	orrs	r2, r1
 80089d2:	61da      	str	r2, [r3, #28]
      break;
 80089d4:	e062      	b.n	8008a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	68b9      	ldr	r1, [r7, #8]
 80089dc:	4618      	mov	r0, r3
 80089de:	f000 fba7 	bl	8009130 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	69da      	ldr	r2, [r3, #28]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	69da      	ldr	r2, [r3, #28]
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	69d9      	ldr	r1, [r3, #28]
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	021a      	lsls	r2, r3, #8
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	430a      	orrs	r2, r1
 8008a14:	61da      	str	r2, [r3, #28]
      break;
 8008a16:	e041      	b.n	8008a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68b9      	ldr	r1, [r7, #8]
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f000 fbee 	bl	8009200 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f042 0208 	orr.w	r2, r2, #8
 8008a32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f022 0204 	bic.w	r2, r2, #4
 8008a42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	691a      	ldr	r2, [r3, #16]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	430a      	orrs	r2, r1
 8008a54:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008a56:	e021      	b.n	8008a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68b9      	ldr	r1, [r7, #8]
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f000 fc30 	bl	80092c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	691b      	ldr	r3, [r3, #16]
 8008a8e:	021a      	lsls	r2, r3, #8
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	430a      	orrs	r2, r1
 8008a96:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008a98:	e000      	b.n	8008a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8008a9a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop

08008ab8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d101      	bne.n	8008ad0 <HAL_TIM_ConfigClockSource+0x18>
 8008acc:	2302      	movs	r3, #2
 8008ace:	e0b7      	b.n	8008c40 <HAL_TIM_ConfigClockSource+0x188>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2202      	movs	r2, #2
 8008adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	4b57      	ldr	r3, [pc, #348]	; (8008c48 <HAL_TIM_ConfigClockSource+0x190>)
 8008aec:	4013      	ands	r3, r2
 8008aee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008af6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2b70      	cmp	r3, #112	; 0x70
 8008b06:	d02e      	beq.n	8008b66 <HAL_TIM_ConfigClockSource+0xae>
 8008b08:	2b70      	cmp	r3, #112	; 0x70
 8008b0a:	d812      	bhi.n	8008b32 <HAL_TIM_ConfigClockSource+0x7a>
 8008b0c:	2b30      	cmp	r3, #48	; 0x30
 8008b0e:	f000 8084 	beq.w	8008c1a <HAL_TIM_ConfigClockSource+0x162>
 8008b12:	2b30      	cmp	r3, #48	; 0x30
 8008b14:	d806      	bhi.n	8008b24 <HAL_TIM_ConfigClockSource+0x6c>
 8008b16:	2b10      	cmp	r3, #16
 8008b18:	d07f      	beq.n	8008c1a <HAL_TIM_ConfigClockSource+0x162>
 8008b1a:	2b20      	cmp	r3, #32
 8008b1c:	d07d      	beq.n	8008c1a <HAL_TIM_ConfigClockSource+0x162>
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d07b      	beq.n	8008c1a <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008b22:	e084      	b.n	8008c2e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008b24:	2b50      	cmp	r3, #80	; 0x50
 8008b26:	d048      	beq.n	8008bba <HAL_TIM_ConfigClockSource+0x102>
 8008b28:	2b60      	cmp	r3, #96	; 0x60
 8008b2a:	d056      	beq.n	8008bda <HAL_TIM_ConfigClockSource+0x122>
 8008b2c:	2b40      	cmp	r3, #64	; 0x40
 8008b2e:	d064      	beq.n	8008bfa <HAL_TIM_ConfigClockSource+0x142>
      break;
 8008b30:	e07d      	b.n	8008c2e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008b32:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008b36:	d070      	beq.n	8008c1a <HAL_TIM_ConfigClockSource+0x162>
 8008b38:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008b3c:	d809      	bhi.n	8008b52 <HAL_TIM_ConfigClockSource+0x9a>
 8008b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b42:	d027      	beq.n	8008b94 <HAL_TIM_ConfigClockSource+0xdc>
 8008b44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b48:	d067      	beq.n	8008c1a <HAL_TIM_ConfigClockSource+0x162>
 8008b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b4e:	d06d      	beq.n	8008c2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008b50:	e06d      	b.n	8008c2e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008b52:	4a3e      	ldr	r2, [pc, #248]	; (8008c4c <HAL_TIM_ConfigClockSource+0x194>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d060      	beq.n	8008c1a <HAL_TIM_ConfigClockSource+0x162>
 8008b58:	4a3d      	ldr	r2, [pc, #244]	; (8008c50 <HAL_TIM_ConfigClockSource+0x198>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d05d      	beq.n	8008c1a <HAL_TIM_ConfigClockSource+0x162>
 8008b5e:	4a3d      	ldr	r2, [pc, #244]	; (8008c54 <HAL_TIM_ConfigClockSource+0x19c>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d05a      	beq.n	8008c1a <HAL_TIM_ConfigClockSource+0x162>
      break;
 8008b64:	e063      	b.n	8008c2e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6818      	ldr	r0, [r3, #0]
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	6899      	ldr	r1, [r3, #8]
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	685a      	ldr	r2, [r3, #4]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	f000 fc87 	bl	8009488 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008b88:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	609a      	str	r2, [r3, #8]
      break;
 8008b92:	e04c      	b.n	8008c2e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6818      	ldr	r0, [r3, #0]
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	6899      	ldr	r1, [r3, #8]
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	685a      	ldr	r2, [r3, #4]
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	f000 fc70 	bl	8009488 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	689a      	ldr	r2, [r3, #8]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008bb6:	609a      	str	r2, [r3, #8]
      break;
 8008bb8:	e039      	b.n	8008c2e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6818      	ldr	r0, [r3, #0]
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	6859      	ldr	r1, [r3, #4]
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	f000 fbe0 	bl	800938c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2150      	movs	r1, #80	; 0x50
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f000 fc3a 	bl	800944c <TIM_ITRx_SetConfig>
      break;
 8008bd8:	e029      	b.n	8008c2e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6818      	ldr	r0, [r3, #0]
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	6859      	ldr	r1, [r3, #4]
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	461a      	mov	r2, r3
 8008be8:	f000 fbff 	bl	80093ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2160      	movs	r1, #96	; 0x60
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f000 fc2a 	bl	800944c <TIM_ITRx_SetConfig>
      break;
 8008bf8:	e019      	b.n	8008c2e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6818      	ldr	r0, [r3, #0]
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	6859      	ldr	r1, [r3, #4]
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	461a      	mov	r2, r3
 8008c08:	f000 fbc0 	bl	800938c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2140      	movs	r1, #64	; 0x40
 8008c12:	4618      	mov	r0, r3
 8008c14:	f000 fc1a 	bl	800944c <TIM_ITRx_SetConfig>
      break;
 8008c18:	e009      	b.n	8008c2e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4619      	mov	r1, r3
 8008c24:	4610      	mov	r0, r2
 8008c26:	f000 fc11 	bl	800944c <TIM_ITRx_SetConfig>
      break;
 8008c2a:	e000      	b.n	8008c2e <HAL_TIM_ConfigClockSource+0x176>
      break;
 8008c2c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2201      	movs	r2, #1
 8008c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	ffceff88 	.word	0xffceff88
 8008c4c:	00100030 	.word	0x00100030
 8008c50:	00100040 	.word	0x00100040
 8008c54:	00100020 	.word	0x00100020

08008c58 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008c60:	bf00      	nop
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c74:	bf00      	nop
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c88:	bf00      	nop
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c9c:	bf00      	nop
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008cb0:	bf00      	nop
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b085      	sub	sp, #20
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4a40      	ldr	r2, [pc, #256]	; (8008dd0 <TIM_Base_SetConfig+0x114>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d013      	beq.n	8008cfc <TIM_Base_SetConfig+0x40>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cda:	d00f      	beq.n	8008cfc <TIM_Base_SetConfig+0x40>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a3d      	ldr	r2, [pc, #244]	; (8008dd4 <TIM_Base_SetConfig+0x118>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d00b      	beq.n	8008cfc <TIM_Base_SetConfig+0x40>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a3c      	ldr	r2, [pc, #240]	; (8008dd8 <TIM_Base_SetConfig+0x11c>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d007      	beq.n	8008cfc <TIM_Base_SetConfig+0x40>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a3b      	ldr	r2, [pc, #236]	; (8008ddc <TIM_Base_SetConfig+0x120>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d003      	beq.n	8008cfc <TIM_Base_SetConfig+0x40>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a3a      	ldr	r2, [pc, #232]	; (8008de0 <TIM_Base_SetConfig+0x124>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d108      	bne.n	8008d0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a2f      	ldr	r2, [pc, #188]	; (8008dd0 <TIM_Base_SetConfig+0x114>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d01f      	beq.n	8008d56 <TIM_Base_SetConfig+0x9a>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d1c:	d01b      	beq.n	8008d56 <TIM_Base_SetConfig+0x9a>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a2c      	ldr	r2, [pc, #176]	; (8008dd4 <TIM_Base_SetConfig+0x118>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d017      	beq.n	8008d56 <TIM_Base_SetConfig+0x9a>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a2b      	ldr	r2, [pc, #172]	; (8008dd8 <TIM_Base_SetConfig+0x11c>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d013      	beq.n	8008d56 <TIM_Base_SetConfig+0x9a>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a2a      	ldr	r2, [pc, #168]	; (8008ddc <TIM_Base_SetConfig+0x120>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d00f      	beq.n	8008d56 <TIM_Base_SetConfig+0x9a>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a29      	ldr	r2, [pc, #164]	; (8008de0 <TIM_Base_SetConfig+0x124>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d00b      	beq.n	8008d56 <TIM_Base_SetConfig+0x9a>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a28      	ldr	r2, [pc, #160]	; (8008de4 <TIM_Base_SetConfig+0x128>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d007      	beq.n	8008d56 <TIM_Base_SetConfig+0x9a>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a27      	ldr	r2, [pc, #156]	; (8008de8 <TIM_Base_SetConfig+0x12c>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d003      	beq.n	8008d56 <TIM_Base_SetConfig+0x9a>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4a26      	ldr	r2, [pc, #152]	; (8008dec <TIM_Base_SetConfig+0x130>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d108      	bne.n	8008d68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	68fa      	ldr	r2, [r7, #12]
 8008d64:	4313      	orrs	r3, r2
 8008d66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	695b      	ldr	r3, [r3, #20]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	689a      	ldr	r2, [r3, #8]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4a10      	ldr	r2, [pc, #64]	; (8008dd0 <TIM_Base_SetConfig+0x114>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d00f      	beq.n	8008db4 <TIM_Base_SetConfig+0xf8>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	4a12      	ldr	r2, [pc, #72]	; (8008de0 <TIM_Base_SetConfig+0x124>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d00b      	beq.n	8008db4 <TIM_Base_SetConfig+0xf8>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4a11      	ldr	r2, [pc, #68]	; (8008de4 <TIM_Base_SetConfig+0x128>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d007      	beq.n	8008db4 <TIM_Base_SetConfig+0xf8>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a10      	ldr	r2, [pc, #64]	; (8008de8 <TIM_Base_SetConfig+0x12c>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d003      	beq.n	8008db4 <TIM_Base_SetConfig+0xf8>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	4a0f      	ldr	r2, [pc, #60]	; (8008dec <TIM_Base_SetConfig+0x130>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d103      	bne.n	8008dbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	691a      	ldr	r2, [r3, #16]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	615a      	str	r2, [r3, #20]
}
 8008dc2:	bf00      	nop
 8008dc4:	3714      	adds	r7, #20
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	40010000 	.word	0x40010000
 8008dd4:	40000400 	.word	0x40000400
 8008dd8:	40000800 	.word	0x40000800
 8008ddc:	40000c00 	.word	0x40000c00
 8008de0:	40010400 	.word	0x40010400
 8008de4:	40014000 	.word	0x40014000
 8008de8:	40014400 	.word	0x40014400
 8008dec:	40014800 	.word	0x40014800

08008df0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b087      	sub	sp, #28
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6a1b      	ldr	r3, [r3, #32]
 8008dfe:	f023 0201 	bic.w	r2, r3, #1
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a1b      	ldr	r3, [r3, #32]
 8008e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	4b37      	ldr	r3, [pc, #220]	; (8008ef8 <TIM_OC1_SetConfig+0x108>)
 8008e1c:	4013      	ands	r3, r2
 8008e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f023 0303 	bic.w	r3, r3, #3
 8008e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	68fa      	ldr	r2, [r7, #12]
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	f023 0302 	bic.w	r3, r3, #2
 8008e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	697a      	ldr	r2, [r7, #20]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4a2d      	ldr	r2, [pc, #180]	; (8008efc <TIM_OC1_SetConfig+0x10c>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d00f      	beq.n	8008e6c <TIM_OC1_SetConfig+0x7c>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a2c      	ldr	r2, [pc, #176]	; (8008f00 <TIM_OC1_SetConfig+0x110>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d00b      	beq.n	8008e6c <TIM_OC1_SetConfig+0x7c>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4a2b      	ldr	r2, [pc, #172]	; (8008f04 <TIM_OC1_SetConfig+0x114>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d007      	beq.n	8008e6c <TIM_OC1_SetConfig+0x7c>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4a2a      	ldr	r2, [pc, #168]	; (8008f08 <TIM_OC1_SetConfig+0x118>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d003      	beq.n	8008e6c <TIM_OC1_SetConfig+0x7c>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4a29      	ldr	r2, [pc, #164]	; (8008f0c <TIM_OC1_SetConfig+0x11c>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d10c      	bne.n	8008e86 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	f023 0308 	bic.w	r3, r3, #8
 8008e72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	697a      	ldr	r2, [r7, #20]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	f023 0304 	bic.w	r3, r3, #4
 8008e84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4a1c      	ldr	r2, [pc, #112]	; (8008efc <TIM_OC1_SetConfig+0x10c>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d00f      	beq.n	8008eae <TIM_OC1_SetConfig+0xbe>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4a1b      	ldr	r2, [pc, #108]	; (8008f00 <TIM_OC1_SetConfig+0x110>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d00b      	beq.n	8008eae <TIM_OC1_SetConfig+0xbe>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4a1a      	ldr	r2, [pc, #104]	; (8008f04 <TIM_OC1_SetConfig+0x114>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d007      	beq.n	8008eae <TIM_OC1_SetConfig+0xbe>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	4a19      	ldr	r2, [pc, #100]	; (8008f08 <TIM_OC1_SetConfig+0x118>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d003      	beq.n	8008eae <TIM_OC1_SetConfig+0xbe>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4a18      	ldr	r2, [pc, #96]	; (8008f0c <TIM_OC1_SetConfig+0x11c>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d111      	bne.n	8008ed2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008eb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ebc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	695b      	ldr	r3, [r3, #20]
 8008ec2:	693a      	ldr	r2, [r7, #16]
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	699b      	ldr	r3, [r3, #24]
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	693a      	ldr	r2, [r7, #16]
 8008ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	685a      	ldr	r2, [r3, #4]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	697a      	ldr	r2, [r7, #20]
 8008eea:	621a      	str	r2, [r3, #32]
}
 8008eec:	bf00      	nop
 8008eee:	371c      	adds	r7, #28
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr
 8008ef8:	fffeff8f 	.word	0xfffeff8f
 8008efc:	40010000 	.word	0x40010000
 8008f00:	40010400 	.word	0x40010400
 8008f04:	40014000 	.word	0x40014000
 8008f08:	40014400 	.word	0x40014400
 8008f0c:	40014800 	.word	0x40014800

08008f10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b087      	sub	sp, #28
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a1b      	ldr	r3, [r3, #32]
 8008f1e:	f023 0210 	bic.w	r2, r3, #16
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a1b      	ldr	r3, [r3, #32]
 8008f2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	699b      	ldr	r3, [r3, #24]
 8008f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	4b34      	ldr	r3, [pc, #208]	; (800900c <TIM_OC2_SetConfig+0xfc>)
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	021b      	lsls	r3, r3, #8
 8008f4e:	68fa      	ldr	r2, [r7, #12]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	f023 0320 	bic.w	r3, r3, #32
 8008f5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	011b      	lsls	r3, r3, #4
 8008f62:	697a      	ldr	r2, [r7, #20]
 8008f64:	4313      	orrs	r3, r2
 8008f66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4a29      	ldr	r2, [pc, #164]	; (8009010 <TIM_OC2_SetConfig+0x100>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d003      	beq.n	8008f78 <TIM_OC2_SetConfig+0x68>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a28      	ldr	r2, [pc, #160]	; (8009014 <TIM_OC2_SetConfig+0x104>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d10d      	bne.n	8008f94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	011b      	lsls	r3, r3, #4
 8008f86:	697a      	ldr	r2, [r7, #20]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4a1e      	ldr	r2, [pc, #120]	; (8009010 <TIM_OC2_SetConfig+0x100>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d00f      	beq.n	8008fbc <TIM_OC2_SetConfig+0xac>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4a1d      	ldr	r2, [pc, #116]	; (8009014 <TIM_OC2_SetConfig+0x104>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d00b      	beq.n	8008fbc <TIM_OC2_SetConfig+0xac>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	4a1c      	ldr	r2, [pc, #112]	; (8009018 <TIM_OC2_SetConfig+0x108>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d007      	beq.n	8008fbc <TIM_OC2_SetConfig+0xac>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4a1b      	ldr	r2, [pc, #108]	; (800901c <TIM_OC2_SetConfig+0x10c>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d003      	beq.n	8008fbc <TIM_OC2_SetConfig+0xac>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a1a      	ldr	r2, [pc, #104]	; (8009020 <TIM_OC2_SetConfig+0x110>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d113      	bne.n	8008fe4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008fc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008fca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	695b      	ldr	r3, [r3, #20]
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	693a      	ldr	r2, [r7, #16]
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	699b      	ldr	r3, [r3, #24]
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	693a      	ldr	r2, [r7, #16]
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	693a      	ldr	r2, [r7, #16]
 8008fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	68fa      	ldr	r2, [r7, #12]
 8008fee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	685a      	ldr	r2, [r3, #4]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	697a      	ldr	r2, [r7, #20]
 8008ffc:	621a      	str	r2, [r3, #32]
}
 8008ffe:	bf00      	nop
 8009000:	371c      	adds	r7, #28
 8009002:	46bd      	mov	sp, r7
 8009004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009008:	4770      	bx	lr
 800900a:	bf00      	nop
 800900c:	feff8fff 	.word	0xfeff8fff
 8009010:	40010000 	.word	0x40010000
 8009014:	40010400 	.word	0x40010400
 8009018:	40014000 	.word	0x40014000
 800901c:	40014400 	.word	0x40014400
 8009020:	40014800 	.word	0x40014800

08009024 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009024:	b480      	push	{r7}
 8009026:	b087      	sub	sp, #28
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a1b      	ldr	r3, [r3, #32]
 8009032:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a1b      	ldr	r3, [r3, #32]
 800903e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	69db      	ldr	r3, [r3, #28]
 800904a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f023 0303 	bic.w	r3, r3, #3
 800905a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	68fa      	ldr	r2, [r7, #12]
 8009062:	4313      	orrs	r3, r2
 8009064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800906c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	021b      	lsls	r3, r3, #8
 8009074:	697a      	ldr	r2, [r7, #20]
 8009076:	4313      	orrs	r3, r2
 8009078:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4a27      	ldr	r2, [pc, #156]	; (800911c <TIM_OC3_SetConfig+0xf8>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d003      	beq.n	800908a <TIM_OC3_SetConfig+0x66>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a26      	ldr	r2, [pc, #152]	; (8009120 <TIM_OC3_SetConfig+0xfc>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d10d      	bne.n	80090a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009090:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	021b      	lsls	r3, r3, #8
 8009098:	697a      	ldr	r2, [r7, #20]
 800909a:	4313      	orrs	r3, r2
 800909c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4a1c      	ldr	r2, [pc, #112]	; (800911c <TIM_OC3_SetConfig+0xf8>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d00f      	beq.n	80090ce <TIM_OC3_SetConfig+0xaa>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a1b      	ldr	r2, [pc, #108]	; (8009120 <TIM_OC3_SetConfig+0xfc>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d00b      	beq.n	80090ce <TIM_OC3_SetConfig+0xaa>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a1a      	ldr	r2, [pc, #104]	; (8009124 <TIM_OC3_SetConfig+0x100>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d007      	beq.n	80090ce <TIM_OC3_SetConfig+0xaa>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4a19      	ldr	r2, [pc, #100]	; (8009128 <TIM_OC3_SetConfig+0x104>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d003      	beq.n	80090ce <TIM_OC3_SetConfig+0xaa>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4a18      	ldr	r2, [pc, #96]	; (800912c <TIM_OC3_SetConfig+0x108>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d113      	bne.n	80090f6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	695b      	ldr	r3, [r3, #20]
 80090e2:	011b      	lsls	r3, r3, #4
 80090e4:	693a      	ldr	r2, [r7, #16]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	699b      	ldr	r3, [r3, #24]
 80090ee:	011b      	lsls	r3, r3, #4
 80090f0:	693a      	ldr	r2, [r7, #16]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	693a      	ldr	r2, [r7, #16]
 80090fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	68fa      	ldr	r2, [r7, #12]
 8009100:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	685a      	ldr	r2, [r3, #4]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	697a      	ldr	r2, [r7, #20]
 800910e:	621a      	str	r2, [r3, #32]
}
 8009110:	bf00      	nop
 8009112:	371c      	adds	r7, #28
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr
 800911c:	40010000 	.word	0x40010000
 8009120:	40010400 	.word	0x40010400
 8009124:	40014000 	.word	0x40014000
 8009128:	40014400 	.word	0x40014400
 800912c:	40014800 	.word	0x40014800

08009130 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009130:	b480      	push	{r7}
 8009132:	b087      	sub	sp, #28
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6a1b      	ldr	r3, [r3, #32]
 800913e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a1b      	ldr	r3, [r3, #32]
 800914a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	69db      	ldr	r3, [r3, #28]
 8009156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800915e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009166:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	021b      	lsls	r3, r3, #8
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	4313      	orrs	r3, r2
 8009172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800917a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	031b      	lsls	r3, r3, #12
 8009182:	693a      	ldr	r2, [r7, #16]
 8009184:	4313      	orrs	r3, r2
 8009186:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	4a18      	ldr	r2, [pc, #96]	; (80091ec <TIM_OC4_SetConfig+0xbc>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d00f      	beq.n	80091b0 <TIM_OC4_SetConfig+0x80>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4a17      	ldr	r2, [pc, #92]	; (80091f0 <TIM_OC4_SetConfig+0xc0>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d00b      	beq.n	80091b0 <TIM_OC4_SetConfig+0x80>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4a16      	ldr	r2, [pc, #88]	; (80091f4 <TIM_OC4_SetConfig+0xc4>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d007      	beq.n	80091b0 <TIM_OC4_SetConfig+0x80>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	4a15      	ldr	r2, [pc, #84]	; (80091f8 <TIM_OC4_SetConfig+0xc8>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d003      	beq.n	80091b0 <TIM_OC4_SetConfig+0x80>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4a14      	ldr	r2, [pc, #80]	; (80091fc <TIM_OC4_SetConfig+0xcc>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d109      	bne.n	80091c4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	695b      	ldr	r3, [r3, #20]
 80091bc:	019b      	lsls	r3, r3, #6
 80091be:	697a      	ldr	r2, [r7, #20]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	697a      	ldr	r2, [r7, #20]
 80091c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	685a      	ldr	r2, [r3, #4]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	693a      	ldr	r2, [r7, #16]
 80091dc:	621a      	str	r2, [r3, #32]
}
 80091de:	bf00      	nop
 80091e0:	371c      	adds	r7, #28
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	40010000 	.word	0x40010000
 80091f0:	40010400 	.word	0x40010400
 80091f4:	40014000 	.word	0x40014000
 80091f8:	40014400 	.word	0x40014400
 80091fc:	40014800 	.word	0x40014800

08009200 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009200:	b480      	push	{r7}
 8009202:	b087      	sub	sp, #28
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6a1b      	ldr	r3, [r3, #32]
 800920e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6a1b      	ldr	r3, [r3, #32]
 800921a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800922e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	4313      	orrs	r3, r2
 8009238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009240:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	041b      	lsls	r3, r3, #16
 8009248:	693a      	ldr	r2, [r7, #16]
 800924a:	4313      	orrs	r3, r2
 800924c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	4a17      	ldr	r2, [pc, #92]	; (80092b0 <TIM_OC5_SetConfig+0xb0>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d00f      	beq.n	8009276 <TIM_OC5_SetConfig+0x76>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	4a16      	ldr	r2, [pc, #88]	; (80092b4 <TIM_OC5_SetConfig+0xb4>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d00b      	beq.n	8009276 <TIM_OC5_SetConfig+0x76>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	4a15      	ldr	r2, [pc, #84]	; (80092b8 <TIM_OC5_SetConfig+0xb8>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d007      	beq.n	8009276 <TIM_OC5_SetConfig+0x76>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4a14      	ldr	r2, [pc, #80]	; (80092bc <TIM_OC5_SetConfig+0xbc>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d003      	beq.n	8009276 <TIM_OC5_SetConfig+0x76>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4a13      	ldr	r2, [pc, #76]	; (80092c0 <TIM_OC5_SetConfig+0xc0>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d109      	bne.n	800928a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800927c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	695b      	ldr	r3, [r3, #20]
 8009282:	021b      	lsls	r3, r3, #8
 8009284:	697a      	ldr	r2, [r7, #20]
 8009286:	4313      	orrs	r3, r2
 8009288:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	697a      	ldr	r2, [r7, #20]
 800928e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	68fa      	ldr	r2, [r7, #12]
 8009294:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	685a      	ldr	r2, [r3, #4]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	693a      	ldr	r2, [r7, #16]
 80092a2:	621a      	str	r2, [r3, #32]
}
 80092a4:	bf00      	nop
 80092a6:	371c      	adds	r7, #28
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr
 80092b0:	40010000 	.word	0x40010000
 80092b4:	40010400 	.word	0x40010400
 80092b8:	40014000 	.word	0x40014000
 80092bc:	40014400 	.word	0x40014400
 80092c0:	40014800 	.word	0x40014800

080092c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b087      	sub	sp, #28
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a1b      	ldr	r3, [r3, #32]
 80092d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a1b      	ldr	r3, [r3, #32]
 80092de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	021b      	lsls	r3, r3, #8
 80092fa:	68fa      	ldr	r2, [r7, #12]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009306:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	051b      	lsls	r3, r3, #20
 800930e:	693a      	ldr	r2, [r7, #16]
 8009310:	4313      	orrs	r3, r2
 8009312:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	4a18      	ldr	r2, [pc, #96]	; (8009378 <TIM_OC6_SetConfig+0xb4>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d00f      	beq.n	800933c <TIM_OC6_SetConfig+0x78>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	4a17      	ldr	r2, [pc, #92]	; (800937c <TIM_OC6_SetConfig+0xb8>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d00b      	beq.n	800933c <TIM_OC6_SetConfig+0x78>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4a16      	ldr	r2, [pc, #88]	; (8009380 <TIM_OC6_SetConfig+0xbc>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d007      	beq.n	800933c <TIM_OC6_SetConfig+0x78>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	4a15      	ldr	r2, [pc, #84]	; (8009384 <TIM_OC6_SetConfig+0xc0>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d003      	beq.n	800933c <TIM_OC6_SetConfig+0x78>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a14      	ldr	r2, [pc, #80]	; (8009388 <TIM_OC6_SetConfig+0xc4>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d109      	bne.n	8009350 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009342:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	695b      	ldr	r3, [r3, #20]
 8009348:	029b      	lsls	r3, r3, #10
 800934a:	697a      	ldr	r2, [r7, #20]
 800934c:	4313      	orrs	r3, r2
 800934e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	697a      	ldr	r2, [r7, #20]
 8009354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	685a      	ldr	r2, [r3, #4]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	693a      	ldr	r2, [r7, #16]
 8009368:	621a      	str	r2, [r3, #32]
}
 800936a:	bf00      	nop
 800936c:	371c      	adds	r7, #28
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop
 8009378:	40010000 	.word	0x40010000
 800937c:	40010400 	.word	0x40010400
 8009380:	40014000 	.word	0x40014000
 8009384:	40014400 	.word	0x40014400
 8009388:	40014800 	.word	0x40014800

0800938c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800938c:	b480      	push	{r7}
 800938e:	b087      	sub	sp, #28
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	6a1b      	ldr	r3, [r3, #32]
 800939c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6a1b      	ldr	r3, [r3, #32]
 80093a2:	f023 0201 	bic.w	r2, r3, #1
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	699b      	ldr	r3, [r3, #24]
 80093ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80093b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	011b      	lsls	r3, r3, #4
 80093bc:	693a      	ldr	r2, [r7, #16]
 80093be:	4313      	orrs	r3, r2
 80093c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	f023 030a 	bic.w	r3, r3, #10
 80093c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80093ca:	697a      	ldr	r2, [r7, #20]
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	4313      	orrs	r3, r2
 80093d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	693a      	ldr	r2, [r7, #16]
 80093d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	697a      	ldr	r2, [r7, #20]
 80093dc:	621a      	str	r2, [r3, #32]
}
 80093de:	bf00      	nop
 80093e0:	371c      	adds	r7, #28
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr

080093ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093ea:	b480      	push	{r7}
 80093ec:	b087      	sub	sp, #28
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	60f8      	str	r0, [r7, #12]
 80093f2:	60b9      	str	r1, [r7, #8]
 80093f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6a1b      	ldr	r3, [r3, #32]
 80093fa:	f023 0210 	bic.w	r2, r3, #16
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	699b      	ldr	r3, [r3, #24]
 8009406:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6a1b      	ldr	r3, [r3, #32]
 800940c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009414:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	031b      	lsls	r3, r3, #12
 800941a:	697a      	ldr	r2, [r7, #20]
 800941c:	4313      	orrs	r3, r2
 800941e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009426:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	011b      	lsls	r3, r3, #4
 800942c:	693a      	ldr	r2, [r7, #16]
 800942e:	4313      	orrs	r3, r2
 8009430:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	697a      	ldr	r2, [r7, #20]
 8009436:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	693a      	ldr	r2, [r7, #16]
 800943c:	621a      	str	r2, [r3, #32]
}
 800943e:	bf00      	nop
 8009440:	371c      	adds	r7, #28
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr
	...

0800944c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_ITR7: Internal Trigger 7
  *            @arg TIM_TS_ITR8: Internal Trigger 8
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800944c:	b480      	push	{r7}
 800944e:	b085      	sub	sp, #20
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800945c:	68fa      	ldr	r2, [r7, #12]
 800945e:	4b09      	ldr	r3, [pc, #36]	; (8009484 <TIM_ITRx_SetConfig+0x38>)
 8009460:	4013      	ands	r3, r2
 8009462:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009464:	683a      	ldr	r2, [r7, #0]
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	4313      	orrs	r3, r2
 800946a:	f043 0307 	orr.w	r3, r3, #7
 800946e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	609a      	str	r2, [r3, #8]
}
 8009476:	bf00      	nop
 8009478:	3714      	adds	r7, #20
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr
 8009482:	bf00      	nop
 8009484:	ffcfff8f 	.word	0xffcfff8f

08009488 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009488:	b480      	push	{r7}
 800948a:	b087      	sub	sp, #28
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
 8009494:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80094a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	021a      	lsls	r2, r3, #8
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	431a      	orrs	r2, r3
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	697a      	ldr	r2, [r7, #20]
 80094b2:	4313      	orrs	r3, r2
 80094b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	697a      	ldr	r2, [r7, #20]
 80094ba:	609a      	str	r2, [r3, #8]
}
 80094bc:	bf00      	nop
 80094be:	371c      	adds	r7, #28
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b087      	sub	sp, #28
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	f003 031f 	and.w	r3, r3, #31
 80094da:	2201      	movs	r2, #1
 80094dc:	fa02 f303 	lsl.w	r3, r2, r3
 80094e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	6a1a      	ldr	r2, [r3, #32]
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	43db      	mvns	r3, r3
 80094ea:	401a      	ands	r2, r3
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6a1a      	ldr	r2, [r3, #32]
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	f003 031f 	and.w	r3, r3, #31
 80094fa:	6879      	ldr	r1, [r7, #4]
 80094fc:	fa01 f303 	lsl.w	r3, r1, r3
 8009500:	431a      	orrs	r2, r3
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	621a      	str	r2, [r3, #32]
}
 8009506:	bf00      	nop
 8009508:	371c      	adds	r7, #28
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr
	...

08009514 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2204      	movs	r2, #4
 8009524:	6839      	ldr	r1, [r7, #0]
 8009526:	4618      	mov	r0, r3
 8009528:	f000 f91c 	bl	8009764 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800953a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	689a      	ldr	r2, [r3, #8]
 8009542:	4b0b      	ldr	r3, [pc, #44]	; (8009570 <HAL_TIMEx_PWMN_Start+0x5c>)
 8009544:	4013      	ands	r3, r2
 8009546:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2b06      	cmp	r3, #6
 800954c:	d00b      	beq.n	8009566 <HAL_TIMEx_PWMN_Start+0x52>
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009554:	d007      	beq.n	8009566 <HAL_TIMEx_PWMN_Start+0x52>
  {
    __HAL_TIM_ENABLE(htim);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f042 0201 	orr.w	r2, r2, #1
 8009564:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	3710      	adds	r7, #16
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	00010007 	.word	0x00010007

08009574 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009574:	b480      	push	{r7}
 8009576:	b085      	sub	sp, #20
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009584:	2b01      	cmp	r3, #1
 8009586:	d101      	bne.n	800958c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009588:	2302      	movs	r3, #2
 800958a:	e045      	b.n	8009618 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2202      	movs	r2, #2
 8009598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a1c      	ldr	r2, [pc, #112]	; (8009624 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d004      	beq.n	80095c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a1b      	ldr	r2, [pc, #108]	; (8009628 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d108      	bne.n	80095d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80095c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	68fa      	ldr	r2, [r7, #12]
 80095e0:	4313      	orrs	r3, r2
 80095e2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095ea:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	68ba      	ldr	r2, [r7, #8]
 80095f2:	4313      	orrs	r3, r2
 80095f4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	68fa      	ldr	r2, [r7, #12]
 80095fc:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68ba      	ldr	r2, [r7, #8]
 8009604:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2201      	movs	r2, #1
 800960a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2200      	movs	r2, #0
 8009612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009616:	2300      	movs	r3, #0
}
 8009618:	4618      	mov	r0, r3
 800961a:	3714      	adds	r7, #20
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr
 8009624:	40010000 	.word	0x40010000
 8009628:	40010400 	.word	0x40010400

0800962c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800962c:	b480      	push	{r7}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009636:	2300      	movs	r3, #0
 8009638:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009640:	2b01      	cmp	r3, #1
 8009642:	d101      	bne.n	8009648 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009644:	2302      	movs	r3, #2
 8009646:	e065      	b.n	8009714 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2201      	movs	r2, #1
 800964c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	4313      	orrs	r3, r2
 800965c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	4313      	orrs	r3, r2
 800966a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	4313      	orrs	r3, r2
 8009678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4313      	orrs	r3, r2
 8009686:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	4313      	orrs	r3, r2
 8009694:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	695b      	ldr	r3, [r3, #20]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ae:	4313      	orrs	r3, r2
 80096b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	699b      	ldr	r3, [r3, #24]
 80096bc:	041b      	lsls	r3, r3, #16
 80096be:	4313      	orrs	r3, r2
 80096c0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a16      	ldr	r2, [pc, #88]	; (8009720 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d004      	beq.n	80096d6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a14      	ldr	r2, [pc, #80]	; (8009724 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d115      	bne.n	8009702 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e0:	051b      	lsls	r3, r3, #20
 80096e2:	4313      	orrs	r3, r2
 80096e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	69db      	ldr	r3, [r3, #28]
 80096f0:	4313      	orrs	r3, r2
 80096f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	6a1b      	ldr	r3, [r3, #32]
 80096fe:	4313      	orrs	r3, r2
 8009700:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	68fa      	ldr	r2, [r7, #12]
 8009708:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2200      	movs	r2, #0
 800970e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009712:	2300      	movs	r3, #0
}
 8009714:	4618      	mov	r0, r3
 8009716:	3714      	adds	r7, #20
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr
 8009720:	40010000 	.word	0x40010000
 8009724:	40010400 	.word	0x40010400

08009728 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009730:	bf00      	nop
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009744:	bf00      	nop
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009758:	bf00      	nop
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009764:	b480      	push	{r7}
 8009766:	b087      	sub	sp, #28
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	f003 031f 	and.w	r3, r3, #31
 8009776:	2204      	movs	r2, #4
 8009778:	fa02 f303 	lsl.w	r3, r2, r3
 800977c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	6a1a      	ldr	r2, [r3, #32]
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	43db      	mvns	r3, r3
 8009786:	401a      	ands	r2, r3
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6a1a      	ldr	r2, [r3, #32]
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	f003 031f 	and.w	r3, r3, #31
 8009796:	6879      	ldr	r1, [r7, #4]
 8009798:	fa01 f303 	lsl.w	r3, r1, r3
 800979c:	431a      	orrs	r2, r3
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	621a      	str	r2, [r3, #32]
}
 80097a2:	bf00      	nop
 80097a4:	371c      	adds	r7, #28
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr

080097ae <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b082      	sub	sp, #8
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d101      	bne.n	80097c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	e042      	b.n	8009846 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d106      	bne.n	80097d8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f7f8 fdda 	bl	800238c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2224      	movs	r2, #36	; 0x24
 80097dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f022 0201 	bic.w	r2, r2, #1
 80097ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 f82d 	bl	8009850 <UART_SetConfig>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d101      	bne.n	8009800 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80097fc:	2301      	movs	r3, #1
 80097fe:	e022      	b.n	8009846 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009804:	2b00      	cmp	r3, #0
 8009806:	d002      	beq.n	800980e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f002 f99f 	bl	800bb4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	685a      	ldr	r2, [r3, #4]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800981c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	689a      	ldr	r2, [r3, #8]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800982c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f042 0201 	orr.w	r2, r2, #1
 800983c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f002 fa26 	bl	800bc90 <UART_CheckIdleState>
 8009844:	4603      	mov	r3, r0
}
 8009846:	4618      	mov	r0, r3
 8009848:	3708      	adds	r7, #8
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
	...

08009850 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009850:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009854:	b090      	sub	sp, #64	; 0x40
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800985a:	2300      	movs	r3, #0
 800985c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800985e:	2300      	movs	r3, #0
 8009860:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8009864:	2300      	movs	r3, #0
 8009866:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	689a      	ldr	r2, [r3, #8]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	691b      	ldr	r3, [r3, #16]
 8009870:	431a      	orrs	r2, r3
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	695b      	ldr	r3, [r3, #20]
 8009876:	431a      	orrs	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	69db      	ldr	r3, [r3, #28]
 800987c:	4313      	orrs	r3, r2
 800987e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009884:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009886:	4313      	orrs	r3, r2
 8009888:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	4bc1      	ldr	r3, [pc, #772]	; (8009b98 <UART_SetConfig+0x348>)
 8009892:	4013      	ands	r3, r2
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	6812      	ldr	r2, [r2, #0]
 8009898:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800989a:	430b      	orrs	r3, r1
 800989c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	68da      	ldr	r2, [r3, #12]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	430a      	orrs	r2, r1
 80098b2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	699b      	ldr	r3, [r3, #24]
 80098b8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4ab7      	ldr	r2, [pc, #732]	; (8009b9c <UART_SetConfig+0x34c>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d004      	beq.n	80098ce <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6a1b      	ldr	r3, [r3, #32]
 80098c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80098ca:	4313      	orrs	r3, r2
 80098cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	689a      	ldr	r2, [r3, #8]
 80098d4:	4bb2      	ldr	r3, [pc, #712]	; (8009ba0 <UART_SetConfig+0x350>)
 80098d6:	4013      	ands	r3, r2
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	6812      	ldr	r2, [r2, #0]
 80098dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80098de:	430b      	orrs	r3, r1
 80098e0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e8:	f023 010f 	bic.w	r1, r3, #15
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	430a      	orrs	r2, r1
 80098f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4aa9      	ldr	r2, [pc, #676]	; (8009ba4 <UART_SetConfig+0x354>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d177      	bne.n	80099f2 <UART_SetConfig+0x1a2>
 8009902:	4ba9      	ldr	r3, [pc, #676]	; (8009ba8 <UART_SetConfig+0x358>)
 8009904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009906:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800990a:	2b28      	cmp	r3, #40	; 0x28
 800990c:	d86c      	bhi.n	80099e8 <UART_SetConfig+0x198>
 800990e:	a201      	add	r2, pc, #4	; (adr r2, 8009914 <UART_SetConfig+0xc4>)
 8009910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009914:	080099b9 	.word	0x080099b9
 8009918:	080099e9 	.word	0x080099e9
 800991c:	080099e9 	.word	0x080099e9
 8009920:	080099e9 	.word	0x080099e9
 8009924:	080099e9 	.word	0x080099e9
 8009928:	080099e9 	.word	0x080099e9
 800992c:	080099e9 	.word	0x080099e9
 8009930:	080099e9 	.word	0x080099e9
 8009934:	080099c1 	.word	0x080099c1
 8009938:	080099e9 	.word	0x080099e9
 800993c:	080099e9 	.word	0x080099e9
 8009940:	080099e9 	.word	0x080099e9
 8009944:	080099e9 	.word	0x080099e9
 8009948:	080099e9 	.word	0x080099e9
 800994c:	080099e9 	.word	0x080099e9
 8009950:	080099e9 	.word	0x080099e9
 8009954:	080099c9 	.word	0x080099c9
 8009958:	080099e9 	.word	0x080099e9
 800995c:	080099e9 	.word	0x080099e9
 8009960:	080099e9 	.word	0x080099e9
 8009964:	080099e9 	.word	0x080099e9
 8009968:	080099e9 	.word	0x080099e9
 800996c:	080099e9 	.word	0x080099e9
 8009970:	080099e9 	.word	0x080099e9
 8009974:	080099d1 	.word	0x080099d1
 8009978:	080099e9 	.word	0x080099e9
 800997c:	080099e9 	.word	0x080099e9
 8009980:	080099e9 	.word	0x080099e9
 8009984:	080099e9 	.word	0x080099e9
 8009988:	080099e9 	.word	0x080099e9
 800998c:	080099e9 	.word	0x080099e9
 8009990:	080099e9 	.word	0x080099e9
 8009994:	080099d9 	.word	0x080099d9
 8009998:	080099e9 	.word	0x080099e9
 800999c:	080099e9 	.word	0x080099e9
 80099a0:	080099e9 	.word	0x080099e9
 80099a4:	080099e9 	.word	0x080099e9
 80099a8:	080099e9 	.word	0x080099e9
 80099ac:	080099e9 	.word	0x080099e9
 80099b0:	080099e9 	.word	0x080099e9
 80099b4:	080099e1 	.word	0x080099e1
 80099b8:	2301      	movs	r3, #1
 80099ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099be:	e233      	b.n	8009e28 <UART_SetConfig+0x5d8>
 80099c0:	2304      	movs	r3, #4
 80099c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099c6:	e22f      	b.n	8009e28 <UART_SetConfig+0x5d8>
 80099c8:	2308      	movs	r3, #8
 80099ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099ce:	e22b      	b.n	8009e28 <UART_SetConfig+0x5d8>
 80099d0:	2310      	movs	r3, #16
 80099d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099d6:	e227      	b.n	8009e28 <UART_SetConfig+0x5d8>
 80099d8:	2320      	movs	r3, #32
 80099da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099de:	e223      	b.n	8009e28 <UART_SetConfig+0x5d8>
 80099e0:	2340      	movs	r3, #64	; 0x40
 80099e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099e6:	e21f      	b.n	8009e28 <UART_SetConfig+0x5d8>
 80099e8:	2380      	movs	r3, #128	; 0x80
 80099ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80099ee:	bf00      	nop
 80099f0:	e21a      	b.n	8009e28 <UART_SetConfig+0x5d8>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a6d      	ldr	r2, [pc, #436]	; (8009bac <UART_SetConfig+0x35c>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d132      	bne.n	8009a62 <UART_SetConfig+0x212>
 80099fc:	4b6a      	ldr	r3, [pc, #424]	; (8009ba8 <UART_SetConfig+0x358>)
 80099fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a00:	f003 0307 	and.w	r3, r3, #7
 8009a04:	2b05      	cmp	r3, #5
 8009a06:	d827      	bhi.n	8009a58 <UART_SetConfig+0x208>
 8009a08:	a201      	add	r2, pc, #4	; (adr r2, 8009a10 <UART_SetConfig+0x1c0>)
 8009a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a0e:	bf00      	nop
 8009a10:	08009a29 	.word	0x08009a29
 8009a14:	08009a31 	.word	0x08009a31
 8009a18:	08009a39 	.word	0x08009a39
 8009a1c:	08009a41 	.word	0x08009a41
 8009a20:	08009a49 	.word	0x08009a49
 8009a24:	08009a51 	.word	0x08009a51
 8009a28:	2300      	movs	r3, #0
 8009a2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a2e:	e1fb      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009a30:	2304      	movs	r3, #4
 8009a32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a36:	e1f7      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009a38:	2308      	movs	r3, #8
 8009a3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a3e:	e1f3      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009a40:	2310      	movs	r3, #16
 8009a42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a46:	e1ef      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009a48:	2320      	movs	r3, #32
 8009a4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a4e:	e1eb      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009a50:	2340      	movs	r3, #64	; 0x40
 8009a52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a56:	e1e7      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009a58:	2380      	movs	r3, #128	; 0x80
 8009a5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a5e:	bf00      	nop
 8009a60:	e1e2      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a52      	ldr	r2, [pc, #328]	; (8009bb0 <UART_SetConfig+0x360>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d132      	bne.n	8009ad2 <UART_SetConfig+0x282>
 8009a6c:	4b4e      	ldr	r3, [pc, #312]	; (8009ba8 <UART_SetConfig+0x358>)
 8009a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a70:	f003 0307 	and.w	r3, r3, #7
 8009a74:	2b05      	cmp	r3, #5
 8009a76:	d827      	bhi.n	8009ac8 <UART_SetConfig+0x278>
 8009a78:	a201      	add	r2, pc, #4	; (adr r2, 8009a80 <UART_SetConfig+0x230>)
 8009a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a7e:	bf00      	nop
 8009a80:	08009a99 	.word	0x08009a99
 8009a84:	08009aa1 	.word	0x08009aa1
 8009a88:	08009aa9 	.word	0x08009aa9
 8009a8c:	08009ab1 	.word	0x08009ab1
 8009a90:	08009ab9 	.word	0x08009ab9
 8009a94:	08009ac1 	.word	0x08009ac1
 8009a98:	2300      	movs	r3, #0
 8009a9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009a9e:	e1c3      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009aa0:	2304      	movs	r3, #4
 8009aa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009aa6:	e1bf      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009aa8:	2308      	movs	r3, #8
 8009aaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009aae:	e1bb      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009ab0:	2310      	movs	r3, #16
 8009ab2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ab6:	e1b7      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009ab8:	2320      	movs	r3, #32
 8009aba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009abe:	e1b3      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009ac0:	2340      	movs	r3, #64	; 0x40
 8009ac2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ac6:	e1af      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009ac8:	2380      	movs	r3, #128	; 0x80
 8009aca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ace:	bf00      	nop
 8009ad0:	e1aa      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a37      	ldr	r2, [pc, #220]	; (8009bb4 <UART_SetConfig+0x364>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d132      	bne.n	8009b42 <UART_SetConfig+0x2f2>
 8009adc:	4b32      	ldr	r3, [pc, #200]	; (8009ba8 <UART_SetConfig+0x358>)
 8009ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ae0:	f003 0307 	and.w	r3, r3, #7
 8009ae4:	2b05      	cmp	r3, #5
 8009ae6:	d827      	bhi.n	8009b38 <UART_SetConfig+0x2e8>
 8009ae8:	a201      	add	r2, pc, #4	; (adr r2, 8009af0 <UART_SetConfig+0x2a0>)
 8009aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aee:	bf00      	nop
 8009af0:	08009b09 	.word	0x08009b09
 8009af4:	08009b11 	.word	0x08009b11
 8009af8:	08009b19 	.word	0x08009b19
 8009afc:	08009b21 	.word	0x08009b21
 8009b00:	08009b29 	.word	0x08009b29
 8009b04:	08009b31 	.word	0x08009b31
 8009b08:	2300      	movs	r3, #0
 8009b0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b0e:	e18b      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009b10:	2304      	movs	r3, #4
 8009b12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b16:	e187      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009b18:	2308      	movs	r3, #8
 8009b1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b1e:	e183      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009b20:	2310      	movs	r3, #16
 8009b22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b26:	e17f      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009b28:	2320      	movs	r3, #32
 8009b2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b2e:	e17b      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009b30:	2340      	movs	r3, #64	; 0x40
 8009b32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b36:	e177      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009b38:	2380      	movs	r3, #128	; 0x80
 8009b3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b3e:	bf00      	nop
 8009b40:	e172      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a1c      	ldr	r2, [pc, #112]	; (8009bb8 <UART_SetConfig+0x368>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d144      	bne.n	8009bd6 <UART_SetConfig+0x386>
 8009b4c:	4b16      	ldr	r3, [pc, #88]	; (8009ba8 <UART_SetConfig+0x358>)
 8009b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b50:	f003 0307 	and.w	r3, r3, #7
 8009b54:	2b05      	cmp	r3, #5
 8009b56:	d839      	bhi.n	8009bcc <UART_SetConfig+0x37c>
 8009b58:	a201      	add	r2, pc, #4	; (adr r2, 8009b60 <UART_SetConfig+0x310>)
 8009b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b5e:	bf00      	nop
 8009b60:	08009b79 	.word	0x08009b79
 8009b64:	08009b81 	.word	0x08009b81
 8009b68:	08009b89 	.word	0x08009b89
 8009b6c:	08009b91 	.word	0x08009b91
 8009b70:	08009bbd 	.word	0x08009bbd
 8009b74:	08009bc5 	.word	0x08009bc5
 8009b78:	2300      	movs	r3, #0
 8009b7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b7e:	e153      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009b80:	2304      	movs	r3, #4
 8009b82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b86:	e14f      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009b88:	2308      	movs	r3, #8
 8009b8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b8e:	e14b      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009b90:	2310      	movs	r3, #16
 8009b92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009b96:	e147      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009b98:	cfff69f3 	.word	0xcfff69f3
 8009b9c:	58000c00 	.word	0x58000c00
 8009ba0:	11fff4ff 	.word	0x11fff4ff
 8009ba4:	40011000 	.word	0x40011000
 8009ba8:	58024400 	.word	0x58024400
 8009bac:	40004400 	.word	0x40004400
 8009bb0:	40004800 	.word	0x40004800
 8009bb4:	40004c00 	.word	0x40004c00
 8009bb8:	40005000 	.word	0x40005000
 8009bbc:	2320      	movs	r3, #32
 8009bbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bc2:	e131      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009bc4:	2340      	movs	r3, #64	; 0x40
 8009bc6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bca:	e12d      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009bcc:	2380      	movs	r3, #128	; 0x80
 8009bce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009bd2:	bf00      	nop
 8009bd4:	e128      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4ac3      	ldr	r2, [pc, #780]	; (8009ee8 <UART_SetConfig+0x698>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d178      	bne.n	8009cd2 <UART_SetConfig+0x482>
 8009be0:	4bc2      	ldr	r3, [pc, #776]	; (8009eec <UART_SetConfig+0x69c>)
 8009be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009be4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009be8:	2b28      	cmp	r3, #40	; 0x28
 8009bea:	d86d      	bhi.n	8009cc8 <UART_SetConfig+0x478>
 8009bec:	a201      	add	r2, pc, #4	; (adr r2, 8009bf4 <UART_SetConfig+0x3a4>)
 8009bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf2:	bf00      	nop
 8009bf4:	08009c99 	.word	0x08009c99
 8009bf8:	08009cc9 	.word	0x08009cc9
 8009bfc:	08009cc9 	.word	0x08009cc9
 8009c00:	08009cc9 	.word	0x08009cc9
 8009c04:	08009cc9 	.word	0x08009cc9
 8009c08:	08009cc9 	.word	0x08009cc9
 8009c0c:	08009cc9 	.word	0x08009cc9
 8009c10:	08009cc9 	.word	0x08009cc9
 8009c14:	08009ca1 	.word	0x08009ca1
 8009c18:	08009cc9 	.word	0x08009cc9
 8009c1c:	08009cc9 	.word	0x08009cc9
 8009c20:	08009cc9 	.word	0x08009cc9
 8009c24:	08009cc9 	.word	0x08009cc9
 8009c28:	08009cc9 	.word	0x08009cc9
 8009c2c:	08009cc9 	.word	0x08009cc9
 8009c30:	08009cc9 	.word	0x08009cc9
 8009c34:	08009ca9 	.word	0x08009ca9
 8009c38:	08009cc9 	.word	0x08009cc9
 8009c3c:	08009cc9 	.word	0x08009cc9
 8009c40:	08009cc9 	.word	0x08009cc9
 8009c44:	08009cc9 	.word	0x08009cc9
 8009c48:	08009cc9 	.word	0x08009cc9
 8009c4c:	08009cc9 	.word	0x08009cc9
 8009c50:	08009cc9 	.word	0x08009cc9
 8009c54:	08009cb1 	.word	0x08009cb1
 8009c58:	08009cc9 	.word	0x08009cc9
 8009c5c:	08009cc9 	.word	0x08009cc9
 8009c60:	08009cc9 	.word	0x08009cc9
 8009c64:	08009cc9 	.word	0x08009cc9
 8009c68:	08009cc9 	.word	0x08009cc9
 8009c6c:	08009cc9 	.word	0x08009cc9
 8009c70:	08009cc9 	.word	0x08009cc9
 8009c74:	08009cb9 	.word	0x08009cb9
 8009c78:	08009cc9 	.word	0x08009cc9
 8009c7c:	08009cc9 	.word	0x08009cc9
 8009c80:	08009cc9 	.word	0x08009cc9
 8009c84:	08009cc9 	.word	0x08009cc9
 8009c88:	08009cc9 	.word	0x08009cc9
 8009c8c:	08009cc9 	.word	0x08009cc9
 8009c90:	08009cc9 	.word	0x08009cc9
 8009c94:	08009cc1 	.word	0x08009cc1
 8009c98:	2301      	movs	r3, #1
 8009c9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009c9e:	e0c3      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009ca0:	2304      	movs	r3, #4
 8009ca2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009ca6:	e0bf      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009ca8:	2308      	movs	r3, #8
 8009caa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cae:	e0bb      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009cb0:	2310      	movs	r3, #16
 8009cb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cb6:	e0b7      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009cb8:	2320      	movs	r3, #32
 8009cba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cbe:	e0b3      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009cc0:	2340      	movs	r3, #64	; 0x40
 8009cc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cc6:	e0af      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009cc8:	2380      	movs	r3, #128	; 0x80
 8009cca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009cce:	bf00      	nop
 8009cd0:	e0aa      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a86      	ldr	r2, [pc, #536]	; (8009ef0 <UART_SetConfig+0x6a0>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d132      	bne.n	8009d42 <UART_SetConfig+0x4f2>
 8009cdc:	4b83      	ldr	r3, [pc, #524]	; (8009eec <UART_SetConfig+0x69c>)
 8009cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ce0:	f003 0307 	and.w	r3, r3, #7
 8009ce4:	2b05      	cmp	r3, #5
 8009ce6:	d827      	bhi.n	8009d38 <UART_SetConfig+0x4e8>
 8009ce8:	a201      	add	r2, pc, #4	; (adr r2, 8009cf0 <UART_SetConfig+0x4a0>)
 8009cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cee:	bf00      	nop
 8009cf0:	08009d09 	.word	0x08009d09
 8009cf4:	08009d11 	.word	0x08009d11
 8009cf8:	08009d19 	.word	0x08009d19
 8009cfc:	08009d21 	.word	0x08009d21
 8009d00:	08009d29 	.word	0x08009d29
 8009d04:	08009d31 	.word	0x08009d31
 8009d08:	2300      	movs	r3, #0
 8009d0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d0e:	e08b      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009d10:	2304      	movs	r3, #4
 8009d12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d16:	e087      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009d18:	2308      	movs	r3, #8
 8009d1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d1e:	e083      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009d20:	2310      	movs	r3, #16
 8009d22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d26:	e07f      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009d28:	2320      	movs	r3, #32
 8009d2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d2e:	e07b      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009d30:	2340      	movs	r3, #64	; 0x40
 8009d32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d36:	e077      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009d38:	2380      	movs	r3, #128	; 0x80
 8009d3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d3e:	bf00      	nop
 8009d40:	e072      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a6b      	ldr	r2, [pc, #428]	; (8009ef4 <UART_SetConfig+0x6a4>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d132      	bne.n	8009db2 <UART_SetConfig+0x562>
 8009d4c:	4b67      	ldr	r3, [pc, #412]	; (8009eec <UART_SetConfig+0x69c>)
 8009d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d50:	f003 0307 	and.w	r3, r3, #7
 8009d54:	2b05      	cmp	r3, #5
 8009d56:	d827      	bhi.n	8009da8 <UART_SetConfig+0x558>
 8009d58:	a201      	add	r2, pc, #4	; (adr r2, 8009d60 <UART_SetConfig+0x510>)
 8009d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d5e:	bf00      	nop
 8009d60:	08009d79 	.word	0x08009d79
 8009d64:	08009d81 	.word	0x08009d81
 8009d68:	08009d89 	.word	0x08009d89
 8009d6c:	08009d91 	.word	0x08009d91
 8009d70:	08009d99 	.word	0x08009d99
 8009d74:	08009da1 	.word	0x08009da1
 8009d78:	2300      	movs	r3, #0
 8009d7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d7e:	e053      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009d80:	2304      	movs	r3, #4
 8009d82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d86:	e04f      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009d88:	2308      	movs	r3, #8
 8009d8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d8e:	e04b      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009d90:	2310      	movs	r3, #16
 8009d92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d96:	e047      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009d98:	2320      	movs	r3, #32
 8009d9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009d9e:	e043      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009da0:	2340      	movs	r3, #64	; 0x40
 8009da2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009da6:	e03f      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009da8:	2380      	movs	r3, #128	; 0x80
 8009daa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dae:	bf00      	nop
 8009db0:	e03a      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a50      	ldr	r2, [pc, #320]	; (8009ef8 <UART_SetConfig+0x6a8>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d132      	bne.n	8009e22 <UART_SetConfig+0x5d2>
 8009dbc:	4b4b      	ldr	r3, [pc, #300]	; (8009eec <UART_SetConfig+0x69c>)
 8009dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dc0:	f003 0307 	and.w	r3, r3, #7
 8009dc4:	2b05      	cmp	r3, #5
 8009dc6:	d827      	bhi.n	8009e18 <UART_SetConfig+0x5c8>
 8009dc8:	a201      	add	r2, pc, #4	; (adr r2, 8009dd0 <UART_SetConfig+0x580>)
 8009dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dce:	bf00      	nop
 8009dd0:	08009de9 	.word	0x08009de9
 8009dd4:	08009df1 	.word	0x08009df1
 8009dd8:	08009df9 	.word	0x08009df9
 8009ddc:	08009e01 	.word	0x08009e01
 8009de0:	08009e09 	.word	0x08009e09
 8009de4:	08009e11 	.word	0x08009e11
 8009de8:	2302      	movs	r3, #2
 8009dea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dee:	e01b      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009df0:	2304      	movs	r3, #4
 8009df2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009df6:	e017      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009df8:	2308      	movs	r3, #8
 8009dfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009dfe:	e013      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009e00:	2310      	movs	r3, #16
 8009e02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e06:	e00f      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009e08:	2320      	movs	r3, #32
 8009e0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e0e:	e00b      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009e10:	2340      	movs	r3, #64	; 0x40
 8009e12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e16:	e007      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009e18:	2380      	movs	r3, #128	; 0x80
 8009e1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8009e1e:	bf00      	nop
 8009e20:	e002      	b.n	8009e28 <UART_SetConfig+0x5d8>
 8009e22:	2380      	movs	r3, #128	; 0x80
 8009e24:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a32      	ldr	r2, [pc, #200]	; (8009ef8 <UART_SetConfig+0x6a8>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	f040 86f7 	bne.w	800ac22 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009e34:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009e38:	2b08      	cmp	r3, #8
 8009e3a:	f000 80c0 	beq.w	8009fbe <UART_SetConfig+0x76e>
 8009e3e:	2b08      	cmp	r3, #8
 8009e40:	dc04      	bgt.n	8009e4c <UART_SetConfig+0x5fc>
 8009e42:	2b02      	cmp	r3, #2
 8009e44:	d00c      	beq.n	8009e60 <UART_SetConfig+0x610>
 8009e46:	2b04      	cmp	r3, #4
 8009e48:	d065      	beq.n	8009f16 <UART_SetConfig+0x6c6>
 8009e4a:	e27a      	b.n	800a342 <UART_SetConfig+0xaf2>
 8009e4c:	2b20      	cmp	r3, #32
 8009e4e:	f000 81b0 	beq.w	800a1b2 <UART_SetConfig+0x962>
 8009e52:	2b40      	cmp	r3, #64	; 0x40
 8009e54:	f000 821e 	beq.w	800a294 <UART_SetConfig+0xa44>
 8009e58:	2b10      	cmp	r3, #16
 8009e5a:	f000 8104 	beq.w	800a066 <UART_SetConfig+0x816>
 8009e5e:	e270      	b.n	800a342 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009e60:	f7fc ffec 	bl	8006e3c <HAL_RCCEx_GetD3PCLK1Freq>
 8009e64:	4602      	mov	r2, r0
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d04e      	beq.n	8009f0c <UART_SetConfig+0x6bc>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	d048      	beq.n	8009f08 <UART_SetConfig+0x6b8>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7a:	2b02      	cmp	r3, #2
 8009e7c:	d042      	beq.n	8009f04 <UART_SetConfig+0x6b4>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e82:	2b03      	cmp	r3, #3
 8009e84:	d03c      	beq.n	8009f00 <UART_SetConfig+0x6b0>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8a:	2b04      	cmp	r3, #4
 8009e8c:	d036      	beq.n	8009efc <UART_SetConfig+0x6ac>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e92:	2b05      	cmp	r3, #5
 8009e94:	d026      	beq.n	8009ee4 <UART_SetConfig+0x694>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9a:	2b06      	cmp	r3, #6
 8009e9c:	d020      	beq.n	8009ee0 <UART_SetConfig+0x690>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea2:	2b07      	cmp	r3, #7
 8009ea4:	d01a      	beq.n	8009edc <UART_SetConfig+0x68c>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eaa:	2b08      	cmp	r3, #8
 8009eac:	d014      	beq.n	8009ed8 <UART_SetConfig+0x688>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb2:	2b09      	cmp	r3, #9
 8009eb4:	d00e      	beq.n	8009ed4 <UART_SetConfig+0x684>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eba:	2b0a      	cmp	r3, #10
 8009ebc:	d008      	beq.n	8009ed0 <UART_SetConfig+0x680>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec2:	2b0b      	cmp	r3, #11
 8009ec4:	d102      	bne.n	8009ecc <UART_SetConfig+0x67c>
 8009ec6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009eca:	e020      	b.n	8009f0e <UART_SetConfig+0x6be>
 8009ecc:	2301      	movs	r3, #1
 8009ece:	e01e      	b.n	8009f0e <UART_SetConfig+0x6be>
 8009ed0:	2380      	movs	r3, #128	; 0x80
 8009ed2:	e01c      	b.n	8009f0e <UART_SetConfig+0x6be>
 8009ed4:	2340      	movs	r3, #64	; 0x40
 8009ed6:	e01a      	b.n	8009f0e <UART_SetConfig+0x6be>
 8009ed8:	2320      	movs	r3, #32
 8009eda:	e018      	b.n	8009f0e <UART_SetConfig+0x6be>
 8009edc:	2310      	movs	r3, #16
 8009ede:	e016      	b.n	8009f0e <UART_SetConfig+0x6be>
 8009ee0:	230c      	movs	r3, #12
 8009ee2:	e014      	b.n	8009f0e <UART_SetConfig+0x6be>
 8009ee4:	230a      	movs	r3, #10
 8009ee6:	e012      	b.n	8009f0e <UART_SetConfig+0x6be>
 8009ee8:	40011400 	.word	0x40011400
 8009eec:	58024400 	.word	0x58024400
 8009ef0:	40007800 	.word	0x40007800
 8009ef4:	40007c00 	.word	0x40007c00
 8009ef8:	58000c00 	.word	0x58000c00
 8009efc:	2308      	movs	r3, #8
 8009efe:	e006      	b.n	8009f0e <UART_SetConfig+0x6be>
 8009f00:	2306      	movs	r3, #6
 8009f02:	e004      	b.n	8009f0e <UART_SetConfig+0x6be>
 8009f04:	2304      	movs	r3, #4
 8009f06:	e002      	b.n	8009f0e <UART_SetConfig+0x6be>
 8009f08:	2302      	movs	r3, #2
 8009f0a:	e000      	b.n	8009f0e <UART_SetConfig+0x6be>
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f14:	e219      	b.n	800a34a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f16:	f107 0318 	add.w	r3, r7, #24
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f7fc ffa4 	bl	8006e68 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009f20:	69fa      	ldr	r2, [r7, #28]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d044      	beq.n	8009fb4 <UART_SetConfig+0x764>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f2e:	2b01      	cmp	r3, #1
 8009f30:	d03e      	beq.n	8009fb0 <UART_SetConfig+0x760>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f36:	2b02      	cmp	r3, #2
 8009f38:	d038      	beq.n	8009fac <UART_SetConfig+0x75c>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3e:	2b03      	cmp	r3, #3
 8009f40:	d032      	beq.n	8009fa8 <UART_SetConfig+0x758>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f46:	2b04      	cmp	r3, #4
 8009f48:	d02c      	beq.n	8009fa4 <UART_SetConfig+0x754>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4e:	2b05      	cmp	r3, #5
 8009f50:	d026      	beq.n	8009fa0 <UART_SetConfig+0x750>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f56:	2b06      	cmp	r3, #6
 8009f58:	d020      	beq.n	8009f9c <UART_SetConfig+0x74c>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5e:	2b07      	cmp	r3, #7
 8009f60:	d01a      	beq.n	8009f98 <UART_SetConfig+0x748>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f66:	2b08      	cmp	r3, #8
 8009f68:	d014      	beq.n	8009f94 <UART_SetConfig+0x744>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6e:	2b09      	cmp	r3, #9
 8009f70:	d00e      	beq.n	8009f90 <UART_SetConfig+0x740>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f76:	2b0a      	cmp	r3, #10
 8009f78:	d008      	beq.n	8009f8c <UART_SetConfig+0x73c>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f7e:	2b0b      	cmp	r3, #11
 8009f80:	d102      	bne.n	8009f88 <UART_SetConfig+0x738>
 8009f82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f86:	e016      	b.n	8009fb6 <UART_SetConfig+0x766>
 8009f88:	2301      	movs	r3, #1
 8009f8a:	e014      	b.n	8009fb6 <UART_SetConfig+0x766>
 8009f8c:	2380      	movs	r3, #128	; 0x80
 8009f8e:	e012      	b.n	8009fb6 <UART_SetConfig+0x766>
 8009f90:	2340      	movs	r3, #64	; 0x40
 8009f92:	e010      	b.n	8009fb6 <UART_SetConfig+0x766>
 8009f94:	2320      	movs	r3, #32
 8009f96:	e00e      	b.n	8009fb6 <UART_SetConfig+0x766>
 8009f98:	2310      	movs	r3, #16
 8009f9a:	e00c      	b.n	8009fb6 <UART_SetConfig+0x766>
 8009f9c:	230c      	movs	r3, #12
 8009f9e:	e00a      	b.n	8009fb6 <UART_SetConfig+0x766>
 8009fa0:	230a      	movs	r3, #10
 8009fa2:	e008      	b.n	8009fb6 <UART_SetConfig+0x766>
 8009fa4:	2308      	movs	r3, #8
 8009fa6:	e006      	b.n	8009fb6 <UART_SetConfig+0x766>
 8009fa8:	2306      	movs	r3, #6
 8009faa:	e004      	b.n	8009fb6 <UART_SetConfig+0x766>
 8009fac:	2304      	movs	r3, #4
 8009fae:	e002      	b.n	8009fb6 <UART_SetConfig+0x766>
 8009fb0:	2302      	movs	r3, #2
 8009fb2:	e000      	b.n	8009fb6 <UART_SetConfig+0x766>
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009fbc:	e1c5      	b.n	800a34a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fbe:	f107 030c 	add.w	r3, r7, #12
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f7fd f89c 	bl	8007100 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009fc8:	693a      	ldr	r2, [r7, #16]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d044      	beq.n	800a05c <UART_SetConfig+0x80c>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d03e      	beq.n	800a058 <UART_SetConfig+0x808>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fde:	2b02      	cmp	r3, #2
 8009fe0:	d038      	beq.n	800a054 <UART_SetConfig+0x804>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe6:	2b03      	cmp	r3, #3
 8009fe8:	d032      	beq.n	800a050 <UART_SetConfig+0x800>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fee:	2b04      	cmp	r3, #4
 8009ff0:	d02c      	beq.n	800a04c <UART_SetConfig+0x7fc>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff6:	2b05      	cmp	r3, #5
 8009ff8:	d026      	beq.n	800a048 <UART_SetConfig+0x7f8>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffe:	2b06      	cmp	r3, #6
 800a000:	d020      	beq.n	800a044 <UART_SetConfig+0x7f4>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a006:	2b07      	cmp	r3, #7
 800a008:	d01a      	beq.n	800a040 <UART_SetConfig+0x7f0>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00e:	2b08      	cmp	r3, #8
 800a010:	d014      	beq.n	800a03c <UART_SetConfig+0x7ec>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a016:	2b09      	cmp	r3, #9
 800a018:	d00e      	beq.n	800a038 <UART_SetConfig+0x7e8>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a01e:	2b0a      	cmp	r3, #10
 800a020:	d008      	beq.n	800a034 <UART_SetConfig+0x7e4>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a026:	2b0b      	cmp	r3, #11
 800a028:	d102      	bne.n	800a030 <UART_SetConfig+0x7e0>
 800a02a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a02e:	e016      	b.n	800a05e <UART_SetConfig+0x80e>
 800a030:	2301      	movs	r3, #1
 800a032:	e014      	b.n	800a05e <UART_SetConfig+0x80e>
 800a034:	2380      	movs	r3, #128	; 0x80
 800a036:	e012      	b.n	800a05e <UART_SetConfig+0x80e>
 800a038:	2340      	movs	r3, #64	; 0x40
 800a03a:	e010      	b.n	800a05e <UART_SetConfig+0x80e>
 800a03c:	2320      	movs	r3, #32
 800a03e:	e00e      	b.n	800a05e <UART_SetConfig+0x80e>
 800a040:	2310      	movs	r3, #16
 800a042:	e00c      	b.n	800a05e <UART_SetConfig+0x80e>
 800a044:	230c      	movs	r3, #12
 800a046:	e00a      	b.n	800a05e <UART_SetConfig+0x80e>
 800a048:	230a      	movs	r3, #10
 800a04a:	e008      	b.n	800a05e <UART_SetConfig+0x80e>
 800a04c:	2308      	movs	r3, #8
 800a04e:	e006      	b.n	800a05e <UART_SetConfig+0x80e>
 800a050:	2306      	movs	r3, #6
 800a052:	e004      	b.n	800a05e <UART_SetConfig+0x80e>
 800a054:	2304      	movs	r3, #4
 800a056:	e002      	b.n	800a05e <UART_SetConfig+0x80e>
 800a058:	2302      	movs	r3, #2
 800a05a:	e000      	b.n	800a05e <UART_SetConfig+0x80e>
 800a05c:	2301      	movs	r3, #1
 800a05e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a062:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a064:	e171      	b.n	800a34a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a066:	4b7a      	ldr	r3, [pc, #488]	; (800a250 <UART_SetConfig+0xa00>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f003 0320 	and.w	r3, r3, #32
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d054      	beq.n	800a11c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a072:	4b77      	ldr	r3, [pc, #476]	; (800a250 <UART_SetConfig+0xa00>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	08db      	lsrs	r3, r3, #3
 800a078:	f003 0303 	and.w	r3, r3, #3
 800a07c:	4a75      	ldr	r2, [pc, #468]	; (800a254 <UART_SetConfig+0xa04>)
 800a07e:	40da      	lsrs	r2, r3
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a084:	2b00      	cmp	r3, #0
 800a086:	d044      	beq.n	800a112 <UART_SetConfig+0x8c2>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d03e      	beq.n	800a10e <UART_SetConfig+0x8be>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a094:	2b02      	cmp	r3, #2
 800a096:	d038      	beq.n	800a10a <UART_SetConfig+0x8ba>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09c:	2b03      	cmp	r3, #3
 800a09e:	d032      	beq.n	800a106 <UART_SetConfig+0x8b6>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a4:	2b04      	cmp	r3, #4
 800a0a6:	d02c      	beq.n	800a102 <UART_SetConfig+0x8b2>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ac:	2b05      	cmp	r3, #5
 800a0ae:	d026      	beq.n	800a0fe <UART_SetConfig+0x8ae>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b4:	2b06      	cmp	r3, #6
 800a0b6:	d020      	beq.n	800a0fa <UART_SetConfig+0x8aa>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0bc:	2b07      	cmp	r3, #7
 800a0be:	d01a      	beq.n	800a0f6 <UART_SetConfig+0x8a6>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c4:	2b08      	cmp	r3, #8
 800a0c6:	d014      	beq.n	800a0f2 <UART_SetConfig+0x8a2>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0cc:	2b09      	cmp	r3, #9
 800a0ce:	d00e      	beq.n	800a0ee <UART_SetConfig+0x89e>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d4:	2b0a      	cmp	r3, #10
 800a0d6:	d008      	beq.n	800a0ea <UART_SetConfig+0x89a>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0dc:	2b0b      	cmp	r3, #11
 800a0de:	d102      	bne.n	800a0e6 <UART_SetConfig+0x896>
 800a0e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0e4:	e016      	b.n	800a114 <UART_SetConfig+0x8c4>
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e014      	b.n	800a114 <UART_SetConfig+0x8c4>
 800a0ea:	2380      	movs	r3, #128	; 0x80
 800a0ec:	e012      	b.n	800a114 <UART_SetConfig+0x8c4>
 800a0ee:	2340      	movs	r3, #64	; 0x40
 800a0f0:	e010      	b.n	800a114 <UART_SetConfig+0x8c4>
 800a0f2:	2320      	movs	r3, #32
 800a0f4:	e00e      	b.n	800a114 <UART_SetConfig+0x8c4>
 800a0f6:	2310      	movs	r3, #16
 800a0f8:	e00c      	b.n	800a114 <UART_SetConfig+0x8c4>
 800a0fa:	230c      	movs	r3, #12
 800a0fc:	e00a      	b.n	800a114 <UART_SetConfig+0x8c4>
 800a0fe:	230a      	movs	r3, #10
 800a100:	e008      	b.n	800a114 <UART_SetConfig+0x8c4>
 800a102:	2308      	movs	r3, #8
 800a104:	e006      	b.n	800a114 <UART_SetConfig+0x8c4>
 800a106:	2306      	movs	r3, #6
 800a108:	e004      	b.n	800a114 <UART_SetConfig+0x8c4>
 800a10a:	2304      	movs	r3, #4
 800a10c:	e002      	b.n	800a114 <UART_SetConfig+0x8c4>
 800a10e:	2302      	movs	r3, #2
 800a110:	e000      	b.n	800a114 <UART_SetConfig+0x8c4>
 800a112:	2301      	movs	r3, #1
 800a114:	fbb2 f3f3 	udiv	r3, r2, r3
 800a118:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800a11a:	e116      	b.n	800a34a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a120:	2b00      	cmp	r3, #0
 800a122:	d043      	beq.n	800a1ac <UART_SetConfig+0x95c>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d03d      	beq.n	800a1a8 <UART_SetConfig+0x958>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a130:	2b02      	cmp	r3, #2
 800a132:	d037      	beq.n	800a1a4 <UART_SetConfig+0x954>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a138:	2b03      	cmp	r3, #3
 800a13a:	d031      	beq.n	800a1a0 <UART_SetConfig+0x950>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a140:	2b04      	cmp	r3, #4
 800a142:	d02b      	beq.n	800a19c <UART_SetConfig+0x94c>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a148:	2b05      	cmp	r3, #5
 800a14a:	d025      	beq.n	800a198 <UART_SetConfig+0x948>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a150:	2b06      	cmp	r3, #6
 800a152:	d01f      	beq.n	800a194 <UART_SetConfig+0x944>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a158:	2b07      	cmp	r3, #7
 800a15a:	d019      	beq.n	800a190 <UART_SetConfig+0x940>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a160:	2b08      	cmp	r3, #8
 800a162:	d013      	beq.n	800a18c <UART_SetConfig+0x93c>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a168:	2b09      	cmp	r3, #9
 800a16a:	d00d      	beq.n	800a188 <UART_SetConfig+0x938>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a170:	2b0a      	cmp	r3, #10
 800a172:	d007      	beq.n	800a184 <UART_SetConfig+0x934>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a178:	2b0b      	cmp	r3, #11
 800a17a:	d101      	bne.n	800a180 <UART_SetConfig+0x930>
 800a17c:	4b36      	ldr	r3, [pc, #216]	; (800a258 <UART_SetConfig+0xa08>)
 800a17e:	e016      	b.n	800a1ae <UART_SetConfig+0x95e>
 800a180:	4b34      	ldr	r3, [pc, #208]	; (800a254 <UART_SetConfig+0xa04>)
 800a182:	e014      	b.n	800a1ae <UART_SetConfig+0x95e>
 800a184:	4b35      	ldr	r3, [pc, #212]	; (800a25c <UART_SetConfig+0xa0c>)
 800a186:	e012      	b.n	800a1ae <UART_SetConfig+0x95e>
 800a188:	4b35      	ldr	r3, [pc, #212]	; (800a260 <UART_SetConfig+0xa10>)
 800a18a:	e010      	b.n	800a1ae <UART_SetConfig+0x95e>
 800a18c:	4b35      	ldr	r3, [pc, #212]	; (800a264 <UART_SetConfig+0xa14>)
 800a18e:	e00e      	b.n	800a1ae <UART_SetConfig+0x95e>
 800a190:	4b35      	ldr	r3, [pc, #212]	; (800a268 <UART_SetConfig+0xa18>)
 800a192:	e00c      	b.n	800a1ae <UART_SetConfig+0x95e>
 800a194:	4b35      	ldr	r3, [pc, #212]	; (800a26c <UART_SetConfig+0xa1c>)
 800a196:	e00a      	b.n	800a1ae <UART_SetConfig+0x95e>
 800a198:	4b35      	ldr	r3, [pc, #212]	; (800a270 <UART_SetConfig+0xa20>)
 800a19a:	e008      	b.n	800a1ae <UART_SetConfig+0x95e>
 800a19c:	4b35      	ldr	r3, [pc, #212]	; (800a274 <UART_SetConfig+0xa24>)
 800a19e:	e006      	b.n	800a1ae <UART_SetConfig+0x95e>
 800a1a0:	4b35      	ldr	r3, [pc, #212]	; (800a278 <UART_SetConfig+0xa28>)
 800a1a2:	e004      	b.n	800a1ae <UART_SetConfig+0x95e>
 800a1a4:	4b35      	ldr	r3, [pc, #212]	; (800a27c <UART_SetConfig+0xa2c>)
 800a1a6:	e002      	b.n	800a1ae <UART_SetConfig+0x95e>
 800a1a8:	4b35      	ldr	r3, [pc, #212]	; (800a280 <UART_SetConfig+0xa30>)
 800a1aa:	e000      	b.n	800a1ae <UART_SetConfig+0x95e>
 800a1ac:	4b29      	ldr	r3, [pc, #164]	; (800a254 <UART_SetConfig+0xa04>)
 800a1ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a1b0:	e0cb      	b.n	800a34a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d046      	beq.n	800a248 <UART_SetConfig+0x9f8>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d040      	beq.n	800a244 <UART_SetConfig+0x9f4>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c6:	2b02      	cmp	r3, #2
 800a1c8:	d03a      	beq.n	800a240 <UART_SetConfig+0x9f0>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ce:	2b03      	cmp	r3, #3
 800a1d0:	d034      	beq.n	800a23c <UART_SetConfig+0x9ec>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d6:	2b04      	cmp	r3, #4
 800a1d8:	d02e      	beq.n	800a238 <UART_SetConfig+0x9e8>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1de:	2b05      	cmp	r3, #5
 800a1e0:	d028      	beq.n	800a234 <UART_SetConfig+0x9e4>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e6:	2b06      	cmp	r3, #6
 800a1e8:	d022      	beq.n	800a230 <UART_SetConfig+0x9e0>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ee:	2b07      	cmp	r3, #7
 800a1f0:	d01c      	beq.n	800a22c <UART_SetConfig+0x9dc>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f6:	2b08      	cmp	r3, #8
 800a1f8:	d016      	beq.n	800a228 <UART_SetConfig+0x9d8>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fe:	2b09      	cmp	r3, #9
 800a200:	d00f      	beq.n	800a222 <UART_SetConfig+0x9d2>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a206:	2b0a      	cmp	r3, #10
 800a208:	d008      	beq.n	800a21c <UART_SetConfig+0x9cc>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a20e:	2b0b      	cmp	r3, #11
 800a210:	d102      	bne.n	800a218 <UART_SetConfig+0x9c8>
 800a212:	f643 5309 	movw	r3, #15625	; 0x3d09
 800a216:	e018      	b.n	800a24a <UART_SetConfig+0x9fa>
 800a218:	4b13      	ldr	r3, [pc, #76]	; (800a268 <UART_SetConfig+0xa18>)
 800a21a:	e016      	b.n	800a24a <UART_SetConfig+0x9fa>
 800a21c:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a220:	e013      	b.n	800a24a <UART_SetConfig+0x9fa>
 800a222:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a226:	e010      	b.n	800a24a <UART_SetConfig+0x9fa>
 800a228:	4b16      	ldr	r3, [pc, #88]	; (800a284 <UART_SetConfig+0xa34>)
 800a22a:	e00e      	b.n	800a24a <UART_SetConfig+0x9fa>
 800a22c:	4b0a      	ldr	r3, [pc, #40]	; (800a258 <UART_SetConfig+0xa08>)
 800a22e:	e00c      	b.n	800a24a <UART_SetConfig+0x9fa>
 800a230:	4b15      	ldr	r3, [pc, #84]	; (800a288 <UART_SetConfig+0xa38>)
 800a232:	e00a      	b.n	800a24a <UART_SetConfig+0x9fa>
 800a234:	4b15      	ldr	r3, [pc, #84]	; (800a28c <UART_SetConfig+0xa3c>)
 800a236:	e008      	b.n	800a24a <UART_SetConfig+0x9fa>
 800a238:	4b08      	ldr	r3, [pc, #32]	; (800a25c <UART_SetConfig+0xa0c>)
 800a23a:	e006      	b.n	800a24a <UART_SetConfig+0x9fa>
 800a23c:	4b14      	ldr	r3, [pc, #80]	; (800a290 <UART_SetConfig+0xa40>)
 800a23e:	e004      	b.n	800a24a <UART_SetConfig+0x9fa>
 800a240:	4b07      	ldr	r3, [pc, #28]	; (800a260 <UART_SetConfig+0xa10>)
 800a242:	e002      	b.n	800a24a <UART_SetConfig+0x9fa>
 800a244:	4b07      	ldr	r3, [pc, #28]	; (800a264 <UART_SetConfig+0xa14>)
 800a246:	e000      	b.n	800a24a <UART_SetConfig+0x9fa>
 800a248:	4b07      	ldr	r3, [pc, #28]	; (800a268 <UART_SetConfig+0xa18>)
 800a24a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a24c:	e07d      	b.n	800a34a <UART_SetConfig+0xafa>
 800a24e:	bf00      	nop
 800a250:	58024400 	.word	0x58024400
 800a254:	03d09000 	.word	0x03d09000
 800a258:	0003d090 	.word	0x0003d090
 800a25c:	0007a120 	.word	0x0007a120
 800a260:	000f4240 	.word	0x000f4240
 800a264:	001e8480 	.word	0x001e8480
 800a268:	003d0900 	.word	0x003d0900
 800a26c:	00516155 	.word	0x00516155
 800a270:	0061a800 	.word	0x0061a800
 800a274:	007a1200 	.word	0x007a1200
 800a278:	00a2c2aa 	.word	0x00a2c2aa
 800a27c:	00f42400 	.word	0x00f42400
 800a280:	01e84800 	.word	0x01e84800
 800a284:	0001e848 	.word	0x0001e848
 800a288:	00051615 	.word	0x00051615
 800a28c:	00061a80 	.word	0x00061a80
 800a290:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d04e      	beq.n	800a33a <UART_SetConfig+0xaea>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d047      	beq.n	800a334 <UART_SetConfig+0xae4>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a8:	2b02      	cmp	r3, #2
 800a2aa:	d040      	beq.n	800a32e <UART_SetConfig+0xade>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b0:	2b03      	cmp	r3, #3
 800a2b2:	d039      	beq.n	800a328 <UART_SetConfig+0xad8>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b8:	2b04      	cmp	r3, #4
 800a2ba:	d032      	beq.n	800a322 <UART_SetConfig+0xad2>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c0:	2b05      	cmp	r3, #5
 800a2c2:	d02b      	beq.n	800a31c <UART_SetConfig+0xacc>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c8:	2b06      	cmp	r3, #6
 800a2ca:	d024      	beq.n	800a316 <UART_SetConfig+0xac6>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d0:	2b07      	cmp	r3, #7
 800a2d2:	d01d      	beq.n	800a310 <UART_SetConfig+0xac0>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d8:	2b08      	cmp	r3, #8
 800a2da:	d016      	beq.n	800a30a <UART_SetConfig+0xaba>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e0:	2b09      	cmp	r3, #9
 800a2e2:	d00f      	beq.n	800a304 <UART_SetConfig+0xab4>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e8:	2b0a      	cmp	r3, #10
 800a2ea:	d008      	beq.n	800a2fe <UART_SetConfig+0xaae>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f0:	2b0b      	cmp	r3, #11
 800a2f2:	d101      	bne.n	800a2f8 <UART_SetConfig+0xaa8>
 800a2f4:	2380      	movs	r3, #128	; 0x80
 800a2f6:	e022      	b.n	800a33e <UART_SetConfig+0xaee>
 800a2f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2fc:	e01f      	b.n	800a33e <UART_SetConfig+0xaee>
 800a2fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a302:	e01c      	b.n	800a33e <UART_SetConfig+0xaee>
 800a304:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a308:	e019      	b.n	800a33e <UART_SetConfig+0xaee>
 800a30a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a30e:	e016      	b.n	800a33e <UART_SetConfig+0xaee>
 800a310:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a314:	e013      	b.n	800a33e <UART_SetConfig+0xaee>
 800a316:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800a31a:	e010      	b.n	800a33e <UART_SetConfig+0xaee>
 800a31c:	f640 43cc 	movw	r3, #3276	; 0xccc
 800a320:	e00d      	b.n	800a33e <UART_SetConfig+0xaee>
 800a322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a326:	e00a      	b.n	800a33e <UART_SetConfig+0xaee>
 800a328:	f241 5355 	movw	r3, #5461	; 0x1555
 800a32c:	e007      	b.n	800a33e <UART_SetConfig+0xaee>
 800a32e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a332:	e004      	b.n	800a33e <UART_SetConfig+0xaee>
 800a334:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a338:	e001      	b.n	800a33e <UART_SetConfig+0xaee>
 800a33a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a33e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a340:	e003      	b.n	800a34a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800a348:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800a34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	f001 83e8 	beq.w	800bb22 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	685a      	ldr	r2, [r3, #4]
 800a356:	4613      	mov	r3, r2
 800a358:	005b      	lsls	r3, r3, #1
 800a35a:	4413      	add	r3, r2
 800a35c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a35e:	429a      	cmp	r2, r3
 800a360:	d305      	bcc.n	800a36e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d904      	bls.n	800a378 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800a36e:	2301      	movs	r3, #1
 800a370:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a374:	f001 bbd5 	b.w	800bb22 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 800a378:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a37c:	2b08      	cmp	r3, #8
 800a37e:	f000 8154 	beq.w	800a62a <UART_SetConfig+0xdda>
 800a382:	2b08      	cmp	r3, #8
 800a384:	dc06      	bgt.n	800a394 <UART_SetConfig+0xb44>
 800a386:	2b02      	cmp	r3, #2
 800a388:	d00f      	beq.n	800a3aa <UART_SetConfig+0xb5a>
 800a38a:	2b04      	cmp	r3, #4
 800a38c:	f000 80ac 	beq.w	800a4e8 <UART_SetConfig+0xc98>
 800a390:	f000 bc30 	b.w	800abf4 <UART_SetConfig+0x13a4>
 800a394:	2b20      	cmp	r3, #32
 800a396:	f000 832d 	beq.w	800a9f4 <UART_SetConfig+0x11a4>
 800a39a:	2b40      	cmp	r3, #64	; 0x40
 800a39c:	f000 83a5 	beq.w	800aaea <UART_SetConfig+0x129a>
 800a3a0:	2b10      	cmp	r3, #16
 800a3a2:	f000 81e3 	beq.w	800a76c <UART_SetConfig+0xf1c>
 800a3a6:	f000 bc25 	b.w	800abf4 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a3aa:	f7fc fd47 	bl	8006e3c <HAL_RCCEx_GetD3PCLK1Freq>
 800a3ae:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f04f 0100 	mov.w	r1, #0
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d067      	beq.n	800a490 <UART_SetConfig+0xc40>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d05e      	beq.n	800a486 <UART_SetConfig+0xc36>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3cc:	2b02      	cmp	r3, #2
 800a3ce:	d055      	beq.n	800a47c <UART_SetConfig+0xc2c>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d4:	2b03      	cmp	r3, #3
 800a3d6:	d04c      	beq.n	800a472 <UART_SetConfig+0xc22>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3dc:	2b04      	cmp	r3, #4
 800a3de:	d043      	beq.n	800a468 <UART_SetConfig+0xc18>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e4:	2b05      	cmp	r3, #5
 800a3e6:	d03a      	beq.n	800a45e <UART_SetConfig+0xc0e>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ec:	2b06      	cmp	r3, #6
 800a3ee:	d031      	beq.n	800a454 <UART_SetConfig+0xc04>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f4:	2b07      	cmp	r3, #7
 800a3f6:	d028      	beq.n	800a44a <UART_SetConfig+0xbfa>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fc:	2b08      	cmp	r3, #8
 800a3fe:	d01f      	beq.n	800a440 <UART_SetConfig+0xbf0>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a404:	2b09      	cmp	r3, #9
 800a406:	d016      	beq.n	800a436 <UART_SetConfig+0xbe6>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40c:	2b0a      	cmp	r3, #10
 800a40e:	d00d      	beq.n	800a42c <UART_SetConfig+0xbdc>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a414:	2b0b      	cmp	r3, #11
 800a416:	d104      	bne.n	800a422 <UART_SetConfig+0xbd2>
 800a418:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a41c:	f04f 0400 	mov.w	r4, #0
 800a420:	e03a      	b.n	800a498 <UART_SetConfig+0xc48>
 800a422:	f04f 0301 	mov.w	r3, #1
 800a426:	f04f 0400 	mov.w	r4, #0
 800a42a:	e035      	b.n	800a498 <UART_SetConfig+0xc48>
 800a42c:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a430:	f04f 0400 	mov.w	r4, #0
 800a434:	e030      	b.n	800a498 <UART_SetConfig+0xc48>
 800a436:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a43a:	f04f 0400 	mov.w	r4, #0
 800a43e:	e02b      	b.n	800a498 <UART_SetConfig+0xc48>
 800a440:	f04f 0320 	mov.w	r3, #32
 800a444:	f04f 0400 	mov.w	r4, #0
 800a448:	e026      	b.n	800a498 <UART_SetConfig+0xc48>
 800a44a:	f04f 0310 	mov.w	r3, #16
 800a44e:	f04f 0400 	mov.w	r4, #0
 800a452:	e021      	b.n	800a498 <UART_SetConfig+0xc48>
 800a454:	f04f 030c 	mov.w	r3, #12
 800a458:	f04f 0400 	mov.w	r4, #0
 800a45c:	e01c      	b.n	800a498 <UART_SetConfig+0xc48>
 800a45e:	f04f 030a 	mov.w	r3, #10
 800a462:	f04f 0400 	mov.w	r4, #0
 800a466:	e017      	b.n	800a498 <UART_SetConfig+0xc48>
 800a468:	f04f 0308 	mov.w	r3, #8
 800a46c:	f04f 0400 	mov.w	r4, #0
 800a470:	e012      	b.n	800a498 <UART_SetConfig+0xc48>
 800a472:	f04f 0306 	mov.w	r3, #6
 800a476:	f04f 0400 	mov.w	r4, #0
 800a47a:	e00d      	b.n	800a498 <UART_SetConfig+0xc48>
 800a47c:	f04f 0304 	mov.w	r3, #4
 800a480:	f04f 0400 	mov.w	r4, #0
 800a484:	e008      	b.n	800a498 <UART_SetConfig+0xc48>
 800a486:	f04f 0302 	mov.w	r3, #2
 800a48a:	f04f 0400 	mov.w	r4, #0
 800a48e:	e003      	b.n	800a498 <UART_SetConfig+0xc48>
 800a490:	f04f 0301 	mov.w	r3, #1
 800a494:	f04f 0400 	mov.w	r4, #0
 800a498:	461a      	mov	r2, r3
 800a49a:	4623      	mov	r3, r4
 800a49c:	f7f5 ff1c 	bl	80002d8 <__aeabi_uldivmod>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	460c      	mov	r4, r1
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	4622      	mov	r2, r4
 800a4a8:	f04f 0300 	mov.w	r3, #0
 800a4ac:	f04f 0400 	mov.w	r4, #0
 800a4b0:	0214      	lsls	r4, r2, #8
 800a4b2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a4b6:	020b      	lsls	r3, r1, #8
 800a4b8:	687a      	ldr	r2, [r7, #4]
 800a4ba:	6852      	ldr	r2, [r2, #4]
 800a4bc:	0852      	lsrs	r2, r2, #1
 800a4be:	4611      	mov	r1, r2
 800a4c0:	f04f 0200 	mov.w	r2, #0
 800a4c4:	eb13 0b01 	adds.w	fp, r3, r1
 800a4c8:	eb44 0c02 	adc.w	ip, r4, r2
 800a4cc:	4658      	mov	r0, fp
 800a4ce:	4661      	mov	r1, ip
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	f04f 0400 	mov.w	r4, #0
 800a4d8:	461a      	mov	r2, r3
 800a4da:	4623      	mov	r3, r4
 800a4dc:	f7f5 fefc 	bl	80002d8 <__aeabi_uldivmod>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	460c      	mov	r4, r1
 800a4e4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a4e6:	e389      	b.n	800abfc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4e8:	f107 0318 	add.w	r3, r7, #24
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7fc fcbb 	bl	8006e68 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4f2:	69fb      	ldr	r3, [r7, #28]
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f04f 0100 	mov.w	r1, #0
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d067      	beq.n	800a5d2 <UART_SetConfig+0xd82>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a506:	2b01      	cmp	r3, #1
 800a508:	d05e      	beq.n	800a5c8 <UART_SetConfig+0xd78>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50e:	2b02      	cmp	r3, #2
 800a510:	d055      	beq.n	800a5be <UART_SetConfig+0xd6e>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a516:	2b03      	cmp	r3, #3
 800a518:	d04c      	beq.n	800a5b4 <UART_SetConfig+0xd64>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a51e:	2b04      	cmp	r3, #4
 800a520:	d043      	beq.n	800a5aa <UART_SetConfig+0xd5a>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a526:	2b05      	cmp	r3, #5
 800a528:	d03a      	beq.n	800a5a0 <UART_SetConfig+0xd50>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52e:	2b06      	cmp	r3, #6
 800a530:	d031      	beq.n	800a596 <UART_SetConfig+0xd46>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a536:	2b07      	cmp	r3, #7
 800a538:	d028      	beq.n	800a58c <UART_SetConfig+0xd3c>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53e:	2b08      	cmp	r3, #8
 800a540:	d01f      	beq.n	800a582 <UART_SetConfig+0xd32>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a546:	2b09      	cmp	r3, #9
 800a548:	d016      	beq.n	800a578 <UART_SetConfig+0xd28>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54e:	2b0a      	cmp	r3, #10
 800a550:	d00d      	beq.n	800a56e <UART_SetConfig+0xd1e>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a556:	2b0b      	cmp	r3, #11
 800a558:	d104      	bne.n	800a564 <UART_SetConfig+0xd14>
 800a55a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a55e:	f04f 0400 	mov.w	r4, #0
 800a562:	e03a      	b.n	800a5da <UART_SetConfig+0xd8a>
 800a564:	f04f 0301 	mov.w	r3, #1
 800a568:	f04f 0400 	mov.w	r4, #0
 800a56c:	e035      	b.n	800a5da <UART_SetConfig+0xd8a>
 800a56e:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a572:	f04f 0400 	mov.w	r4, #0
 800a576:	e030      	b.n	800a5da <UART_SetConfig+0xd8a>
 800a578:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a57c:	f04f 0400 	mov.w	r4, #0
 800a580:	e02b      	b.n	800a5da <UART_SetConfig+0xd8a>
 800a582:	f04f 0320 	mov.w	r3, #32
 800a586:	f04f 0400 	mov.w	r4, #0
 800a58a:	e026      	b.n	800a5da <UART_SetConfig+0xd8a>
 800a58c:	f04f 0310 	mov.w	r3, #16
 800a590:	f04f 0400 	mov.w	r4, #0
 800a594:	e021      	b.n	800a5da <UART_SetConfig+0xd8a>
 800a596:	f04f 030c 	mov.w	r3, #12
 800a59a:	f04f 0400 	mov.w	r4, #0
 800a59e:	e01c      	b.n	800a5da <UART_SetConfig+0xd8a>
 800a5a0:	f04f 030a 	mov.w	r3, #10
 800a5a4:	f04f 0400 	mov.w	r4, #0
 800a5a8:	e017      	b.n	800a5da <UART_SetConfig+0xd8a>
 800a5aa:	f04f 0308 	mov.w	r3, #8
 800a5ae:	f04f 0400 	mov.w	r4, #0
 800a5b2:	e012      	b.n	800a5da <UART_SetConfig+0xd8a>
 800a5b4:	f04f 0306 	mov.w	r3, #6
 800a5b8:	f04f 0400 	mov.w	r4, #0
 800a5bc:	e00d      	b.n	800a5da <UART_SetConfig+0xd8a>
 800a5be:	f04f 0304 	mov.w	r3, #4
 800a5c2:	f04f 0400 	mov.w	r4, #0
 800a5c6:	e008      	b.n	800a5da <UART_SetConfig+0xd8a>
 800a5c8:	f04f 0302 	mov.w	r3, #2
 800a5cc:	f04f 0400 	mov.w	r4, #0
 800a5d0:	e003      	b.n	800a5da <UART_SetConfig+0xd8a>
 800a5d2:	f04f 0301 	mov.w	r3, #1
 800a5d6:	f04f 0400 	mov.w	r4, #0
 800a5da:	461a      	mov	r2, r3
 800a5dc:	4623      	mov	r3, r4
 800a5de:	f7f5 fe7b 	bl	80002d8 <__aeabi_uldivmod>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	460c      	mov	r4, r1
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	4622      	mov	r2, r4
 800a5ea:	f04f 0300 	mov.w	r3, #0
 800a5ee:	f04f 0400 	mov.w	r4, #0
 800a5f2:	0214      	lsls	r4, r2, #8
 800a5f4:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a5f8:	020b      	lsls	r3, r1, #8
 800a5fa:	687a      	ldr	r2, [r7, #4]
 800a5fc:	6852      	ldr	r2, [r2, #4]
 800a5fe:	0852      	lsrs	r2, r2, #1
 800a600:	4611      	mov	r1, r2
 800a602:	f04f 0200 	mov.w	r2, #0
 800a606:	eb13 0b01 	adds.w	fp, r3, r1
 800a60a:	eb44 0c02 	adc.w	ip, r4, r2
 800a60e:	4658      	mov	r0, fp
 800a610:	4661      	mov	r1, ip
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	f04f 0400 	mov.w	r4, #0
 800a61a:	461a      	mov	r2, r3
 800a61c:	4623      	mov	r3, r4
 800a61e:	f7f5 fe5b 	bl	80002d8 <__aeabi_uldivmod>
 800a622:	4603      	mov	r3, r0
 800a624:	460c      	mov	r4, r1
 800a626:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a628:	e2e8      	b.n	800abfc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a62a:	f107 030c 	add.w	r3, r7, #12
 800a62e:	4618      	mov	r0, r3
 800a630:	f7fc fd66 	bl	8007100 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	4618      	mov	r0, r3
 800a638:	f04f 0100 	mov.w	r1, #0
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a640:	2b00      	cmp	r3, #0
 800a642:	d067      	beq.n	800a714 <UART_SetConfig+0xec4>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a648:	2b01      	cmp	r3, #1
 800a64a:	d05e      	beq.n	800a70a <UART_SetConfig+0xeba>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a650:	2b02      	cmp	r3, #2
 800a652:	d055      	beq.n	800a700 <UART_SetConfig+0xeb0>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a658:	2b03      	cmp	r3, #3
 800a65a:	d04c      	beq.n	800a6f6 <UART_SetConfig+0xea6>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a660:	2b04      	cmp	r3, #4
 800a662:	d043      	beq.n	800a6ec <UART_SetConfig+0xe9c>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a668:	2b05      	cmp	r3, #5
 800a66a:	d03a      	beq.n	800a6e2 <UART_SetConfig+0xe92>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a670:	2b06      	cmp	r3, #6
 800a672:	d031      	beq.n	800a6d8 <UART_SetConfig+0xe88>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a678:	2b07      	cmp	r3, #7
 800a67a:	d028      	beq.n	800a6ce <UART_SetConfig+0xe7e>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a680:	2b08      	cmp	r3, #8
 800a682:	d01f      	beq.n	800a6c4 <UART_SetConfig+0xe74>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a688:	2b09      	cmp	r3, #9
 800a68a:	d016      	beq.n	800a6ba <UART_SetConfig+0xe6a>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a690:	2b0a      	cmp	r3, #10
 800a692:	d00d      	beq.n	800a6b0 <UART_SetConfig+0xe60>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a698:	2b0b      	cmp	r3, #11
 800a69a:	d104      	bne.n	800a6a6 <UART_SetConfig+0xe56>
 800a69c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6a0:	f04f 0400 	mov.w	r4, #0
 800a6a4:	e03a      	b.n	800a71c <UART_SetConfig+0xecc>
 800a6a6:	f04f 0301 	mov.w	r3, #1
 800a6aa:	f04f 0400 	mov.w	r4, #0
 800a6ae:	e035      	b.n	800a71c <UART_SetConfig+0xecc>
 800a6b0:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a6b4:	f04f 0400 	mov.w	r4, #0
 800a6b8:	e030      	b.n	800a71c <UART_SetConfig+0xecc>
 800a6ba:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a6be:	f04f 0400 	mov.w	r4, #0
 800a6c2:	e02b      	b.n	800a71c <UART_SetConfig+0xecc>
 800a6c4:	f04f 0320 	mov.w	r3, #32
 800a6c8:	f04f 0400 	mov.w	r4, #0
 800a6cc:	e026      	b.n	800a71c <UART_SetConfig+0xecc>
 800a6ce:	f04f 0310 	mov.w	r3, #16
 800a6d2:	f04f 0400 	mov.w	r4, #0
 800a6d6:	e021      	b.n	800a71c <UART_SetConfig+0xecc>
 800a6d8:	f04f 030c 	mov.w	r3, #12
 800a6dc:	f04f 0400 	mov.w	r4, #0
 800a6e0:	e01c      	b.n	800a71c <UART_SetConfig+0xecc>
 800a6e2:	f04f 030a 	mov.w	r3, #10
 800a6e6:	f04f 0400 	mov.w	r4, #0
 800a6ea:	e017      	b.n	800a71c <UART_SetConfig+0xecc>
 800a6ec:	f04f 0308 	mov.w	r3, #8
 800a6f0:	f04f 0400 	mov.w	r4, #0
 800a6f4:	e012      	b.n	800a71c <UART_SetConfig+0xecc>
 800a6f6:	f04f 0306 	mov.w	r3, #6
 800a6fa:	f04f 0400 	mov.w	r4, #0
 800a6fe:	e00d      	b.n	800a71c <UART_SetConfig+0xecc>
 800a700:	f04f 0304 	mov.w	r3, #4
 800a704:	f04f 0400 	mov.w	r4, #0
 800a708:	e008      	b.n	800a71c <UART_SetConfig+0xecc>
 800a70a:	f04f 0302 	mov.w	r3, #2
 800a70e:	f04f 0400 	mov.w	r4, #0
 800a712:	e003      	b.n	800a71c <UART_SetConfig+0xecc>
 800a714:	f04f 0301 	mov.w	r3, #1
 800a718:	f04f 0400 	mov.w	r4, #0
 800a71c:	461a      	mov	r2, r3
 800a71e:	4623      	mov	r3, r4
 800a720:	f7f5 fdda 	bl	80002d8 <__aeabi_uldivmod>
 800a724:	4603      	mov	r3, r0
 800a726:	460c      	mov	r4, r1
 800a728:	4619      	mov	r1, r3
 800a72a:	4622      	mov	r2, r4
 800a72c:	f04f 0300 	mov.w	r3, #0
 800a730:	f04f 0400 	mov.w	r4, #0
 800a734:	0214      	lsls	r4, r2, #8
 800a736:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a73a:	020b      	lsls	r3, r1, #8
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	6852      	ldr	r2, [r2, #4]
 800a740:	0852      	lsrs	r2, r2, #1
 800a742:	4611      	mov	r1, r2
 800a744:	f04f 0200 	mov.w	r2, #0
 800a748:	eb13 0b01 	adds.w	fp, r3, r1
 800a74c:	eb44 0c02 	adc.w	ip, r4, r2
 800a750:	4658      	mov	r0, fp
 800a752:	4661      	mov	r1, ip
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	f04f 0400 	mov.w	r4, #0
 800a75c:	461a      	mov	r2, r3
 800a75e:	4623      	mov	r3, r4
 800a760:	f7f5 fdba 	bl	80002d8 <__aeabi_uldivmod>
 800a764:	4603      	mov	r3, r0
 800a766:	460c      	mov	r4, r1
 800a768:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a76a:	e247      	b.n	800abfc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a76c:	4b96      	ldr	r3, [pc, #600]	; (800a9c8 <UART_SetConfig+0x1178>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f003 0320 	and.w	r3, r3, #32
 800a774:	2b00      	cmp	r3, #0
 800a776:	f000 80a3 	beq.w	800a8c0 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a77a:	4b93      	ldr	r3, [pc, #588]	; (800a9c8 <UART_SetConfig+0x1178>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	08db      	lsrs	r3, r3, #3
 800a780:	f003 0303 	and.w	r3, r3, #3
 800a784:	4a91      	ldr	r2, [pc, #580]	; (800a9cc <UART_SetConfig+0x117c>)
 800a786:	fa22 f303 	lsr.w	r3, r2, r3
 800a78a:	4618      	mov	r0, r3
 800a78c:	f04f 0100 	mov.w	r1, #0
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a794:	2b00      	cmp	r3, #0
 800a796:	d067      	beq.n	800a868 <UART_SetConfig+0x1018>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d05e      	beq.n	800a85e <UART_SetConfig+0x100e>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a4:	2b02      	cmp	r3, #2
 800a7a6:	d055      	beq.n	800a854 <UART_SetConfig+0x1004>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ac:	2b03      	cmp	r3, #3
 800a7ae:	d04c      	beq.n	800a84a <UART_SetConfig+0xffa>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b4:	2b04      	cmp	r3, #4
 800a7b6:	d043      	beq.n	800a840 <UART_SetConfig+0xff0>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7bc:	2b05      	cmp	r3, #5
 800a7be:	d03a      	beq.n	800a836 <UART_SetConfig+0xfe6>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c4:	2b06      	cmp	r3, #6
 800a7c6:	d031      	beq.n	800a82c <UART_SetConfig+0xfdc>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7cc:	2b07      	cmp	r3, #7
 800a7ce:	d028      	beq.n	800a822 <UART_SetConfig+0xfd2>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d4:	2b08      	cmp	r3, #8
 800a7d6:	d01f      	beq.n	800a818 <UART_SetConfig+0xfc8>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7dc:	2b09      	cmp	r3, #9
 800a7de:	d016      	beq.n	800a80e <UART_SetConfig+0xfbe>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e4:	2b0a      	cmp	r3, #10
 800a7e6:	d00d      	beq.n	800a804 <UART_SetConfig+0xfb4>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ec:	2b0b      	cmp	r3, #11
 800a7ee:	d104      	bne.n	800a7fa <UART_SetConfig+0xfaa>
 800a7f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7f4:	f04f 0400 	mov.w	r4, #0
 800a7f8:	e03a      	b.n	800a870 <UART_SetConfig+0x1020>
 800a7fa:	f04f 0301 	mov.w	r3, #1
 800a7fe:	f04f 0400 	mov.w	r4, #0
 800a802:	e035      	b.n	800a870 <UART_SetConfig+0x1020>
 800a804:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a808:	f04f 0400 	mov.w	r4, #0
 800a80c:	e030      	b.n	800a870 <UART_SetConfig+0x1020>
 800a80e:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a812:	f04f 0400 	mov.w	r4, #0
 800a816:	e02b      	b.n	800a870 <UART_SetConfig+0x1020>
 800a818:	f04f 0320 	mov.w	r3, #32
 800a81c:	f04f 0400 	mov.w	r4, #0
 800a820:	e026      	b.n	800a870 <UART_SetConfig+0x1020>
 800a822:	f04f 0310 	mov.w	r3, #16
 800a826:	f04f 0400 	mov.w	r4, #0
 800a82a:	e021      	b.n	800a870 <UART_SetConfig+0x1020>
 800a82c:	f04f 030c 	mov.w	r3, #12
 800a830:	f04f 0400 	mov.w	r4, #0
 800a834:	e01c      	b.n	800a870 <UART_SetConfig+0x1020>
 800a836:	f04f 030a 	mov.w	r3, #10
 800a83a:	f04f 0400 	mov.w	r4, #0
 800a83e:	e017      	b.n	800a870 <UART_SetConfig+0x1020>
 800a840:	f04f 0308 	mov.w	r3, #8
 800a844:	f04f 0400 	mov.w	r4, #0
 800a848:	e012      	b.n	800a870 <UART_SetConfig+0x1020>
 800a84a:	f04f 0306 	mov.w	r3, #6
 800a84e:	f04f 0400 	mov.w	r4, #0
 800a852:	e00d      	b.n	800a870 <UART_SetConfig+0x1020>
 800a854:	f04f 0304 	mov.w	r3, #4
 800a858:	f04f 0400 	mov.w	r4, #0
 800a85c:	e008      	b.n	800a870 <UART_SetConfig+0x1020>
 800a85e:	f04f 0302 	mov.w	r3, #2
 800a862:	f04f 0400 	mov.w	r4, #0
 800a866:	e003      	b.n	800a870 <UART_SetConfig+0x1020>
 800a868:	f04f 0301 	mov.w	r3, #1
 800a86c:	f04f 0400 	mov.w	r4, #0
 800a870:	461a      	mov	r2, r3
 800a872:	4623      	mov	r3, r4
 800a874:	f7f5 fd30 	bl	80002d8 <__aeabi_uldivmod>
 800a878:	4603      	mov	r3, r0
 800a87a:	460c      	mov	r4, r1
 800a87c:	4619      	mov	r1, r3
 800a87e:	4622      	mov	r2, r4
 800a880:	f04f 0300 	mov.w	r3, #0
 800a884:	f04f 0400 	mov.w	r4, #0
 800a888:	0214      	lsls	r4, r2, #8
 800a88a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a88e:	020b      	lsls	r3, r1, #8
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	6852      	ldr	r2, [r2, #4]
 800a894:	0852      	lsrs	r2, r2, #1
 800a896:	4611      	mov	r1, r2
 800a898:	f04f 0200 	mov.w	r2, #0
 800a89c:	eb13 0b01 	adds.w	fp, r3, r1
 800a8a0:	eb44 0c02 	adc.w	ip, r4, r2
 800a8a4:	4658      	mov	r0, fp
 800a8a6:	4661      	mov	r1, ip
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	f04f 0400 	mov.w	r4, #0
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	4623      	mov	r3, r4
 800a8b4:	f7f5 fd10 	bl	80002d8 <__aeabi_uldivmod>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	460c      	mov	r4, r1
 800a8bc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 800a8be:	e19d      	b.n	800abfc <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d05b      	beq.n	800a980 <UART_SetConfig+0x1130>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d053      	beq.n	800a978 <UART_SetConfig+0x1128>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d4:	2b02      	cmp	r3, #2
 800a8d6:	d04b      	beq.n	800a970 <UART_SetConfig+0x1120>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8dc:	2b03      	cmp	r3, #3
 800a8de:	d043      	beq.n	800a968 <UART_SetConfig+0x1118>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e4:	2b04      	cmp	r3, #4
 800a8e6:	d03b      	beq.n	800a960 <UART_SetConfig+0x1110>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ec:	2b05      	cmp	r3, #5
 800a8ee:	d033      	beq.n	800a958 <UART_SetConfig+0x1108>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f4:	2b06      	cmp	r3, #6
 800a8f6:	d02b      	beq.n	800a950 <UART_SetConfig+0x1100>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fc:	2b07      	cmp	r3, #7
 800a8fe:	d023      	beq.n	800a948 <UART_SetConfig+0x10f8>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a904:	2b08      	cmp	r3, #8
 800a906:	d01b      	beq.n	800a940 <UART_SetConfig+0x10f0>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90c:	2b09      	cmp	r3, #9
 800a90e:	d013      	beq.n	800a938 <UART_SetConfig+0x10e8>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a914:	2b0a      	cmp	r3, #10
 800a916:	d00b      	beq.n	800a930 <UART_SetConfig+0x10e0>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a91c:	2b0b      	cmp	r3, #11
 800a91e:	d103      	bne.n	800a928 <UART_SetConfig+0x10d8>
 800a920:	4b2a      	ldr	r3, [pc, #168]	; (800a9cc <UART_SetConfig+0x117c>)
 800a922:	f04f 0400 	mov.w	r4, #0
 800a926:	e02e      	b.n	800a986 <UART_SetConfig+0x1136>
 800a928:	4b29      	ldr	r3, [pc, #164]	; (800a9d0 <UART_SetConfig+0x1180>)
 800a92a:	f04f 0403 	mov.w	r4, #3
 800a92e:	e02a      	b.n	800a986 <UART_SetConfig+0x1136>
 800a930:	4b28      	ldr	r3, [pc, #160]	; (800a9d4 <UART_SetConfig+0x1184>)
 800a932:	f04f 0400 	mov.w	r4, #0
 800a936:	e026      	b.n	800a986 <UART_SetConfig+0x1136>
 800a938:	4b27      	ldr	r3, [pc, #156]	; (800a9d8 <UART_SetConfig+0x1188>)
 800a93a:	f04f 0400 	mov.w	r4, #0
 800a93e:	e022      	b.n	800a986 <UART_SetConfig+0x1136>
 800a940:	4b26      	ldr	r3, [pc, #152]	; (800a9dc <UART_SetConfig+0x118c>)
 800a942:	f04f 0400 	mov.w	r4, #0
 800a946:	e01e      	b.n	800a986 <UART_SetConfig+0x1136>
 800a948:	4b25      	ldr	r3, [pc, #148]	; (800a9e0 <UART_SetConfig+0x1190>)
 800a94a:	f04f 0400 	mov.w	r4, #0
 800a94e:	e01a      	b.n	800a986 <UART_SetConfig+0x1136>
 800a950:	a419      	add	r4, pc, #100	; (adr r4, 800a9b8 <UART_SetConfig+0x1168>)
 800a952:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a956:	e016      	b.n	800a986 <UART_SetConfig+0x1136>
 800a958:	4b22      	ldr	r3, [pc, #136]	; (800a9e4 <UART_SetConfig+0x1194>)
 800a95a:	f04f 0400 	mov.w	r4, #0
 800a95e:	e012      	b.n	800a986 <UART_SetConfig+0x1136>
 800a960:	4b21      	ldr	r3, [pc, #132]	; (800a9e8 <UART_SetConfig+0x1198>)
 800a962:	f04f 0400 	mov.w	r4, #0
 800a966:	e00e      	b.n	800a986 <UART_SetConfig+0x1136>
 800a968:	a415      	add	r4, pc, #84	; (adr r4, 800a9c0 <UART_SetConfig+0x1170>)
 800a96a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a96e:	e00a      	b.n	800a986 <UART_SetConfig+0x1136>
 800a970:	4b1e      	ldr	r3, [pc, #120]	; (800a9ec <UART_SetConfig+0x119c>)
 800a972:	f04f 0400 	mov.w	r4, #0
 800a976:	e006      	b.n	800a986 <UART_SetConfig+0x1136>
 800a978:	4b1d      	ldr	r3, [pc, #116]	; (800a9f0 <UART_SetConfig+0x11a0>)
 800a97a:	f04f 0401 	mov.w	r4, #1
 800a97e:	e002      	b.n	800a986 <UART_SetConfig+0x1136>
 800a980:	4b13      	ldr	r3, [pc, #76]	; (800a9d0 <UART_SetConfig+0x1180>)
 800a982:	f04f 0403 	mov.w	r4, #3
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	6852      	ldr	r2, [r2, #4]
 800a98a:	0852      	lsrs	r2, r2, #1
 800a98c:	4611      	mov	r1, r2
 800a98e:	f04f 0200 	mov.w	r2, #0
 800a992:	eb13 0b01 	adds.w	fp, r3, r1
 800a996:	eb44 0c02 	adc.w	ip, r4, r2
 800a99a:	4658      	mov	r0, fp
 800a99c:	4661      	mov	r1, ip
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	f04f 0400 	mov.w	r4, #0
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	4623      	mov	r3, r4
 800a9aa:	f7f5 fc95 	bl	80002d8 <__aeabi_uldivmod>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	460c      	mov	r4, r1
 800a9b2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800a9b4:	e122      	b.n	800abfc <UART_SetConfig+0x13ac>
 800a9b6:	bf00      	nop
 800a9b8:	51615500 	.word	0x51615500
 800a9bc:	00000000 	.word	0x00000000
 800a9c0:	a2c2aa00 	.word	0xa2c2aa00
 800a9c4:	00000000 	.word	0x00000000
 800a9c8:	58024400 	.word	0x58024400
 800a9cc:	03d09000 	.word	0x03d09000
 800a9d0:	d0900000 	.word	0xd0900000
 800a9d4:	07a12000 	.word	0x07a12000
 800a9d8:	0f424000 	.word	0x0f424000
 800a9dc:	1e848000 	.word	0x1e848000
 800a9e0:	3d090000 	.word	0x3d090000
 800a9e4:	61a80000 	.word	0x61a80000
 800a9e8:	7a120000 	.word	0x7a120000
 800a9ec:	f4240000 	.word	0xf4240000
 800a9f0:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d05b      	beq.n	800aab4 <UART_SetConfig+0x1264>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	d053      	beq.n	800aaac <UART_SetConfig+0x125c>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa08:	2b02      	cmp	r3, #2
 800aa0a:	d04b      	beq.n	800aaa4 <UART_SetConfig+0x1254>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa10:	2b03      	cmp	r3, #3
 800aa12:	d043      	beq.n	800aa9c <UART_SetConfig+0x124c>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa18:	2b04      	cmp	r3, #4
 800aa1a:	d03b      	beq.n	800aa94 <UART_SetConfig+0x1244>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa20:	2b05      	cmp	r3, #5
 800aa22:	d033      	beq.n	800aa8c <UART_SetConfig+0x123c>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa28:	2b06      	cmp	r3, #6
 800aa2a:	d02b      	beq.n	800aa84 <UART_SetConfig+0x1234>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa30:	2b07      	cmp	r3, #7
 800aa32:	d023      	beq.n	800aa7c <UART_SetConfig+0x122c>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa38:	2b08      	cmp	r3, #8
 800aa3a:	d01b      	beq.n	800aa74 <UART_SetConfig+0x1224>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa40:	2b09      	cmp	r3, #9
 800aa42:	d013      	beq.n	800aa6c <UART_SetConfig+0x121c>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa48:	2b0a      	cmp	r3, #10
 800aa4a:	d00b      	beq.n	800aa64 <UART_SetConfig+0x1214>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa50:	2b0b      	cmp	r3, #11
 800aa52:	d103      	bne.n	800aa5c <UART_SetConfig+0x120c>
 800aa54:	4bc0      	ldr	r3, [pc, #768]	; (800ad58 <UART_SetConfig+0x1508>)
 800aa56:	f04f 0400 	mov.w	r4, #0
 800aa5a:	e02e      	b.n	800aaba <UART_SetConfig+0x126a>
 800aa5c:	4bbf      	ldr	r3, [pc, #764]	; (800ad5c <UART_SetConfig+0x150c>)
 800aa5e:	f04f 0400 	mov.w	r4, #0
 800aa62:	e02a      	b.n	800aaba <UART_SetConfig+0x126a>
 800aa64:	4bbe      	ldr	r3, [pc, #760]	; (800ad60 <UART_SetConfig+0x1510>)
 800aa66:	f04f 0400 	mov.w	r4, #0
 800aa6a:	e026      	b.n	800aaba <UART_SetConfig+0x126a>
 800aa6c:	4bbd      	ldr	r3, [pc, #756]	; (800ad64 <UART_SetConfig+0x1514>)
 800aa6e:	f04f 0400 	mov.w	r4, #0
 800aa72:	e022      	b.n	800aaba <UART_SetConfig+0x126a>
 800aa74:	4bbc      	ldr	r3, [pc, #752]	; (800ad68 <UART_SetConfig+0x1518>)
 800aa76:	f04f 0400 	mov.w	r4, #0
 800aa7a:	e01e      	b.n	800aaba <UART_SetConfig+0x126a>
 800aa7c:	4bbb      	ldr	r3, [pc, #748]	; (800ad6c <UART_SetConfig+0x151c>)
 800aa7e:	f04f 0400 	mov.w	r4, #0
 800aa82:	e01a      	b.n	800aaba <UART_SetConfig+0x126a>
 800aa84:	a4b0      	add	r4, pc, #704	; (adr r4, 800ad48 <UART_SetConfig+0x14f8>)
 800aa86:	e9d4 3400 	ldrd	r3, r4, [r4]
 800aa8a:	e016      	b.n	800aaba <UART_SetConfig+0x126a>
 800aa8c:	4bb8      	ldr	r3, [pc, #736]	; (800ad70 <UART_SetConfig+0x1520>)
 800aa8e:	f04f 0400 	mov.w	r4, #0
 800aa92:	e012      	b.n	800aaba <UART_SetConfig+0x126a>
 800aa94:	4bb7      	ldr	r3, [pc, #732]	; (800ad74 <UART_SetConfig+0x1524>)
 800aa96:	f04f 0400 	mov.w	r4, #0
 800aa9a:	e00e      	b.n	800aaba <UART_SetConfig+0x126a>
 800aa9c:	a4ac      	add	r4, pc, #688	; (adr r4, 800ad50 <UART_SetConfig+0x1500>)
 800aa9e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800aaa2:	e00a      	b.n	800aaba <UART_SetConfig+0x126a>
 800aaa4:	4bb4      	ldr	r3, [pc, #720]	; (800ad78 <UART_SetConfig+0x1528>)
 800aaa6:	f04f 0400 	mov.w	r4, #0
 800aaaa:	e006      	b.n	800aaba <UART_SetConfig+0x126a>
 800aaac:	4bb3      	ldr	r3, [pc, #716]	; (800ad7c <UART_SetConfig+0x152c>)
 800aaae:	f04f 0400 	mov.w	r4, #0
 800aab2:	e002      	b.n	800aaba <UART_SetConfig+0x126a>
 800aab4:	4ba9      	ldr	r3, [pc, #676]	; (800ad5c <UART_SetConfig+0x150c>)
 800aab6:	f04f 0400 	mov.w	r4, #0
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	6852      	ldr	r2, [r2, #4]
 800aabe:	0852      	lsrs	r2, r2, #1
 800aac0:	4611      	mov	r1, r2
 800aac2:	f04f 0200 	mov.w	r2, #0
 800aac6:	eb13 0b01 	adds.w	fp, r3, r1
 800aaca:	eb44 0c02 	adc.w	ip, r4, r2
 800aace:	4658      	mov	r0, fp
 800aad0:	4661      	mov	r1, ip
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	f04f 0400 	mov.w	r4, #0
 800aada:	461a      	mov	r2, r3
 800aadc:	4623      	mov	r3, r4
 800aade:	f7f5 fbfb 	bl	80002d8 <__aeabi_uldivmod>
 800aae2:	4603      	mov	r3, r0
 800aae4:	460c      	mov	r4, r1
 800aae6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800aae8:	e088      	b.n	800abfc <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d064      	beq.n	800abbc <UART_SetConfig+0x136c>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	d05b      	beq.n	800abb2 <UART_SetConfig+0x1362>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aafe:	2b02      	cmp	r3, #2
 800ab00:	d052      	beq.n	800aba8 <UART_SetConfig+0x1358>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab06:	2b03      	cmp	r3, #3
 800ab08:	d04a      	beq.n	800aba0 <UART_SetConfig+0x1350>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab0e:	2b04      	cmp	r3, #4
 800ab10:	d041      	beq.n	800ab96 <UART_SetConfig+0x1346>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab16:	2b05      	cmp	r3, #5
 800ab18:	d039      	beq.n	800ab8e <UART_SetConfig+0x133e>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab1e:	2b06      	cmp	r3, #6
 800ab20:	d031      	beq.n	800ab86 <UART_SetConfig+0x1336>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab26:	2b07      	cmp	r3, #7
 800ab28:	d028      	beq.n	800ab7c <UART_SetConfig+0x132c>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab2e:	2b08      	cmp	r3, #8
 800ab30:	d01f      	beq.n	800ab72 <UART_SetConfig+0x1322>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab36:	2b09      	cmp	r3, #9
 800ab38:	d016      	beq.n	800ab68 <UART_SetConfig+0x1318>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab3e:	2b0a      	cmp	r3, #10
 800ab40:	d00d      	beq.n	800ab5e <UART_SetConfig+0x130e>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab46:	2b0b      	cmp	r3, #11
 800ab48:	d104      	bne.n	800ab54 <UART_SetConfig+0x1304>
 800ab4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab4e:	f04f 0400 	mov.w	r4, #0
 800ab52:	e037      	b.n	800abc4 <UART_SetConfig+0x1374>
 800ab54:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ab58:	f04f 0400 	mov.w	r4, #0
 800ab5c:	e032      	b.n	800abc4 <UART_SetConfig+0x1374>
 800ab5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ab62:	f04f 0400 	mov.w	r4, #0
 800ab66:	e02d      	b.n	800abc4 <UART_SetConfig+0x1374>
 800ab68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ab6c:	f04f 0400 	mov.w	r4, #0
 800ab70:	e028      	b.n	800abc4 <UART_SetConfig+0x1374>
 800ab72:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ab76:	f04f 0400 	mov.w	r4, #0
 800ab7a:	e023      	b.n	800abc4 <UART_SetConfig+0x1374>
 800ab7c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ab80:	f04f 0400 	mov.w	r4, #0
 800ab84:	e01e      	b.n	800abc4 <UART_SetConfig+0x1374>
 800ab86:	4b7e      	ldr	r3, [pc, #504]	; (800ad80 <UART_SetConfig+0x1530>)
 800ab88:	f04f 0400 	mov.w	r4, #0
 800ab8c:	e01a      	b.n	800abc4 <UART_SetConfig+0x1374>
 800ab8e:	4b7d      	ldr	r3, [pc, #500]	; (800ad84 <UART_SetConfig+0x1534>)
 800ab90:	f04f 0400 	mov.w	r4, #0
 800ab94:	e016      	b.n	800abc4 <UART_SetConfig+0x1374>
 800ab96:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ab9a:	f04f 0400 	mov.w	r4, #0
 800ab9e:	e011      	b.n	800abc4 <UART_SetConfig+0x1374>
 800aba0:	4b79      	ldr	r3, [pc, #484]	; (800ad88 <UART_SetConfig+0x1538>)
 800aba2:	f04f 0400 	mov.w	r4, #0
 800aba6:	e00d      	b.n	800abc4 <UART_SetConfig+0x1374>
 800aba8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800abac:	f04f 0400 	mov.w	r4, #0
 800abb0:	e008      	b.n	800abc4 <UART_SetConfig+0x1374>
 800abb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800abb6:	f04f 0400 	mov.w	r4, #0
 800abba:	e003      	b.n	800abc4 <UART_SetConfig+0x1374>
 800abbc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800abc0:	f04f 0400 	mov.w	r4, #0
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	6852      	ldr	r2, [r2, #4]
 800abc8:	0852      	lsrs	r2, r2, #1
 800abca:	4611      	mov	r1, r2
 800abcc:	f04f 0200 	mov.w	r2, #0
 800abd0:	eb13 0b01 	adds.w	fp, r3, r1
 800abd4:	eb44 0c02 	adc.w	ip, r4, r2
 800abd8:	4658      	mov	r0, fp
 800abda:	4661      	mov	r1, ip
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	f04f 0400 	mov.w	r4, #0
 800abe4:	461a      	mov	r2, r3
 800abe6:	4623      	mov	r3, r4
 800abe8:	f7f5 fb76 	bl	80002d8 <__aeabi_uldivmod>
 800abec:	4603      	mov	r3, r0
 800abee:	460c      	mov	r4, r1
 800abf0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800abf2:	e003      	b.n	800abfc <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 800abf4:	2301      	movs	r3, #1
 800abf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 800abfa:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800abfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ac02:	d309      	bcc.n	800ac18 <UART_SetConfig+0x13c8>
 800ac04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac0a:	d205      	bcs.n	800ac18 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac12:	60da      	str	r2, [r3, #12]
 800ac14:	f000 bf85 	b.w	800bb22 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac1e:	f000 bf80 	b.w	800bb22 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	69db      	ldr	r3, [r3, #28]
 800ac26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac2a:	f040 83da 	bne.w	800b3e2 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 800ac2e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ac32:	2b40      	cmp	r3, #64	; 0x40
 800ac34:	f200 83b3 	bhi.w	800b39e <UART_SetConfig+0x1b4e>
 800ac38:	a201      	add	r2, pc, #4	; (adr r2, 800ac40 <UART_SetConfig+0x13f0>)
 800ac3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac3e:	bf00      	nop
 800ac40:	0800ad8d 	.word	0x0800ad8d
 800ac44:	0800ae45 	.word	0x0800ae45
 800ac48:	0800b39f 	.word	0x0800b39f
 800ac4c:	0800b39f 	.word	0x0800b39f
 800ac50:	0800aefd 	.word	0x0800aefd
 800ac54:	0800b39f 	.word	0x0800b39f
 800ac58:	0800b39f 	.word	0x0800b39f
 800ac5c:	0800b39f 	.word	0x0800b39f
 800ac60:	0800afb9 	.word	0x0800afb9
 800ac64:	0800b39f 	.word	0x0800b39f
 800ac68:	0800b39f 	.word	0x0800b39f
 800ac6c:	0800b39f 	.word	0x0800b39f
 800ac70:	0800b39f 	.word	0x0800b39f
 800ac74:	0800b39f 	.word	0x0800b39f
 800ac78:	0800b39f 	.word	0x0800b39f
 800ac7c:	0800b39f 	.word	0x0800b39f
 800ac80:	0800b075 	.word	0x0800b075
 800ac84:	0800b39f 	.word	0x0800b39f
 800ac88:	0800b39f 	.word	0x0800b39f
 800ac8c:	0800b39f 	.word	0x0800b39f
 800ac90:	0800b39f 	.word	0x0800b39f
 800ac94:	0800b39f 	.word	0x0800b39f
 800ac98:	0800b39f 	.word	0x0800b39f
 800ac9c:	0800b39f 	.word	0x0800b39f
 800aca0:	0800b39f 	.word	0x0800b39f
 800aca4:	0800b39f 	.word	0x0800b39f
 800aca8:	0800b39f 	.word	0x0800b39f
 800acac:	0800b39f 	.word	0x0800b39f
 800acb0:	0800b39f 	.word	0x0800b39f
 800acb4:	0800b39f 	.word	0x0800b39f
 800acb8:	0800b39f 	.word	0x0800b39f
 800acbc:	0800b39f 	.word	0x0800b39f
 800acc0:	0800b1e7 	.word	0x0800b1e7
 800acc4:	0800b39f 	.word	0x0800b39f
 800acc8:	0800b39f 	.word	0x0800b39f
 800accc:	0800b39f 	.word	0x0800b39f
 800acd0:	0800b39f 	.word	0x0800b39f
 800acd4:	0800b39f 	.word	0x0800b39f
 800acd8:	0800b39f 	.word	0x0800b39f
 800acdc:	0800b39f 	.word	0x0800b39f
 800ace0:	0800b39f 	.word	0x0800b39f
 800ace4:	0800b39f 	.word	0x0800b39f
 800ace8:	0800b39f 	.word	0x0800b39f
 800acec:	0800b39f 	.word	0x0800b39f
 800acf0:	0800b39f 	.word	0x0800b39f
 800acf4:	0800b39f 	.word	0x0800b39f
 800acf8:	0800b39f 	.word	0x0800b39f
 800acfc:	0800b39f 	.word	0x0800b39f
 800ad00:	0800b39f 	.word	0x0800b39f
 800ad04:	0800b39f 	.word	0x0800b39f
 800ad08:	0800b39f 	.word	0x0800b39f
 800ad0c:	0800b39f 	.word	0x0800b39f
 800ad10:	0800b39f 	.word	0x0800b39f
 800ad14:	0800b39f 	.word	0x0800b39f
 800ad18:	0800b39f 	.word	0x0800b39f
 800ad1c:	0800b39f 	.word	0x0800b39f
 800ad20:	0800b39f 	.word	0x0800b39f
 800ad24:	0800b39f 	.word	0x0800b39f
 800ad28:	0800b39f 	.word	0x0800b39f
 800ad2c:	0800b39f 	.word	0x0800b39f
 800ad30:	0800b39f 	.word	0x0800b39f
 800ad34:	0800b39f 	.word	0x0800b39f
 800ad38:	0800b39f 	.word	0x0800b39f
 800ad3c:	0800b39f 	.word	0x0800b39f
 800ad40:	0800b2dd 	.word	0x0800b2dd
 800ad44:	f3af 8000 	nop.w
 800ad48:	05161500 	.word	0x05161500
 800ad4c:	00000000 	.word	0x00000000
 800ad50:	0a2c2a00 	.word	0x0a2c2a00
 800ad54:	00000000 	.word	0x00000000
 800ad58:	003d0900 	.word	0x003d0900
 800ad5c:	3d090000 	.word	0x3d090000
 800ad60:	007a1200 	.word	0x007a1200
 800ad64:	00f42400 	.word	0x00f42400
 800ad68:	01e84800 	.word	0x01e84800
 800ad6c:	03d09000 	.word	0x03d09000
 800ad70:	061a8000 	.word	0x061a8000
 800ad74:	07a12000 	.word	0x07a12000
 800ad78:	0f424000 	.word	0x0f424000
 800ad7c:	1e848000 	.word	0x1e848000
 800ad80:	000aaa00 	.word	0x000aaa00
 800ad84:	000ccc00 	.word	0x000ccc00
 800ad88:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad8c:	f7fa ff04 	bl	8005b98 <HAL_RCC_GetPCLK1Freq>
 800ad90:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d044      	beq.n	800ae24 <UART_SetConfig+0x15d4>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d03e      	beq.n	800ae20 <UART_SetConfig+0x15d0>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada6:	2b02      	cmp	r3, #2
 800ada8:	d038      	beq.n	800ae1c <UART_SetConfig+0x15cc>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adae:	2b03      	cmp	r3, #3
 800adb0:	d032      	beq.n	800ae18 <UART_SetConfig+0x15c8>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb6:	2b04      	cmp	r3, #4
 800adb8:	d02c      	beq.n	800ae14 <UART_SetConfig+0x15c4>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adbe:	2b05      	cmp	r3, #5
 800adc0:	d026      	beq.n	800ae10 <UART_SetConfig+0x15c0>
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc6:	2b06      	cmp	r3, #6
 800adc8:	d020      	beq.n	800ae0c <UART_SetConfig+0x15bc>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adce:	2b07      	cmp	r3, #7
 800add0:	d01a      	beq.n	800ae08 <UART_SetConfig+0x15b8>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add6:	2b08      	cmp	r3, #8
 800add8:	d014      	beq.n	800ae04 <UART_SetConfig+0x15b4>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adde:	2b09      	cmp	r3, #9
 800ade0:	d00e      	beq.n	800ae00 <UART_SetConfig+0x15b0>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade6:	2b0a      	cmp	r3, #10
 800ade8:	d008      	beq.n	800adfc <UART_SetConfig+0x15ac>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adee:	2b0b      	cmp	r3, #11
 800adf0:	d102      	bne.n	800adf8 <UART_SetConfig+0x15a8>
 800adf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adf6:	e016      	b.n	800ae26 <UART_SetConfig+0x15d6>
 800adf8:	2301      	movs	r3, #1
 800adfa:	e014      	b.n	800ae26 <UART_SetConfig+0x15d6>
 800adfc:	2380      	movs	r3, #128	; 0x80
 800adfe:	e012      	b.n	800ae26 <UART_SetConfig+0x15d6>
 800ae00:	2340      	movs	r3, #64	; 0x40
 800ae02:	e010      	b.n	800ae26 <UART_SetConfig+0x15d6>
 800ae04:	2320      	movs	r3, #32
 800ae06:	e00e      	b.n	800ae26 <UART_SetConfig+0x15d6>
 800ae08:	2310      	movs	r3, #16
 800ae0a:	e00c      	b.n	800ae26 <UART_SetConfig+0x15d6>
 800ae0c:	230c      	movs	r3, #12
 800ae0e:	e00a      	b.n	800ae26 <UART_SetConfig+0x15d6>
 800ae10:	230a      	movs	r3, #10
 800ae12:	e008      	b.n	800ae26 <UART_SetConfig+0x15d6>
 800ae14:	2308      	movs	r3, #8
 800ae16:	e006      	b.n	800ae26 <UART_SetConfig+0x15d6>
 800ae18:	2306      	movs	r3, #6
 800ae1a:	e004      	b.n	800ae26 <UART_SetConfig+0x15d6>
 800ae1c:	2304      	movs	r3, #4
 800ae1e:	e002      	b.n	800ae26 <UART_SetConfig+0x15d6>
 800ae20:	2302      	movs	r3, #2
 800ae22:	e000      	b.n	800ae26 <UART_SetConfig+0x15d6>
 800ae24:	2301      	movs	r3, #1
 800ae26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae28:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae2c:	005a      	lsls	r2, r3, #1
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	085b      	lsrs	r3, r3, #1
 800ae34:	441a      	add	r2, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ae42:	e2b0      	b.n	800b3a6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae44:	f7fa febe 	bl	8005bc4 <HAL_RCC_GetPCLK2Freq>
 800ae48:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d044      	beq.n	800aedc <UART_SetConfig+0x168c>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	d03e      	beq.n	800aed8 <UART_SetConfig+0x1688>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae5e:	2b02      	cmp	r3, #2
 800ae60:	d038      	beq.n	800aed4 <UART_SetConfig+0x1684>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae66:	2b03      	cmp	r3, #3
 800ae68:	d032      	beq.n	800aed0 <UART_SetConfig+0x1680>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae6e:	2b04      	cmp	r3, #4
 800ae70:	d02c      	beq.n	800aecc <UART_SetConfig+0x167c>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae76:	2b05      	cmp	r3, #5
 800ae78:	d026      	beq.n	800aec8 <UART_SetConfig+0x1678>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7e:	2b06      	cmp	r3, #6
 800ae80:	d020      	beq.n	800aec4 <UART_SetConfig+0x1674>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae86:	2b07      	cmp	r3, #7
 800ae88:	d01a      	beq.n	800aec0 <UART_SetConfig+0x1670>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8e:	2b08      	cmp	r3, #8
 800ae90:	d014      	beq.n	800aebc <UART_SetConfig+0x166c>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae96:	2b09      	cmp	r3, #9
 800ae98:	d00e      	beq.n	800aeb8 <UART_SetConfig+0x1668>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae9e:	2b0a      	cmp	r3, #10
 800aea0:	d008      	beq.n	800aeb4 <UART_SetConfig+0x1664>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea6:	2b0b      	cmp	r3, #11
 800aea8:	d102      	bne.n	800aeb0 <UART_SetConfig+0x1660>
 800aeaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aeae:	e016      	b.n	800aede <UART_SetConfig+0x168e>
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	e014      	b.n	800aede <UART_SetConfig+0x168e>
 800aeb4:	2380      	movs	r3, #128	; 0x80
 800aeb6:	e012      	b.n	800aede <UART_SetConfig+0x168e>
 800aeb8:	2340      	movs	r3, #64	; 0x40
 800aeba:	e010      	b.n	800aede <UART_SetConfig+0x168e>
 800aebc:	2320      	movs	r3, #32
 800aebe:	e00e      	b.n	800aede <UART_SetConfig+0x168e>
 800aec0:	2310      	movs	r3, #16
 800aec2:	e00c      	b.n	800aede <UART_SetConfig+0x168e>
 800aec4:	230c      	movs	r3, #12
 800aec6:	e00a      	b.n	800aede <UART_SetConfig+0x168e>
 800aec8:	230a      	movs	r3, #10
 800aeca:	e008      	b.n	800aede <UART_SetConfig+0x168e>
 800aecc:	2308      	movs	r3, #8
 800aece:	e006      	b.n	800aede <UART_SetConfig+0x168e>
 800aed0:	2306      	movs	r3, #6
 800aed2:	e004      	b.n	800aede <UART_SetConfig+0x168e>
 800aed4:	2304      	movs	r3, #4
 800aed6:	e002      	b.n	800aede <UART_SetConfig+0x168e>
 800aed8:	2302      	movs	r3, #2
 800aeda:	e000      	b.n	800aede <UART_SetConfig+0x168e>
 800aedc:	2301      	movs	r3, #1
 800aede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aee0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aee4:	005a      	lsls	r2, r3, #1
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	685b      	ldr	r3, [r3, #4]
 800aeea:	085b      	lsrs	r3, r3, #1
 800aeec:	441a      	add	r2, r3
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800aefa:	e254      	b.n	800b3a6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aefc:	f107 0318 	add.w	r3, r7, #24
 800af00:	4618      	mov	r0, r3
 800af02:	f7fb ffb1 	bl	8006e68 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af06:	69fa      	ldr	r2, [r7, #28]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d044      	beq.n	800af9a <UART_SetConfig+0x174a>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af14:	2b01      	cmp	r3, #1
 800af16:	d03e      	beq.n	800af96 <UART_SetConfig+0x1746>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af1c:	2b02      	cmp	r3, #2
 800af1e:	d038      	beq.n	800af92 <UART_SetConfig+0x1742>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af24:	2b03      	cmp	r3, #3
 800af26:	d032      	beq.n	800af8e <UART_SetConfig+0x173e>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2c:	2b04      	cmp	r3, #4
 800af2e:	d02c      	beq.n	800af8a <UART_SetConfig+0x173a>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af34:	2b05      	cmp	r3, #5
 800af36:	d026      	beq.n	800af86 <UART_SetConfig+0x1736>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af3c:	2b06      	cmp	r3, #6
 800af3e:	d020      	beq.n	800af82 <UART_SetConfig+0x1732>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af44:	2b07      	cmp	r3, #7
 800af46:	d01a      	beq.n	800af7e <UART_SetConfig+0x172e>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af4c:	2b08      	cmp	r3, #8
 800af4e:	d014      	beq.n	800af7a <UART_SetConfig+0x172a>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af54:	2b09      	cmp	r3, #9
 800af56:	d00e      	beq.n	800af76 <UART_SetConfig+0x1726>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af5c:	2b0a      	cmp	r3, #10
 800af5e:	d008      	beq.n	800af72 <UART_SetConfig+0x1722>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af64:	2b0b      	cmp	r3, #11
 800af66:	d102      	bne.n	800af6e <UART_SetConfig+0x171e>
 800af68:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af6c:	e016      	b.n	800af9c <UART_SetConfig+0x174c>
 800af6e:	2301      	movs	r3, #1
 800af70:	e014      	b.n	800af9c <UART_SetConfig+0x174c>
 800af72:	2380      	movs	r3, #128	; 0x80
 800af74:	e012      	b.n	800af9c <UART_SetConfig+0x174c>
 800af76:	2340      	movs	r3, #64	; 0x40
 800af78:	e010      	b.n	800af9c <UART_SetConfig+0x174c>
 800af7a:	2320      	movs	r3, #32
 800af7c:	e00e      	b.n	800af9c <UART_SetConfig+0x174c>
 800af7e:	2310      	movs	r3, #16
 800af80:	e00c      	b.n	800af9c <UART_SetConfig+0x174c>
 800af82:	230c      	movs	r3, #12
 800af84:	e00a      	b.n	800af9c <UART_SetConfig+0x174c>
 800af86:	230a      	movs	r3, #10
 800af88:	e008      	b.n	800af9c <UART_SetConfig+0x174c>
 800af8a:	2308      	movs	r3, #8
 800af8c:	e006      	b.n	800af9c <UART_SetConfig+0x174c>
 800af8e:	2306      	movs	r3, #6
 800af90:	e004      	b.n	800af9c <UART_SetConfig+0x174c>
 800af92:	2304      	movs	r3, #4
 800af94:	e002      	b.n	800af9c <UART_SetConfig+0x174c>
 800af96:	2302      	movs	r3, #2
 800af98:	e000      	b.n	800af9c <UART_SetConfig+0x174c>
 800af9a:	2301      	movs	r3, #1
 800af9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800afa0:	005a      	lsls	r2, r3, #1
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	085b      	lsrs	r3, r3, #1
 800afa8:	441a      	add	r2, r3
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	fbb2 f3f3 	udiv	r3, r2, r3
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800afb6:	e1f6      	b.n	800b3a6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afb8:	f107 030c 	add.w	r3, r7, #12
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7fc f89f 	bl	8007100 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afc2:	693a      	ldr	r2, [r7, #16]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d044      	beq.n	800b056 <UART_SetConfig+0x1806>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d03e      	beq.n	800b052 <UART_SetConfig+0x1802>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd8:	2b02      	cmp	r3, #2
 800afda:	d038      	beq.n	800b04e <UART_SetConfig+0x17fe>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe0:	2b03      	cmp	r3, #3
 800afe2:	d032      	beq.n	800b04a <UART_SetConfig+0x17fa>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe8:	2b04      	cmp	r3, #4
 800afea:	d02c      	beq.n	800b046 <UART_SetConfig+0x17f6>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff0:	2b05      	cmp	r3, #5
 800aff2:	d026      	beq.n	800b042 <UART_SetConfig+0x17f2>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff8:	2b06      	cmp	r3, #6
 800affa:	d020      	beq.n	800b03e <UART_SetConfig+0x17ee>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b000:	2b07      	cmp	r3, #7
 800b002:	d01a      	beq.n	800b03a <UART_SetConfig+0x17ea>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b008:	2b08      	cmp	r3, #8
 800b00a:	d014      	beq.n	800b036 <UART_SetConfig+0x17e6>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b010:	2b09      	cmp	r3, #9
 800b012:	d00e      	beq.n	800b032 <UART_SetConfig+0x17e2>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b018:	2b0a      	cmp	r3, #10
 800b01a:	d008      	beq.n	800b02e <UART_SetConfig+0x17de>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b020:	2b0b      	cmp	r3, #11
 800b022:	d102      	bne.n	800b02a <UART_SetConfig+0x17da>
 800b024:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b028:	e016      	b.n	800b058 <UART_SetConfig+0x1808>
 800b02a:	2301      	movs	r3, #1
 800b02c:	e014      	b.n	800b058 <UART_SetConfig+0x1808>
 800b02e:	2380      	movs	r3, #128	; 0x80
 800b030:	e012      	b.n	800b058 <UART_SetConfig+0x1808>
 800b032:	2340      	movs	r3, #64	; 0x40
 800b034:	e010      	b.n	800b058 <UART_SetConfig+0x1808>
 800b036:	2320      	movs	r3, #32
 800b038:	e00e      	b.n	800b058 <UART_SetConfig+0x1808>
 800b03a:	2310      	movs	r3, #16
 800b03c:	e00c      	b.n	800b058 <UART_SetConfig+0x1808>
 800b03e:	230c      	movs	r3, #12
 800b040:	e00a      	b.n	800b058 <UART_SetConfig+0x1808>
 800b042:	230a      	movs	r3, #10
 800b044:	e008      	b.n	800b058 <UART_SetConfig+0x1808>
 800b046:	2308      	movs	r3, #8
 800b048:	e006      	b.n	800b058 <UART_SetConfig+0x1808>
 800b04a:	2306      	movs	r3, #6
 800b04c:	e004      	b.n	800b058 <UART_SetConfig+0x1808>
 800b04e:	2304      	movs	r3, #4
 800b050:	e002      	b.n	800b058 <UART_SetConfig+0x1808>
 800b052:	2302      	movs	r3, #2
 800b054:	e000      	b.n	800b058 <UART_SetConfig+0x1808>
 800b056:	2301      	movs	r3, #1
 800b058:	fbb2 f3f3 	udiv	r3, r2, r3
 800b05c:	005a      	lsls	r2, r3, #1
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	085b      	lsrs	r3, r3, #1
 800b064:	441a      	add	r2, r3
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b06e:	b29b      	uxth	r3, r3
 800b070:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b072:	e198      	b.n	800b3a6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b074:	4b87      	ldr	r3, [pc, #540]	; (800b294 <UART_SetConfig+0x1a44>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f003 0320 	and.w	r3, r3, #32
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d05e      	beq.n	800b13e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b080:	4b84      	ldr	r3, [pc, #528]	; (800b294 <UART_SetConfig+0x1a44>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	08db      	lsrs	r3, r3, #3
 800b086:	f003 0303 	and.w	r3, r3, #3
 800b08a:	4a83      	ldr	r2, [pc, #524]	; (800b298 <UART_SetConfig+0x1a48>)
 800b08c:	40da      	lsrs	r2, r3
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b092:	2b00      	cmp	r3, #0
 800b094:	d044      	beq.n	800b120 <UART_SetConfig+0x18d0>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d03e      	beq.n	800b11c <UART_SetConfig+0x18cc>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	d038      	beq.n	800b118 <UART_SetConfig+0x18c8>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0aa:	2b03      	cmp	r3, #3
 800b0ac:	d032      	beq.n	800b114 <UART_SetConfig+0x18c4>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b2:	2b04      	cmp	r3, #4
 800b0b4:	d02c      	beq.n	800b110 <UART_SetConfig+0x18c0>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ba:	2b05      	cmp	r3, #5
 800b0bc:	d026      	beq.n	800b10c <UART_SetConfig+0x18bc>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c2:	2b06      	cmp	r3, #6
 800b0c4:	d020      	beq.n	800b108 <UART_SetConfig+0x18b8>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ca:	2b07      	cmp	r3, #7
 800b0cc:	d01a      	beq.n	800b104 <UART_SetConfig+0x18b4>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d2:	2b08      	cmp	r3, #8
 800b0d4:	d014      	beq.n	800b100 <UART_SetConfig+0x18b0>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0da:	2b09      	cmp	r3, #9
 800b0dc:	d00e      	beq.n	800b0fc <UART_SetConfig+0x18ac>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e2:	2b0a      	cmp	r3, #10
 800b0e4:	d008      	beq.n	800b0f8 <UART_SetConfig+0x18a8>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ea:	2b0b      	cmp	r3, #11
 800b0ec:	d102      	bne.n	800b0f4 <UART_SetConfig+0x18a4>
 800b0ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0f2:	e016      	b.n	800b122 <UART_SetConfig+0x18d2>
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	e014      	b.n	800b122 <UART_SetConfig+0x18d2>
 800b0f8:	2380      	movs	r3, #128	; 0x80
 800b0fa:	e012      	b.n	800b122 <UART_SetConfig+0x18d2>
 800b0fc:	2340      	movs	r3, #64	; 0x40
 800b0fe:	e010      	b.n	800b122 <UART_SetConfig+0x18d2>
 800b100:	2320      	movs	r3, #32
 800b102:	e00e      	b.n	800b122 <UART_SetConfig+0x18d2>
 800b104:	2310      	movs	r3, #16
 800b106:	e00c      	b.n	800b122 <UART_SetConfig+0x18d2>
 800b108:	230c      	movs	r3, #12
 800b10a:	e00a      	b.n	800b122 <UART_SetConfig+0x18d2>
 800b10c:	230a      	movs	r3, #10
 800b10e:	e008      	b.n	800b122 <UART_SetConfig+0x18d2>
 800b110:	2308      	movs	r3, #8
 800b112:	e006      	b.n	800b122 <UART_SetConfig+0x18d2>
 800b114:	2306      	movs	r3, #6
 800b116:	e004      	b.n	800b122 <UART_SetConfig+0x18d2>
 800b118:	2304      	movs	r3, #4
 800b11a:	e002      	b.n	800b122 <UART_SetConfig+0x18d2>
 800b11c:	2302      	movs	r3, #2
 800b11e:	e000      	b.n	800b122 <UART_SetConfig+0x18d2>
 800b120:	2301      	movs	r3, #1
 800b122:	fbb2 f3f3 	udiv	r3, r2, r3
 800b126:	005a      	lsls	r2, r3, #1
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	085b      	lsrs	r3, r3, #1
 800b12e:	441a      	add	r2, r3
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	fbb2 f3f3 	udiv	r3, r2, r3
 800b138:	b29b      	uxth	r3, r3
 800b13a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b13c:	e133      	b.n	800b3a6 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b142:	2b00      	cmp	r3, #0
 800b144:	d043      	beq.n	800b1ce <UART_SetConfig+0x197e>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d03d      	beq.n	800b1ca <UART_SetConfig+0x197a>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b152:	2b02      	cmp	r3, #2
 800b154:	d037      	beq.n	800b1c6 <UART_SetConfig+0x1976>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15a:	2b03      	cmp	r3, #3
 800b15c:	d031      	beq.n	800b1c2 <UART_SetConfig+0x1972>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b162:	2b04      	cmp	r3, #4
 800b164:	d02b      	beq.n	800b1be <UART_SetConfig+0x196e>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16a:	2b05      	cmp	r3, #5
 800b16c:	d025      	beq.n	800b1ba <UART_SetConfig+0x196a>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b172:	2b06      	cmp	r3, #6
 800b174:	d01f      	beq.n	800b1b6 <UART_SetConfig+0x1966>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b17a:	2b07      	cmp	r3, #7
 800b17c:	d019      	beq.n	800b1b2 <UART_SetConfig+0x1962>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b182:	2b08      	cmp	r3, #8
 800b184:	d013      	beq.n	800b1ae <UART_SetConfig+0x195e>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18a:	2b09      	cmp	r3, #9
 800b18c:	d00d      	beq.n	800b1aa <UART_SetConfig+0x195a>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b192:	2b0a      	cmp	r3, #10
 800b194:	d007      	beq.n	800b1a6 <UART_SetConfig+0x1956>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b19a:	2b0b      	cmp	r3, #11
 800b19c:	d101      	bne.n	800b1a2 <UART_SetConfig+0x1952>
 800b19e:	4b3f      	ldr	r3, [pc, #252]	; (800b29c <UART_SetConfig+0x1a4c>)
 800b1a0:	e016      	b.n	800b1d0 <UART_SetConfig+0x1980>
 800b1a2:	4b3f      	ldr	r3, [pc, #252]	; (800b2a0 <UART_SetConfig+0x1a50>)
 800b1a4:	e014      	b.n	800b1d0 <UART_SetConfig+0x1980>
 800b1a6:	4b3f      	ldr	r3, [pc, #252]	; (800b2a4 <UART_SetConfig+0x1a54>)
 800b1a8:	e012      	b.n	800b1d0 <UART_SetConfig+0x1980>
 800b1aa:	4b3f      	ldr	r3, [pc, #252]	; (800b2a8 <UART_SetConfig+0x1a58>)
 800b1ac:	e010      	b.n	800b1d0 <UART_SetConfig+0x1980>
 800b1ae:	4b3f      	ldr	r3, [pc, #252]	; (800b2ac <UART_SetConfig+0x1a5c>)
 800b1b0:	e00e      	b.n	800b1d0 <UART_SetConfig+0x1980>
 800b1b2:	4b3f      	ldr	r3, [pc, #252]	; (800b2b0 <UART_SetConfig+0x1a60>)
 800b1b4:	e00c      	b.n	800b1d0 <UART_SetConfig+0x1980>
 800b1b6:	4b3f      	ldr	r3, [pc, #252]	; (800b2b4 <UART_SetConfig+0x1a64>)
 800b1b8:	e00a      	b.n	800b1d0 <UART_SetConfig+0x1980>
 800b1ba:	4b3f      	ldr	r3, [pc, #252]	; (800b2b8 <UART_SetConfig+0x1a68>)
 800b1bc:	e008      	b.n	800b1d0 <UART_SetConfig+0x1980>
 800b1be:	4b3f      	ldr	r3, [pc, #252]	; (800b2bc <UART_SetConfig+0x1a6c>)
 800b1c0:	e006      	b.n	800b1d0 <UART_SetConfig+0x1980>
 800b1c2:	4b3f      	ldr	r3, [pc, #252]	; (800b2c0 <UART_SetConfig+0x1a70>)
 800b1c4:	e004      	b.n	800b1d0 <UART_SetConfig+0x1980>
 800b1c6:	4b3f      	ldr	r3, [pc, #252]	; (800b2c4 <UART_SetConfig+0x1a74>)
 800b1c8:	e002      	b.n	800b1d0 <UART_SetConfig+0x1980>
 800b1ca:	4b33      	ldr	r3, [pc, #204]	; (800b298 <UART_SetConfig+0x1a48>)
 800b1cc:	e000      	b.n	800b1d0 <UART_SetConfig+0x1980>
 800b1ce:	4b34      	ldr	r3, [pc, #208]	; (800b2a0 <UART_SetConfig+0x1a50>)
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	6852      	ldr	r2, [r2, #4]
 800b1d4:	0852      	lsrs	r2, r2, #1
 800b1d6:	441a      	add	r2, r3
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b1e4:	e0df      	b.n	800b3a6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d045      	beq.n	800b27a <UART_SetConfig+0x1a2a>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d03f      	beq.n	800b276 <UART_SetConfig+0x1a26>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1fa:	2b02      	cmp	r3, #2
 800b1fc:	d039      	beq.n	800b272 <UART_SetConfig+0x1a22>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b202:	2b03      	cmp	r3, #3
 800b204:	d033      	beq.n	800b26e <UART_SetConfig+0x1a1e>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b20a:	2b04      	cmp	r3, #4
 800b20c:	d02d      	beq.n	800b26a <UART_SetConfig+0x1a1a>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b212:	2b05      	cmp	r3, #5
 800b214:	d027      	beq.n	800b266 <UART_SetConfig+0x1a16>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21a:	2b06      	cmp	r3, #6
 800b21c:	d021      	beq.n	800b262 <UART_SetConfig+0x1a12>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b222:	2b07      	cmp	r3, #7
 800b224:	d01b      	beq.n	800b25e <UART_SetConfig+0x1a0e>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b22a:	2b08      	cmp	r3, #8
 800b22c:	d015      	beq.n	800b25a <UART_SetConfig+0x1a0a>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b232:	2b09      	cmp	r3, #9
 800b234:	d00f      	beq.n	800b256 <UART_SetConfig+0x1a06>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b23a:	2b0a      	cmp	r3, #10
 800b23c:	d008      	beq.n	800b250 <UART_SetConfig+0x1a00>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b242:	2b0b      	cmp	r3, #11
 800b244:	d102      	bne.n	800b24c <UART_SetConfig+0x19fc>
 800b246:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b24a:	e017      	b.n	800b27c <UART_SetConfig+0x1a2c>
 800b24c:	4b18      	ldr	r3, [pc, #96]	; (800b2b0 <UART_SetConfig+0x1a60>)
 800b24e:	e015      	b.n	800b27c <UART_SetConfig+0x1a2c>
 800b250:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b254:	e012      	b.n	800b27c <UART_SetConfig+0x1a2c>
 800b256:	4b1c      	ldr	r3, [pc, #112]	; (800b2c8 <UART_SetConfig+0x1a78>)
 800b258:	e010      	b.n	800b27c <UART_SetConfig+0x1a2c>
 800b25a:	4b1c      	ldr	r3, [pc, #112]	; (800b2cc <UART_SetConfig+0x1a7c>)
 800b25c:	e00e      	b.n	800b27c <UART_SetConfig+0x1a2c>
 800b25e:	4b0f      	ldr	r3, [pc, #60]	; (800b29c <UART_SetConfig+0x1a4c>)
 800b260:	e00c      	b.n	800b27c <UART_SetConfig+0x1a2c>
 800b262:	4b1b      	ldr	r3, [pc, #108]	; (800b2d0 <UART_SetConfig+0x1a80>)
 800b264:	e00a      	b.n	800b27c <UART_SetConfig+0x1a2c>
 800b266:	4b1b      	ldr	r3, [pc, #108]	; (800b2d4 <UART_SetConfig+0x1a84>)
 800b268:	e008      	b.n	800b27c <UART_SetConfig+0x1a2c>
 800b26a:	4b0e      	ldr	r3, [pc, #56]	; (800b2a4 <UART_SetConfig+0x1a54>)
 800b26c:	e006      	b.n	800b27c <UART_SetConfig+0x1a2c>
 800b26e:	4b1a      	ldr	r3, [pc, #104]	; (800b2d8 <UART_SetConfig+0x1a88>)
 800b270:	e004      	b.n	800b27c <UART_SetConfig+0x1a2c>
 800b272:	4b0d      	ldr	r3, [pc, #52]	; (800b2a8 <UART_SetConfig+0x1a58>)
 800b274:	e002      	b.n	800b27c <UART_SetConfig+0x1a2c>
 800b276:	4b0d      	ldr	r3, [pc, #52]	; (800b2ac <UART_SetConfig+0x1a5c>)
 800b278:	e000      	b.n	800b27c <UART_SetConfig+0x1a2c>
 800b27a:	4b0d      	ldr	r3, [pc, #52]	; (800b2b0 <UART_SetConfig+0x1a60>)
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	6852      	ldr	r2, [r2, #4]
 800b280:	0852      	lsrs	r2, r2, #1
 800b282:	441a      	add	r2, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	685b      	ldr	r3, [r3, #4]
 800b288:	fbb2 f3f3 	udiv	r3, r2, r3
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b290:	e089      	b.n	800b3a6 <UART_SetConfig+0x1b56>
 800b292:	bf00      	nop
 800b294:	58024400 	.word	0x58024400
 800b298:	03d09000 	.word	0x03d09000
 800b29c:	0007a120 	.word	0x0007a120
 800b2a0:	07a12000 	.word	0x07a12000
 800b2a4:	000f4240 	.word	0x000f4240
 800b2a8:	001e8480 	.word	0x001e8480
 800b2ac:	003d0900 	.word	0x003d0900
 800b2b0:	007a1200 	.word	0x007a1200
 800b2b4:	00a2c2aa 	.word	0x00a2c2aa
 800b2b8:	00c35000 	.word	0x00c35000
 800b2bc:	00f42400 	.word	0x00f42400
 800b2c0:	01458554 	.word	0x01458554
 800b2c4:	01e84800 	.word	0x01e84800
 800b2c8:	0001e848 	.word	0x0001e848
 800b2cc:	0003d090 	.word	0x0003d090
 800b2d0:	000a2c2a 	.word	0x000a2c2a
 800b2d4:	000c3500 	.word	0x000c3500
 800b2d8:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d04f      	beq.n	800b384 <UART_SetConfig+0x1b34>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d048      	beq.n	800b37e <UART_SetConfig+0x1b2e>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f0:	2b02      	cmp	r3, #2
 800b2f2:	d041      	beq.n	800b378 <UART_SetConfig+0x1b28>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f8:	2b03      	cmp	r3, #3
 800b2fa:	d03a      	beq.n	800b372 <UART_SetConfig+0x1b22>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b300:	2b04      	cmp	r3, #4
 800b302:	d033      	beq.n	800b36c <UART_SetConfig+0x1b1c>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b308:	2b05      	cmp	r3, #5
 800b30a:	d02c      	beq.n	800b366 <UART_SetConfig+0x1b16>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b310:	2b06      	cmp	r3, #6
 800b312:	d025      	beq.n	800b360 <UART_SetConfig+0x1b10>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b318:	2b07      	cmp	r3, #7
 800b31a:	d01e      	beq.n	800b35a <UART_SetConfig+0x1b0a>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b320:	2b08      	cmp	r3, #8
 800b322:	d017      	beq.n	800b354 <UART_SetConfig+0x1b04>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b328:	2b09      	cmp	r3, #9
 800b32a:	d010      	beq.n	800b34e <UART_SetConfig+0x1afe>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b330:	2b0a      	cmp	r3, #10
 800b332:	d009      	beq.n	800b348 <UART_SetConfig+0x1af8>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b338:	2b0b      	cmp	r3, #11
 800b33a:	d102      	bne.n	800b342 <UART_SetConfig+0x1af2>
 800b33c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b340:	e022      	b.n	800b388 <UART_SetConfig+0x1b38>
 800b342:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b346:	e01f      	b.n	800b388 <UART_SetConfig+0x1b38>
 800b348:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b34c:	e01c      	b.n	800b388 <UART_SetConfig+0x1b38>
 800b34e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b352:	e019      	b.n	800b388 <UART_SetConfig+0x1b38>
 800b354:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b358:	e016      	b.n	800b388 <UART_SetConfig+0x1b38>
 800b35a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b35e:	e013      	b.n	800b388 <UART_SetConfig+0x1b38>
 800b360:	f241 5354 	movw	r3, #5460	; 0x1554
 800b364:	e010      	b.n	800b388 <UART_SetConfig+0x1b38>
 800b366:	f641 1398 	movw	r3, #6552	; 0x1998
 800b36a:	e00d      	b.n	800b388 <UART_SetConfig+0x1b38>
 800b36c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b370:	e00a      	b.n	800b388 <UART_SetConfig+0x1b38>
 800b372:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800b376:	e007      	b.n	800b388 <UART_SetConfig+0x1b38>
 800b378:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b37c:	e004      	b.n	800b388 <UART_SetConfig+0x1b38>
 800b37e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b382:	e001      	b.n	800b388 <UART_SetConfig+0x1b38>
 800b384:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b388:	687a      	ldr	r2, [r7, #4]
 800b38a:	6852      	ldr	r2, [r2, #4]
 800b38c:	0852      	lsrs	r2, r2, #1
 800b38e:	441a      	add	r2, r3
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	fbb2 f3f3 	udiv	r3, r2, r3
 800b398:	b29b      	uxth	r3, r3
 800b39a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b39c:	e003      	b.n	800b3a6 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800b3a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b3a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3a8:	2b0f      	cmp	r3, #15
 800b3aa:	d916      	bls.n	800b3da <UART_SetConfig+0x1b8a>
 800b3ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3b2:	d212      	bcs.n	800b3da <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b3b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3b6:	b29b      	uxth	r3, r3
 800b3b8:	f023 030f 	bic.w	r3, r3, #15
 800b3bc:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b3be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3c0:	085b      	lsrs	r3, r3, #1
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	f003 0307 	and.w	r3, r3, #7
 800b3c8:	b29a      	uxth	r2, r3
 800b3ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b3d6:	60da      	str	r2, [r3, #12]
 800b3d8:	e3a3      	b.n	800bb22 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800b3da:	2301      	movs	r3, #1
 800b3dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3e0:	e39f      	b.n	800bb22 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800b3e2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b3e6:	2b40      	cmp	r3, #64	; 0x40
 800b3e8:	f200 8388 	bhi.w	800bafc <UART_SetConfig+0x22ac>
 800b3ec:	a201      	add	r2, pc, #4	; (adr r2, 800b3f4 <UART_SetConfig+0x1ba4>)
 800b3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f2:	bf00      	nop
 800b3f4:	0800b4f9 	.word	0x0800b4f9
 800b3f8:	0800b5af 	.word	0x0800b5af
 800b3fc:	0800bafd 	.word	0x0800bafd
 800b400:	0800bafd 	.word	0x0800bafd
 800b404:	0800b665 	.word	0x0800b665
 800b408:	0800bafd 	.word	0x0800bafd
 800b40c:	0800bafd 	.word	0x0800bafd
 800b410:	0800bafd 	.word	0x0800bafd
 800b414:	0800b71f 	.word	0x0800b71f
 800b418:	0800bafd 	.word	0x0800bafd
 800b41c:	0800bafd 	.word	0x0800bafd
 800b420:	0800bafd 	.word	0x0800bafd
 800b424:	0800bafd 	.word	0x0800bafd
 800b428:	0800bafd 	.word	0x0800bafd
 800b42c:	0800bafd 	.word	0x0800bafd
 800b430:	0800bafd 	.word	0x0800bafd
 800b434:	0800b7d9 	.word	0x0800b7d9
 800b438:	0800bafd 	.word	0x0800bafd
 800b43c:	0800bafd 	.word	0x0800bafd
 800b440:	0800bafd 	.word	0x0800bafd
 800b444:	0800bafd 	.word	0x0800bafd
 800b448:	0800bafd 	.word	0x0800bafd
 800b44c:	0800bafd 	.word	0x0800bafd
 800b450:	0800bafd 	.word	0x0800bafd
 800b454:	0800bafd 	.word	0x0800bafd
 800b458:	0800bafd 	.word	0x0800bafd
 800b45c:	0800bafd 	.word	0x0800bafd
 800b460:	0800bafd 	.word	0x0800bafd
 800b464:	0800bafd 	.word	0x0800bafd
 800b468:	0800bafd 	.word	0x0800bafd
 800b46c:	0800bafd 	.word	0x0800bafd
 800b470:	0800bafd 	.word	0x0800bafd
 800b474:	0800b949 	.word	0x0800b949
 800b478:	0800bafd 	.word	0x0800bafd
 800b47c:	0800bafd 	.word	0x0800bafd
 800b480:	0800bafd 	.word	0x0800bafd
 800b484:	0800bafd 	.word	0x0800bafd
 800b488:	0800bafd 	.word	0x0800bafd
 800b48c:	0800bafd 	.word	0x0800bafd
 800b490:	0800bafd 	.word	0x0800bafd
 800b494:	0800bafd 	.word	0x0800bafd
 800b498:	0800bafd 	.word	0x0800bafd
 800b49c:	0800bafd 	.word	0x0800bafd
 800b4a0:	0800bafd 	.word	0x0800bafd
 800b4a4:	0800bafd 	.word	0x0800bafd
 800b4a8:	0800bafd 	.word	0x0800bafd
 800b4ac:	0800bafd 	.word	0x0800bafd
 800b4b0:	0800bafd 	.word	0x0800bafd
 800b4b4:	0800bafd 	.word	0x0800bafd
 800b4b8:	0800bafd 	.word	0x0800bafd
 800b4bc:	0800bafd 	.word	0x0800bafd
 800b4c0:	0800bafd 	.word	0x0800bafd
 800b4c4:	0800bafd 	.word	0x0800bafd
 800b4c8:	0800bafd 	.word	0x0800bafd
 800b4cc:	0800bafd 	.word	0x0800bafd
 800b4d0:	0800bafd 	.word	0x0800bafd
 800b4d4:	0800bafd 	.word	0x0800bafd
 800b4d8:	0800bafd 	.word	0x0800bafd
 800b4dc:	0800bafd 	.word	0x0800bafd
 800b4e0:	0800bafd 	.word	0x0800bafd
 800b4e4:	0800bafd 	.word	0x0800bafd
 800b4e8:	0800bafd 	.word	0x0800bafd
 800b4ec:	0800bafd 	.word	0x0800bafd
 800b4f0:	0800bafd 	.word	0x0800bafd
 800b4f4:	0800ba3d 	.word	0x0800ba3d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b4f8:	f7fa fb4e 	bl	8005b98 <HAL_RCC_GetPCLK1Freq>
 800b4fc:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b502:	2b00      	cmp	r3, #0
 800b504:	d044      	beq.n	800b590 <UART_SetConfig+0x1d40>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d03e      	beq.n	800b58c <UART_SetConfig+0x1d3c>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b512:	2b02      	cmp	r3, #2
 800b514:	d038      	beq.n	800b588 <UART_SetConfig+0x1d38>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b51a:	2b03      	cmp	r3, #3
 800b51c:	d032      	beq.n	800b584 <UART_SetConfig+0x1d34>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b522:	2b04      	cmp	r3, #4
 800b524:	d02c      	beq.n	800b580 <UART_SetConfig+0x1d30>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52a:	2b05      	cmp	r3, #5
 800b52c:	d026      	beq.n	800b57c <UART_SetConfig+0x1d2c>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b532:	2b06      	cmp	r3, #6
 800b534:	d020      	beq.n	800b578 <UART_SetConfig+0x1d28>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53a:	2b07      	cmp	r3, #7
 800b53c:	d01a      	beq.n	800b574 <UART_SetConfig+0x1d24>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b542:	2b08      	cmp	r3, #8
 800b544:	d014      	beq.n	800b570 <UART_SetConfig+0x1d20>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54a:	2b09      	cmp	r3, #9
 800b54c:	d00e      	beq.n	800b56c <UART_SetConfig+0x1d1c>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b552:	2b0a      	cmp	r3, #10
 800b554:	d008      	beq.n	800b568 <UART_SetConfig+0x1d18>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b55a:	2b0b      	cmp	r3, #11
 800b55c:	d102      	bne.n	800b564 <UART_SetConfig+0x1d14>
 800b55e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b562:	e016      	b.n	800b592 <UART_SetConfig+0x1d42>
 800b564:	2301      	movs	r3, #1
 800b566:	e014      	b.n	800b592 <UART_SetConfig+0x1d42>
 800b568:	2380      	movs	r3, #128	; 0x80
 800b56a:	e012      	b.n	800b592 <UART_SetConfig+0x1d42>
 800b56c:	2340      	movs	r3, #64	; 0x40
 800b56e:	e010      	b.n	800b592 <UART_SetConfig+0x1d42>
 800b570:	2320      	movs	r3, #32
 800b572:	e00e      	b.n	800b592 <UART_SetConfig+0x1d42>
 800b574:	2310      	movs	r3, #16
 800b576:	e00c      	b.n	800b592 <UART_SetConfig+0x1d42>
 800b578:	230c      	movs	r3, #12
 800b57a:	e00a      	b.n	800b592 <UART_SetConfig+0x1d42>
 800b57c:	230a      	movs	r3, #10
 800b57e:	e008      	b.n	800b592 <UART_SetConfig+0x1d42>
 800b580:	2308      	movs	r3, #8
 800b582:	e006      	b.n	800b592 <UART_SetConfig+0x1d42>
 800b584:	2306      	movs	r3, #6
 800b586:	e004      	b.n	800b592 <UART_SetConfig+0x1d42>
 800b588:	2304      	movs	r3, #4
 800b58a:	e002      	b.n	800b592 <UART_SetConfig+0x1d42>
 800b58c:	2302      	movs	r3, #2
 800b58e:	e000      	b.n	800b592 <UART_SetConfig+0x1d42>
 800b590:	2301      	movs	r3, #1
 800b592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b594:	fbb2 f2f3 	udiv	r2, r2, r3
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	085b      	lsrs	r3, r3, #1
 800b59e:	441a      	add	r2, r3
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b5ac:	e2aa      	b.n	800bb04 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b5ae:	f7fa fb09 	bl	8005bc4 <HAL_RCC_GetPCLK2Freq>
 800b5b2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d044      	beq.n	800b646 <UART_SetConfig+0x1df6>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	d03e      	beq.n	800b642 <UART_SetConfig+0x1df2>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c8:	2b02      	cmp	r3, #2
 800b5ca:	d038      	beq.n	800b63e <UART_SetConfig+0x1dee>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d0:	2b03      	cmp	r3, #3
 800b5d2:	d032      	beq.n	800b63a <UART_SetConfig+0x1dea>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d8:	2b04      	cmp	r3, #4
 800b5da:	d02c      	beq.n	800b636 <UART_SetConfig+0x1de6>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e0:	2b05      	cmp	r3, #5
 800b5e2:	d026      	beq.n	800b632 <UART_SetConfig+0x1de2>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5e8:	2b06      	cmp	r3, #6
 800b5ea:	d020      	beq.n	800b62e <UART_SetConfig+0x1dde>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f0:	2b07      	cmp	r3, #7
 800b5f2:	d01a      	beq.n	800b62a <UART_SetConfig+0x1dda>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f8:	2b08      	cmp	r3, #8
 800b5fa:	d014      	beq.n	800b626 <UART_SetConfig+0x1dd6>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b600:	2b09      	cmp	r3, #9
 800b602:	d00e      	beq.n	800b622 <UART_SetConfig+0x1dd2>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b608:	2b0a      	cmp	r3, #10
 800b60a:	d008      	beq.n	800b61e <UART_SetConfig+0x1dce>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b610:	2b0b      	cmp	r3, #11
 800b612:	d102      	bne.n	800b61a <UART_SetConfig+0x1dca>
 800b614:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b618:	e016      	b.n	800b648 <UART_SetConfig+0x1df8>
 800b61a:	2301      	movs	r3, #1
 800b61c:	e014      	b.n	800b648 <UART_SetConfig+0x1df8>
 800b61e:	2380      	movs	r3, #128	; 0x80
 800b620:	e012      	b.n	800b648 <UART_SetConfig+0x1df8>
 800b622:	2340      	movs	r3, #64	; 0x40
 800b624:	e010      	b.n	800b648 <UART_SetConfig+0x1df8>
 800b626:	2320      	movs	r3, #32
 800b628:	e00e      	b.n	800b648 <UART_SetConfig+0x1df8>
 800b62a:	2310      	movs	r3, #16
 800b62c:	e00c      	b.n	800b648 <UART_SetConfig+0x1df8>
 800b62e:	230c      	movs	r3, #12
 800b630:	e00a      	b.n	800b648 <UART_SetConfig+0x1df8>
 800b632:	230a      	movs	r3, #10
 800b634:	e008      	b.n	800b648 <UART_SetConfig+0x1df8>
 800b636:	2308      	movs	r3, #8
 800b638:	e006      	b.n	800b648 <UART_SetConfig+0x1df8>
 800b63a:	2306      	movs	r3, #6
 800b63c:	e004      	b.n	800b648 <UART_SetConfig+0x1df8>
 800b63e:	2304      	movs	r3, #4
 800b640:	e002      	b.n	800b648 <UART_SetConfig+0x1df8>
 800b642:	2302      	movs	r3, #2
 800b644:	e000      	b.n	800b648 <UART_SetConfig+0x1df8>
 800b646:	2301      	movs	r3, #1
 800b648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b64a:	fbb2 f2f3 	udiv	r2, r2, r3
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	085b      	lsrs	r3, r3, #1
 800b654:	441a      	add	r2, r3
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b65e:	b29b      	uxth	r3, r3
 800b660:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b662:	e24f      	b.n	800bb04 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b664:	f107 0318 	add.w	r3, r7, #24
 800b668:	4618      	mov	r0, r3
 800b66a:	f7fb fbfd 	bl	8006e68 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b66e:	69fa      	ldr	r2, [r7, #28]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b674:	2b00      	cmp	r3, #0
 800b676:	d044      	beq.n	800b702 <UART_SetConfig+0x1eb2>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d03e      	beq.n	800b6fe <UART_SetConfig+0x1eae>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b684:	2b02      	cmp	r3, #2
 800b686:	d038      	beq.n	800b6fa <UART_SetConfig+0x1eaa>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b68c:	2b03      	cmp	r3, #3
 800b68e:	d032      	beq.n	800b6f6 <UART_SetConfig+0x1ea6>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b694:	2b04      	cmp	r3, #4
 800b696:	d02c      	beq.n	800b6f2 <UART_SetConfig+0x1ea2>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b69c:	2b05      	cmp	r3, #5
 800b69e:	d026      	beq.n	800b6ee <UART_SetConfig+0x1e9e>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a4:	2b06      	cmp	r3, #6
 800b6a6:	d020      	beq.n	800b6ea <UART_SetConfig+0x1e9a>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ac:	2b07      	cmp	r3, #7
 800b6ae:	d01a      	beq.n	800b6e6 <UART_SetConfig+0x1e96>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b4:	2b08      	cmp	r3, #8
 800b6b6:	d014      	beq.n	800b6e2 <UART_SetConfig+0x1e92>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6bc:	2b09      	cmp	r3, #9
 800b6be:	d00e      	beq.n	800b6de <UART_SetConfig+0x1e8e>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c4:	2b0a      	cmp	r3, #10
 800b6c6:	d008      	beq.n	800b6da <UART_SetConfig+0x1e8a>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6cc:	2b0b      	cmp	r3, #11
 800b6ce:	d102      	bne.n	800b6d6 <UART_SetConfig+0x1e86>
 800b6d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6d4:	e016      	b.n	800b704 <UART_SetConfig+0x1eb4>
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	e014      	b.n	800b704 <UART_SetConfig+0x1eb4>
 800b6da:	2380      	movs	r3, #128	; 0x80
 800b6dc:	e012      	b.n	800b704 <UART_SetConfig+0x1eb4>
 800b6de:	2340      	movs	r3, #64	; 0x40
 800b6e0:	e010      	b.n	800b704 <UART_SetConfig+0x1eb4>
 800b6e2:	2320      	movs	r3, #32
 800b6e4:	e00e      	b.n	800b704 <UART_SetConfig+0x1eb4>
 800b6e6:	2310      	movs	r3, #16
 800b6e8:	e00c      	b.n	800b704 <UART_SetConfig+0x1eb4>
 800b6ea:	230c      	movs	r3, #12
 800b6ec:	e00a      	b.n	800b704 <UART_SetConfig+0x1eb4>
 800b6ee:	230a      	movs	r3, #10
 800b6f0:	e008      	b.n	800b704 <UART_SetConfig+0x1eb4>
 800b6f2:	2308      	movs	r3, #8
 800b6f4:	e006      	b.n	800b704 <UART_SetConfig+0x1eb4>
 800b6f6:	2306      	movs	r3, #6
 800b6f8:	e004      	b.n	800b704 <UART_SetConfig+0x1eb4>
 800b6fa:	2304      	movs	r3, #4
 800b6fc:	e002      	b.n	800b704 <UART_SetConfig+0x1eb4>
 800b6fe:	2302      	movs	r3, #2
 800b700:	e000      	b.n	800b704 <UART_SetConfig+0x1eb4>
 800b702:	2301      	movs	r3, #1
 800b704:	fbb2 f2f3 	udiv	r2, r2, r3
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	685b      	ldr	r3, [r3, #4]
 800b70c:	085b      	lsrs	r3, r3, #1
 800b70e:	441a      	add	r2, r3
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	685b      	ldr	r3, [r3, #4]
 800b714:	fbb2 f3f3 	udiv	r3, r2, r3
 800b718:	b29b      	uxth	r3, r3
 800b71a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b71c:	e1f2      	b.n	800bb04 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b71e:	f107 030c 	add.w	r3, r7, #12
 800b722:	4618      	mov	r0, r3
 800b724:	f7fb fcec 	bl	8007100 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b728:	693a      	ldr	r2, [r7, #16]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d044      	beq.n	800b7bc <UART_SetConfig+0x1f6c>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b736:	2b01      	cmp	r3, #1
 800b738:	d03e      	beq.n	800b7b8 <UART_SetConfig+0x1f68>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73e:	2b02      	cmp	r3, #2
 800b740:	d038      	beq.n	800b7b4 <UART_SetConfig+0x1f64>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b746:	2b03      	cmp	r3, #3
 800b748:	d032      	beq.n	800b7b0 <UART_SetConfig+0x1f60>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b74e:	2b04      	cmp	r3, #4
 800b750:	d02c      	beq.n	800b7ac <UART_SetConfig+0x1f5c>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b756:	2b05      	cmp	r3, #5
 800b758:	d026      	beq.n	800b7a8 <UART_SetConfig+0x1f58>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b75e:	2b06      	cmp	r3, #6
 800b760:	d020      	beq.n	800b7a4 <UART_SetConfig+0x1f54>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b766:	2b07      	cmp	r3, #7
 800b768:	d01a      	beq.n	800b7a0 <UART_SetConfig+0x1f50>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b76e:	2b08      	cmp	r3, #8
 800b770:	d014      	beq.n	800b79c <UART_SetConfig+0x1f4c>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b776:	2b09      	cmp	r3, #9
 800b778:	d00e      	beq.n	800b798 <UART_SetConfig+0x1f48>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b77e:	2b0a      	cmp	r3, #10
 800b780:	d008      	beq.n	800b794 <UART_SetConfig+0x1f44>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b786:	2b0b      	cmp	r3, #11
 800b788:	d102      	bne.n	800b790 <UART_SetConfig+0x1f40>
 800b78a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b78e:	e016      	b.n	800b7be <UART_SetConfig+0x1f6e>
 800b790:	2301      	movs	r3, #1
 800b792:	e014      	b.n	800b7be <UART_SetConfig+0x1f6e>
 800b794:	2380      	movs	r3, #128	; 0x80
 800b796:	e012      	b.n	800b7be <UART_SetConfig+0x1f6e>
 800b798:	2340      	movs	r3, #64	; 0x40
 800b79a:	e010      	b.n	800b7be <UART_SetConfig+0x1f6e>
 800b79c:	2320      	movs	r3, #32
 800b79e:	e00e      	b.n	800b7be <UART_SetConfig+0x1f6e>
 800b7a0:	2310      	movs	r3, #16
 800b7a2:	e00c      	b.n	800b7be <UART_SetConfig+0x1f6e>
 800b7a4:	230c      	movs	r3, #12
 800b7a6:	e00a      	b.n	800b7be <UART_SetConfig+0x1f6e>
 800b7a8:	230a      	movs	r3, #10
 800b7aa:	e008      	b.n	800b7be <UART_SetConfig+0x1f6e>
 800b7ac:	2308      	movs	r3, #8
 800b7ae:	e006      	b.n	800b7be <UART_SetConfig+0x1f6e>
 800b7b0:	2306      	movs	r3, #6
 800b7b2:	e004      	b.n	800b7be <UART_SetConfig+0x1f6e>
 800b7b4:	2304      	movs	r3, #4
 800b7b6:	e002      	b.n	800b7be <UART_SetConfig+0x1f6e>
 800b7b8:	2302      	movs	r3, #2
 800b7ba:	e000      	b.n	800b7be <UART_SetConfig+0x1f6e>
 800b7bc:	2301      	movs	r3, #1
 800b7be:	fbb2 f2f3 	udiv	r2, r2, r3
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	085b      	lsrs	r3, r3, #1
 800b7c8:	441a      	add	r2, r3
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b7d6:	e195      	b.n	800bb04 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7d8:	4b87      	ldr	r3, [pc, #540]	; (800b9f8 <UART_SetConfig+0x21a8>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f003 0320 	and.w	r3, r3, #32
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d05d      	beq.n	800b8a0 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7e4:	4b84      	ldr	r3, [pc, #528]	; (800b9f8 <UART_SetConfig+0x21a8>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	08db      	lsrs	r3, r3, #3
 800b7ea:	f003 0303 	and.w	r3, r3, #3
 800b7ee:	4a83      	ldr	r2, [pc, #524]	; (800b9fc <UART_SetConfig+0x21ac>)
 800b7f0:	40da      	lsrs	r2, r3
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d044      	beq.n	800b884 <UART_SetConfig+0x2034>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7fe:	2b01      	cmp	r3, #1
 800b800:	d03e      	beq.n	800b880 <UART_SetConfig+0x2030>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b806:	2b02      	cmp	r3, #2
 800b808:	d038      	beq.n	800b87c <UART_SetConfig+0x202c>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b80e:	2b03      	cmp	r3, #3
 800b810:	d032      	beq.n	800b878 <UART_SetConfig+0x2028>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b816:	2b04      	cmp	r3, #4
 800b818:	d02c      	beq.n	800b874 <UART_SetConfig+0x2024>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81e:	2b05      	cmp	r3, #5
 800b820:	d026      	beq.n	800b870 <UART_SetConfig+0x2020>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b826:	2b06      	cmp	r3, #6
 800b828:	d020      	beq.n	800b86c <UART_SetConfig+0x201c>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b82e:	2b07      	cmp	r3, #7
 800b830:	d01a      	beq.n	800b868 <UART_SetConfig+0x2018>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b836:	2b08      	cmp	r3, #8
 800b838:	d014      	beq.n	800b864 <UART_SetConfig+0x2014>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b83e:	2b09      	cmp	r3, #9
 800b840:	d00e      	beq.n	800b860 <UART_SetConfig+0x2010>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b846:	2b0a      	cmp	r3, #10
 800b848:	d008      	beq.n	800b85c <UART_SetConfig+0x200c>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b84e:	2b0b      	cmp	r3, #11
 800b850:	d102      	bne.n	800b858 <UART_SetConfig+0x2008>
 800b852:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b856:	e016      	b.n	800b886 <UART_SetConfig+0x2036>
 800b858:	2301      	movs	r3, #1
 800b85a:	e014      	b.n	800b886 <UART_SetConfig+0x2036>
 800b85c:	2380      	movs	r3, #128	; 0x80
 800b85e:	e012      	b.n	800b886 <UART_SetConfig+0x2036>
 800b860:	2340      	movs	r3, #64	; 0x40
 800b862:	e010      	b.n	800b886 <UART_SetConfig+0x2036>
 800b864:	2320      	movs	r3, #32
 800b866:	e00e      	b.n	800b886 <UART_SetConfig+0x2036>
 800b868:	2310      	movs	r3, #16
 800b86a:	e00c      	b.n	800b886 <UART_SetConfig+0x2036>
 800b86c:	230c      	movs	r3, #12
 800b86e:	e00a      	b.n	800b886 <UART_SetConfig+0x2036>
 800b870:	230a      	movs	r3, #10
 800b872:	e008      	b.n	800b886 <UART_SetConfig+0x2036>
 800b874:	2308      	movs	r3, #8
 800b876:	e006      	b.n	800b886 <UART_SetConfig+0x2036>
 800b878:	2306      	movs	r3, #6
 800b87a:	e004      	b.n	800b886 <UART_SetConfig+0x2036>
 800b87c:	2304      	movs	r3, #4
 800b87e:	e002      	b.n	800b886 <UART_SetConfig+0x2036>
 800b880:	2302      	movs	r3, #2
 800b882:	e000      	b.n	800b886 <UART_SetConfig+0x2036>
 800b884:	2301      	movs	r3, #1
 800b886:	fbb2 f2f3 	udiv	r2, r2, r3
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	085b      	lsrs	r3, r3, #1
 800b890:	441a      	add	r2, r3
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	fbb2 f3f3 	udiv	r3, r2, r3
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800b89e:	e131      	b.n	800bb04 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d043      	beq.n	800b930 <UART_SetConfig+0x20e0>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	d03d      	beq.n	800b92c <UART_SetConfig+0x20dc>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b4:	2b02      	cmp	r3, #2
 800b8b6:	d037      	beq.n	800b928 <UART_SetConfig+0x20d8>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8bc:	2b03      	cmp	r3, #3
 800b8be:	d031      	beq.n	800b924 <UART_SetConfig+0x20d4>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c4:	2b04      	cmp	r3, #4
 800b8c6:	d02b      	beq.n	800b920 <UART_SetConfig+0x20d0>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8cc:	2b05      	cmp	r3, #5
 800b8ce:	d025      	beq.n	800b91c <UART_SetConfig+0x20cc>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d4:	2b06      	cmp	r3, #6
 800b8d6:	d01f      	beq.n	800b918 <UART_SetConfig+0x20c8>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8dc:	2b07      	cmp	r3, #7
 800b8de:	d019      	beq.n	800b914 <UART_SetConfig+0x20c4>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e4:	2b08      	cmp	r3, #8
 800b8e6:	d013      	beq.n	800b910 <UART_SetConfig+0x20c0>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ec:	2b09      	cmp	r3, #9
 800b8ee:	d00d      	beq.n	800b90c <UART_SetConfig+0x20bc>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f4:	2b0a      	cmp	r3, #10
 800b8f6:	d007      	beq.n	800b908 <UART_SetConfig+0x20b8>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fc:	2b0b      	cmp	r3, #11
 800b8fe:	d101      	bne.n	800b904 <UART_SetConfig+0x20b4>
 800b900:	4b3f      	ldr	r3, [pc, #252]	; (800ba00 <UART_SetConfig+0x21b0>)
 800b902:	e016      	b.n	800b932 <UART_SetConfig+0x20e2>
 800b904:	4b3d      	ldr	r3, [pc, #244]	; (800b9fc <UART_SetConfig+0x21ac>)
 800b906:	e014      	b.n	800b932 <UART_SetConfig+0x20e2>
 800b908:	4b3e      	ldr	r3, [pc, #248]	; (800ba04 <UART_SetConfig+0x21b4>)
 800b90a:	e012      	b.n	800b932 <UART_SetConfig+0x20e2>
 800b90c:	4b3e      	ldr	r3, [pc, #248]	; (800ba08 <UART_SetConfig+0x21b8>)
 800b90e:	e010      	b.n	800b932 <UART_SetConfig+0x20e2>
 800b910:	4b3e      	ldr	r3, [pc, #248]	; (800ba0c <UART_SetConfig+0x21bc>)
 800b912:	e00e      	b.n	800b932 <UART_SetConfig+0x20e2>
 800b914:	4b3e      	ldr	r3, [pc, #248]	; (800ba10 <UART_SetConfig+0x21c0>)
 800b916:	e00c      	b.n	800b932 <UART_SetConfig+0x20e2>
 800b918:	4b3e      	ldr	r3, [pc, #248]	; (800ba14 <UART_SetConfig+0x21c4>)
 800b91a:	e00a      	b.n	800b932 <UART_SetConfig+0x20e2>
 800b91c:	4b3e      	ldr	r3, [pc, #248]	; (800ba18 <UART_SetConfig+0x21c8>)
 800b91e:	e008      	b.n	800b932 <UART_SetConfig+0x20e2>
 800b920:	4b3e      	ldr	r3, [pc, #248]	; (800ba1c <UART_SetConfig+0x21cc>)
 800b922:	e006      	b.n	800b932 <UART_SetConfig+0x20e2>
 800b924:	4b3e      	ldr	r3, [pc, #248]	; (800ba20 <UART_SetConfig+0x21d0>)
 800b926:	e004      	b.n	800b932 <UART_SetConfig+0x20e2>
 800b928:	4b3e      	ldr	r3, [pc, #248]	; (800ba24 <UART_SetConfig+0x21d4>)
 800b92a:	e002      	b.n	800b932 <UART_SetConfig+0x20e2>
 800b92c:	4b3e      	ldr	r3, [pc, #248]	; (800ba28 <UART_SetConfig+0x21d8>)
 800b92e:	e000      	b.n	800b932 <UART_SetConfig+0x20e2>
 800b930:	4b32      	ldr	r3, [pc, #200]	; (800b9fc <UART_SetConfig+0x21ac>)
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	6852      	ldr	r2, [r2, #4]
 800b936:	0852      	lsrs	r2, r2, #1
 800b938:	441a      	add	r2, r3
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b942:	b29b      	uxth	r3, r3
 800b944:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b946:	e0dd      	b.n	800bb04 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d046      	beq.n	800b9de <UART_SetConfig+0x218e>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b954:	2b01      	cmp	r3, #1
 800b956:	d040      	beq.n	800b9da <UART_SetConfig+0x218a>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b95c:	2b02      	cmp	r3, #2
 800b95e:	d03a      	beq.n	800b9d6 <UART_SetConfig+0x2186>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b964:	2b03      	cmp	r3, #3
 800b966:	d034      	beq.n	800b9d2 <UART_SetConfig+0x2182>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b96c:	2b04      	cmp	r3, #4
 800b96e:	d02e      	beq.n	800b9ce <UART_SetConfig+0x217e>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b974:	2b05      	cmp	r3, #5
 800b976:	d028      	beq.n	800b9ca <UART_SetConfig+0x217a>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b97c:	2b06      	cmp	r3, #6
 800b97e:	d022      	beq.n	800b9c6 <UART_SetConfig+0x2176>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b984:	2b07      	cmp	r3, #7
 800b986:	d01c      	beq.n	800b9c2 <UART_SetConfig+0x2172>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b98c:	2b08      	cmp	r3, #8
 800b98e:	d016      	beq.n	800b9be <UART_SetConfig+0x216e>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b994:	2b09      	cmp	r3, #9
 800b996:	d00f      	beq.n	800b9b8 <UART_SetConfig+0x2168>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b99c:	2b0a      	cmp	r3, #10
 800b99e:	d008      	beq.n	800b9b2 <UART_SetConfig+0x2162>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a4:	2b0b      	cmp	r3, #11
 800b9a6:	d102      	bne.n	800b9ae <UART_SetConfig+0x215e>
 800b9a8:	f643 5309 	movw	r3, #15625	; 0x3d09
 800b9ac:	e018      	b.n	800b9e0 <UART_SetConfig+0x2190>
 800b9ae:	4b18      	ldr	r3, [pc, #96]	; (800ba10 <UART_SetConfig+0x21c0>)
 800b9b0:	e016      	b.n	800b9e0 <UART_SetConfig+0x2190>
 800b9b2:	f647 2312 	movw	r3, #31250	; 0x7a12
 800b9b6:	e013      	b.n	800b9e0 <UART_SetConfig+0x2190>
 800b9b8:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b9bc:	e010      	b.n	800b9e0 <UART_SetConfig+0x2190>
 800b9be:	4b1b      	ldr	r3, [pc, #108]	; (800ba2c <UART_SetConfig+0x21dc>)
 800b9c0:	e00e      	b.n	800b9e0 <UART_SetConfig+0x2190>
 800b9c2:	4b0f      	ldr	r3, [pc, #60]	; (800ba00 <UART_SetConfig+0x21b0>)
 800b9c4:	e00c      	b.n	800b9e0 <UART_SetConfig+0x2190>
 800b9c6:	4b1a      	ldr	r3, [pc, #104]	; (800ba30 <UART_SetConfig+0x21e0>)
 800b9c8:	e00a      	b.n	800b9e0 <UART_SetConfig+0x2190>
 800b9ca:	4b1a      	ldr	r3, [pc, #104]	; (800ba34 <UART_SetConfig+0x21e4>)
 800b9cc:	e008      	b.n	800b9e0 <UART_SetConfig+0x2190>
 800b9ce:	4b0d      	ldr	r3, [pc, #52]	; (800ba04 <UART_SetConfig+0x21b4>)
 800b9d0:	e006      	b.n	800b9e0 <UART_SetConfig+0x2190>
 800b9d2:	4b19      	ldr	r3, [pc, #100]	; (800ba38 <UART_SetConfig+0x21e8>)
 800b9d4:	e004      	b.n	800b9e0 <UART_SetConfig+0x2190>
 800b9d6:	4b0c      	ldr	r3, [pc, #48]	; (800ba08 <UART_SetConfig+0x21b8>)
 800b9d8:	e002      	b.n	800b9e0 <UART_SetConfig+0x2190>
 800b9da:	4b0c      	ldr	r3, [pc, #48]	; (800ba0c <UART_SetConfig+0x21bc>)
 800b9dc:	e000      	b.n	800b9e0 <UART_SetConfig+0x2190>
 800b9de:	4b0c      	ldr	r3, [pc, #48]	; (800ba10 <UART_SetConfig+0x21c0>)
 800b9e0:	687a      	ldr	r2, [r7, #4]
 800b9e2:	6852      	ldr	r2, [r2, #4]
 800b9e4:	0852      	lsrs	r2, r2, #1
 800b9e6:	441a      	add	r2, r3
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9f0:	b29b      	uxth	r3, r3
 800b9f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b9f4:	e086      	b.n	800bb04 <UART_SetConfig+0x22b4>
 800b9f6:	bf00      	nop
 800b9f8:	58024400 	.word	0x58024400
 800b9fc:	03d09000 	.word	0x03d09000
 800ba00:	0003d090 	.word	0x0003d090
 800ba04:	0007a120 	.word	0x0007a120
 800ba08:	000f4240 	.word	0x000f4240
 800ba0c:	001e8480 	.word	0x001e8480
 800ba10:	003d0900 	.word	0x003d0900
 800ba14:	00516155 	.word	0x00516155
 800ba18:	0061a800 	.word	0x0061a800
 800ba1c:	007a1200 	.word	0x007a1200
 800ba20:	00a2c2aa 	.word	0x00a2c2aa
 800ba24:	00f42400 	.word	0x00f42400
 800ba28:	01e84800 	.word	0x01e84800
 800ba2c:	0001e848 	.word	0x0001e848
 800ba30:	00051615 	.word	0x00051615
 800ba34:	00061a80 	.word	0x00061a80
 800ba38:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d04e      	beq.n	800bae2 <UART_SetConfig+0x2292>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d047      	beq.n	800badc <UART_SetConfig+0x228c>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba50:	2b02      	cmp	r3, #2
 800ba52:	d040      	beq.n	800bad6 <UART_SetConfig+0x2286>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba58:	2b03      	cmp	r3, #3
 800ba5a:	d039      	beq.n	800bad0 <UART_SetConfig+0x2280>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba60:	2b04      	cmp	r3, #4
 800ba62:	d032      	beq.n	800baca <UART_SetConfig+0x227a>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba68:	2b05      	cmp	r3, #5
 800ba6a:	d02b      	beq.n	800bac4 <UART_SetConfig+0x2274>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba70:	2b06      	cmp	r3, #6
 800ba72:	d024      	beq.n	800babe <UART_SetConfig+0x226e>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba78:	2b07      	cmp	r3, #7
 800ba7a:	d01d      	beq.n	800bab8 <UART_SetConfig+0x2268>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba80:	2b08      	cmp	r3, #8
 800ba82:	d016      	beq.n	800bab2 <UART_SetConfig+0x2262>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba88:	2b09      	cmp	r3, #9
 800ba8a:	d00f      	beq.n	800baac <UART_SetConfig+0x225c>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba90:	2b0a      	cmp	r3, #10
 800ba92:	d008      	beq.n	800baa6 <UART_SetConfig+0x2256>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba98:	2b0b      	cmp	r3, #11
 800ba9a:	d101      	bne.n	800baa0 <UART_SetConfig+0x2250>
 800ba9c:	2380      	movs	r3, #128	; 0x80
 800ba9e:	e022      	b.n	800bae6 <UART_SetConfig+0x2296>
 800baa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800baa4:	e01f      	b.n	800bae6 <UART_SetConfig+0x2296>
 800baa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800baaa:	e01c      	b.n	800bae6 <UART_SetConfig+0x2296>
 800baac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bab0:	e019      	b.n	800bae6 <UART_SetConfig+0x2296>
 800bab2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bab6:	e016      	b.n	800bae6 <UART_SetConfig+0x2296>
 800bab8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800babc:	e013      	b.n	800bae6 <UART_SetConfig+0x2296>
 800babe:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800bac2:	e010      	b.n	800bae6 <UART_SetConfig+0x2296>
 800bac4:	f640 43cc 	movw	r3, #3276	; 0xccc
 800bac8:	e00d      	b.n	800bae6 <UART_SetConfig+0x2296>
 800baca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bace:	e00a      	b.n	800bae6 <UART_SetConfig+0x2296>
 800bad0:	f241 5355 	movw	r3, #5461	; 0x1555
 800bad4:	e007      	b.n	800bae6 <UART_SetConfig+0x2296>
 800bad6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bada:	e004      	b.n	800bae6 <UART_SetConfig+0x2296>
 800badc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bae0:	e001      	b.n	800bae6 <UART_SetConfig+0x2296>
 800bae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	6852      	ldr	r2, [r2, #4]
 800baea:	0852      	lsrs	r2, r2, #1
 800baec:	441a      	add	r2, r3
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bafa:	e003      	b.n	800bb04 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 800bafc:	2301      	movs	r3, #1
 800bafe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800bb02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb06:	2b0f      	cmp	r3, #15
 800bb08:	d908      	bls.n	800bb1c <UART_SetConfig+0x22cc>
 800bb0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb10:	d204      	bcs.n	800bb1c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb18:	60da      	str	r2, [r3, #12]
 800bb1a:	e002      	b.n	800bb22 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2201      	movs	r2, #1
 800bb26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2201      	movs	r2, #1
 800bb2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2200      	movs	r2, #0
 800bb36:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800bb3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3740      	adds	r7, #64	; 0x40
 800bb46:	46bd      	mov	sp, r7
 800bb48:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800bb4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b083      	sub	sp, #12
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb58:	f003 0301 	and.w	r3, r3, #1
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d00a      	beq.n	800bb76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	430a      	orrs	r2, r1
 800bb74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb7a:	f003 0302 	and.w	r3, r3, #2
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d00a      	beq.n	800bb98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	430a      	orrs	r2, r1
 800bb96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb9c:	f003 0304 	and.w	r3, r3, #4
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d00a      	beq.n	800bbba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	430a      	orrs	r2, r1
 800bbb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbbe:	f003 0308 	and.w	r3, r3, #8
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d00a      	beq.n	800bbdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	685b      	ldr	r3, [r3, #4]
 800bbcc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	430a      	orrs	r2, r1
 800bbda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbe0:	f003 0310 	and.w	r3, r3, #16
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d00a      	beq.n	800bbfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	689b      	ldr	r3, [r3, #8]
 800bbee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	430a      	orrs	r2, r1
 800bbfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc02:	f003 0320 	and.w	r3, r3, #32
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d00a      	beq.n	800bc20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	689b      	ldr	r3, [r3, #8]
 800bc10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	430a      	orrs	r2, r1
 800bc1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d01a      	beq.n	800bc62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	685b      	ldr	r3, [r3, #4]
 800bc32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	430a      	orrs	r2, r1
 800bc40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc4a:	d10a      	bne.n	800bc62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	685b      	ldr	r3, [r3, #4]
 800bc52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	430a      	orrs	r2, r1
 800bc60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d00a      	beq.n	800bc84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	430a      	orrs	r2, r1
 800bc82:	605a      	str	r2, [r3, #4]
  }
}
 800bc84:	bf00      	nop
 800bc86:	370c      	adds	r7, #12
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr

0800bc90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b086      	sub	sp, #24
 800bc94:	af02      	add	r7, sp, #8
 800bc96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800bca0:	f7f6 fd36 	bl	8002710 <HAL_GetTick>
 800bca4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f003 0308 	and.w	r3, r3, #8
 800bcb0:	2b08      	cmp	r3, #8
 800bcb2:	d10e      	bne.n	800bcd2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bcb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bcb8:	9300      	str	r3, [sp, #0]
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 f82c 	bl	800bd20 <UART_WaitOnFlagUntilTimeout>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d001      	beq.n	800bcd2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bcce:	2303      	movs	r3, #3
 800bcd0:	e022      	b.n	800bd18 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f003 0304 	and.w	r3, r3, #4
 800bcdc:	2b04      	cmp	r3, #4
 800bcde:	d10e      	bne.n	800bcfe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bce0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bce4:	9300      	str	r3, [sp, #0]
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	2200      	movs	r2, #0
 800bcea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 f816 	bl	800bd20 <UART_WaitOnFlagUntilTimeout>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d001      	beq.n	800bcfe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bcfa:	2303      	movs	r3, #3
 800bcfc:	e00c      	b.n	800bd18 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2220      	movs	r2, #32
 800bd02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2220      	movs	r2, #32
 800bd0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2200      	movs	r2, #0
 800bd12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bd16:	2300      	movs	r3, #0
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3710      	adds	r7, #16
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	60f8      	str	r0, [r7, #12]
 800bd28:	60b9      	str	r1, [r7, #8]
 800bd2a:	603b      	str	r3, [r7, #0]
 800bd2c:	4613      	mov	r3, r2
 800bd2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd30:	e062      	b.n	800bdf8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd32:	69bb      	ldr	r3, [r7, #24]
 800bd34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd38:	d05e      	beq.n	800bdf8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd3a:	f7f6 fce9 	bl	8002710 <HAL_GetTick>
 800bd3e:	4602      	mov	r2, r0
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	1ad3      	subs	r3, r2, r3
 800bd44:	69ba      	ldr	r2, [r7, #24]
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d302      	bcc.n	800bd50 <UART_WaitOnFlagUntilTimeout+0x30>
 800bd4a:	69bb      	ldr	r3, [r7, #24]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d11d      	bne.n	800bd8c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	681a      	ldr	r2, [r3, #0]
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bd5e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	689a      	ldr	r2, [r3, #8]
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f022 0201 	bic.w	r2, r2, #1
 800bd6e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	2220      	movs	r2, #32
 800bd74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2220      	movs	r2, #32
 800bd7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2200      	movs	r2, #0
 800bd84:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800bd88:	2303      	movs	r3, #3
 800bd8a:	e045      	b.n	800be18 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f003 0304 	and.w	r3, r3, #4
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d02e      	beq.n	800bdf8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	69db      	ldr	r3, [r3, #28]
 800bda0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bda4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bda8:	d126      	bne.n	800bdf8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bdb2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	681a      	ldr	r2, [r3, #0]
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bdc2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	689a      	ldr	r2, [r3, #8]
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f022 0201 	bic.w	r2, r2, #1
 800bdd2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2220      	movs	r2, #32
 800bdd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2220      	movs	r2, #32
 800bde0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2220      	movs	r2, #32
 800bde8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800bdf4:	2303      	movs	r3, #3
 800bdf6:	e00f      	b.n	800be18 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	69da      	ldr	r2, [r3, #28]
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	4013      	ands	r3, r2
 800be02:	68ba      	ldr	r2, [r7, #8]
 800be04:	429a      	cmp	r2, r3
 800be06:	bf0c      	ite	eq
 800be08:	2301      	moveq	r3, #1
 800be0a:	2300      	movne	r3, #0
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	461a      	mov	r2, r3
 800be10:	79fb      	ldrb	r3, [r7, #7]
 800be12:	429a      	cmp	r2, r3
 800be14:	d08d      	beq.n	800bd32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800be16:	2300      	movs	r3, #0
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3710      	adds	r7, #16
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800be20:	b480      	push	{r7}
 800be22:	b085      	sub	sp, #20
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800be2e:	2b01      	cmp	r3, #1
 800be30:	d101      	bne.n	800be36 <HAL_UARTEx_DisableFifoMode+0x16>
 800be32:	2302      	movs	r3, #2
 800be34:	e027      	b.n	800be86 <HAL_UARTEx_DisableFifoMode+0x66>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2201      	movs	r2, #1
 800be3a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2224      	movs	r2, #36	; 0x24
 800be42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f022 0201 	bic.w	r2, r2, #1
 800be5c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800be64:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2200      	movs	r2, #0
 800be6a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	68fa      	ldr	r2, [r7, #12]
 800be72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2220      	movs	r2, #32
 800be78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2200      	movs	r2, #0
 800be80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800be84:	2300      	movs	r3, #0
}
 800be86:	4618      	mov	r0, r3
 800be88:	3714      	adds	r7, #20
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr

0800be92 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800be92:	b580      	push	{r7, lr}
 800be94:	b084      	sub	sp, #16
 800be96:	af00      	add	r7, sp, #0
 800be98:	6078      	str	r0, [r7, #4]
 800be9a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bea2:	2b01      	cmp	r3, #1
 800bea4:	d101      	bne.n	800beaa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bea6:	2302      	movs	r3, #2
 800bea8:	e02d      	b.n	800bf06 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2201      	movs	r2, #1
 800beae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2224      	movs	r2, #36	; 0x24
 800beb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	681a      	ldr	r2, [r3, #0]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f022 0201 	bic.w	r2, r2, #1
 800bed0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	689b      	ldr	r3, [r3, #8]
 800bed8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	683a      	ldr	r2, [r7, #0]
 800bee2:	430a      	orrs	r2, r1
 800bee4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f000 f850 	bl	800bf8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	68fa      	ldr	r2, [r7, #12]
 800bef2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2220      	movs	r2, #32
 800bef8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2200      	movs	r2, #0
 800bf00:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bf04:	2300      	movs	r3, #0
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3710      	adds	r7, #16
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}

0800bf0e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf0e:	b580      	push	{r7, lr}
 800bf10:	b084      	sub	sp, #16
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	6078      	str	r0, [r7, #4]
 800bf16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bf1e:	2b01      	cmp	r3, #1
 800bf20:	d101      	bne.n	800bf26 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bf22:	2302      	movs	r3, #2
 800bf24:	e02d      	b.n	800bf82 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2201      	movs	r2, #1
 800bf2a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2224      	movs	r2, #36	; 0x24
 800bf32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	681a      	ldr	r2, [r3, #0]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f022 0201 	bic.w	r2, r2, #1
 800bf4c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	689b      	ldr	r3, [r3, #8]
 800bf54:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	683a      	ldr	r2, [r7, #0]
 800bf5e:	430a      	orrs	r2, r1
 800bf60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f000 f812 	bl	800bf8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	68fa      	ldr	r2, [r7, #12]
 800bf6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2220      	movs	r2, #32
 800bf74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bf80:	2300      	movs	r3, #0
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3710      	adds	r7, #16
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}
	...

0800bf8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b089      	sub	sp, #36	; 0x24
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800bf94:	4a2f      	ldr	r2, [pc, #188]	; (800c054 <UARTEx_SetNbDataToProcess+0xc8>)
 800bf96:	f107 0314 	add.w	r3, r7, #20
 800bf9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf9e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800bfa2:	4a2d      	ldr	r2, [pc, #180]	; (800c058 <UARTEx_SetNbDataToProcess+0xcc>)
 800bfa4:	f107 030c 	add.w	r3, r7, #12
 800bfa8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bfac:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d108      	bne.n	800bfca <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2201      	movs	r2, #1
 800bfbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bfc8:	e03d      	b.n	800c046 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bfca:	2308      	movs	r3, #8
 800bfcc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bfce:	2308      	movs	r3, #8
 800bfd0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	689b      	ldr	r3, [r3, #8]
 800bfd8:	0e5b      	lsrs	r3, r3, #25
 800bfda:	b2db      	uxtb	r3, r3
 800bfdc:	f003 0307 	and.w	r3, r3, #7
 800bfe0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	689b      	ldr	r3, [r3, #8]
 800bfe8:	0f5b      	lsrs	r3, r3, #29
 800bfea:	b2db      	uxtb	r3, r3
 800bfec:	f003 0307 	and.w	r3, r3, #7
 800bff0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800bff2:	7fbb      	ldrb	r3, [r7, #30]
 800bff4:	7f3a      	ldrb	r2, [r7, #28]
 800bff6:	f107 0120 	add.w	r1, r7, #32
 800bffa:	440a      	add	r2, r1
 800bffc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c000:	fb02 f303 	mul.w	r3, r2, r3
 800c004:	7f3a      	ldrb	r2, [r7, #28]
 800c006:	f107 0120 	add.w	r1, r7, #32
 800c00a:	440a      	add	r2, r1
 800c00c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c010:	fb93 f3f2 	sdiv	r3, r3, r2
 800c014:	b29a      	uxth	r2, r3
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800c01c:	7ffb      	ldrb	r3, [r7, #31]
 800c01e:	7f7a      	ldrb	r2, [r7, #29]
 800c020:	f107 0120 	add.w	r1, r7, #32
 800c024:	440a      	add	r2, r1
 800c026:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c02a:	fb02 f303 	mul.w	r3, r2, r3
 800c02e:	7f7a      	ldrb	r2, [r7, #29]
 800c030:	f107 0120 	add.w	r1, r7, #32
 800c034:	440a      	add	r2, r1
 800c036:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c03a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c03e:	b29a      	uxth	r2, r3
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c046:	bf00      	nop
 800c048:	3724      	adds	r7, #36	; 0x24
 800c04a:	46bd      	mov	sp, r7
 800c04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c050:	4770      	bx	lr
 800c052:	bf00      	nop
 800c054:	0800c130 	.word	0x0800c130
 800c058:	0800c138 	.word	0x0800c138

0800c05c <__libc_init_array>:
 800c05c:	b570      	push	{r4, r5, r6, lr}
 800c05e:	4e0d      	ldr	r6, [pc, #52]	; (800c094 <__libc_init_array+0x38>)
 800c060:	4c0d      	ldr	r4, [pc, #52]	; (800c098 <__libc_init_array+0x3c>)
 800c062:	1ba4      	subs	r4, r4, r6
 800c064:	10a4      	asrs	r4, r4, #2
 800c066:	2500      	movs	r5, #0
 800c068:	42a5      	cmp	r5, r4
 800c06a:	d109      	bne.n	800c080 <__libc_init_array+0x24>
 800c06c:	4e0b      	ldr	r6, [pc, #44]	; (800c09c <__libc_init_array+0x40>)
 800c06e:	4c0c      	ldr	r4, [pc, #48]	; (800c0a0 <__libc_init_array+0x44>)
 800c070:	f000 f82c 	bl	800c0cc <_init>
 800c074:	1ba4      	subs	r4, r4, r6
 800c076:	10a4      	asrs	r4, r4, #2
 800c078:	2500      	movs	r5, #0
 800c07a:	42a5      	cmp	r5, r4
 800c07c:	d105      	bne.n	800c08a <__libc_init_array+0x2e>
 800c07e:	bd70      	pop	{r4, r5, r6, pc}
 800c080:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c084:	4798      	blx	r3
 800c086:	3501      	adds	r5, #1
 800c088:	e7ee      	b.n	800c068 <__libc_init_array+0xc>
 800c08a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c08e:	4798      	blx	r3
 800c090:	3501      	adds	r5, #1
 800c092:	e7f2      	b.n	800c07a <__libc_init_array+0x1e>
 800c094:	0800c158 	.word	0x0800c158
 800c098:	0800c158 	.word	0x0800c158
 800c09c:	0800c158 	.word	0x0800c158
 800c0a0:	0800c15c 	.word	0x0800c15c

0800c0a4 <memcpy>:
 800c0a4:	b510      	push	{r4, lr}
 800c0a6:	1e43      	subs	r3, r0, #1
 800c0a8:	440a      	add	r2, r1
 800c0aa:	4291      	cmp	r1, r2
 800c0ac:	d100      	bne.n	800c0b0 <memcpy+0xc>
 800c0ae:	bd10      	pop	{r4, pc}
 800c0b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0b8:	e7f7      	b.n	800c0aa <memcpy+0x6>

0800c0ba <memset>:
 800c0ba:	4402      	add	r2, r0
 800c0bc:	4603      	mov	r3, r0
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d100      	bne.n	800c0c4 <memset+0xa>
 800c0c2:	4770      	bx	lr
 800c0c4:	f803 1b01 	strb.w	r1, [r3], #1
 800c0c8:	e7f9      	b.n	800c0be <memset+0x4>
	...

0800c0cc <_init>:
 800c0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ce:	bf00      	nop
 800c0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0d2:	bc08      	pop	{r3}
 800c0d4:	469e      	mov	lr, r3
 800c0d6:	4770      	bx	lr

0800c0d8 <_fini>:
 800c0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0da:	bf00      	nop
 800c0dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0de:	bc08      	pop	{r3}
 800c0e0:	469e      	mov	lr, r3
 800c0e2:	4770      	bx	lr
